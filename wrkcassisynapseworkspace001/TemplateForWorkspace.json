{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "wrkcassisynapseworkspace001"
		},
		"linkedParquet_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedParquet'"
		},
		"lnk_synprod_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'lnk_synprod'"
		},
		"lnk_synstage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'lnk_synstage'"
		},
		"stage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'stage'"
		},
		"wrkcassisynapseworkspace001-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'wrkcassisynapseworkspace001-WorkspaceDefaultSqlServer'"
		},
		"ADLSPOCDATA_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stgcassigsmadatalake02.dfs.core.windows.net/"
		},
		"ADLSStage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stgcassidatalake001.dfs.core.windows.net/"
		},
		"wrkcassisynapseworkspace001-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stgcassidatalake001.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/PL1_AUTORIZACAO_master')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "DF1AUTORIZACAO",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF1_TF_AUTORIZACAO",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"poolAUTORIZACAO": {},
									"poolLOGSTATUS": {},
									"poolSTATUSSOLICITACAO": {},
									"parquetQR1AUTORIZACAO": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "stagingstoragefolder/AUTORIZACAO"
							},
							"compute": {
								"coreCount": 32,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-28T11:15:49Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/DF1_TF_AUTORIZACAO')]",
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL2_CARAC_AUT')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "D2CARACAUT",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF2_CARAC_AUT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"poolCARACTINTERNACAO": {},
									"parquetQRY2CARACTAUTORIZACAO": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "stagingstoragefolder/AUTORIZACAO"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-28T11:45:08Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/DF2_CARAC_AUT')]",
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL3_JOIN')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "DF3",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF3_VL_PREST_ANESTESISTA",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"poolVLPRESTANESTESISTA": {},
									"parquetVLPRESTANESTESISTA": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "stagingstoragefolder/AUTORIZACAO"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"annotations": [],
				"lastPublishTime": "2022-07-28T11:46:10Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/DF3_VL_PREST_ANESTESISTA')]",
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL3_VL_PREST_ANESTASISTA')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "DF3",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF3_VL_PREST_ANESTESISTA",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"poolVLPRESTANESTESISTA": {},
									"parquetVLPRESTANESTESISTA": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "stagingstoragefolder/AUTORIZACAO"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-04T12:56:39Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/DF3_VL_PREST_ANESTESISTA')]",
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL4_VLPRESTADORES')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "DF4",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF4_VL_PRESTADORES",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"poolVLPRESTADORES": {},
									"parquetVLPRETADORES": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "stagingstoragefolder/AUTORIZACAO"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-04T12:54:04Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/DF4_VL_PRESTADORES')]",
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL5_VL_ESTADOS')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "DF5",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF5_VL_ESTADOS",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"poolVLESTADOS": {},
									"prqtVLESTADOS": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "stagingstoragefolder/AUTORIZACAO"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-04T12:55:44Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/DF5_VL_ESTADOS')]",
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL6_VL_EST_ANSTESISTA')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "DF6",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF6_VL_EST_ANESTASISTA",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"poolVLESTAANESTESISTA": {},
									"prqtVLESTANESTESISTA": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "stagingstoragefolder/AUTORIZACAO"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-04T12:56:26Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/DF6_VL_EST_ANESTASISTA')]",
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_PARQUET')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "PRQT",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FD_VL_EST_PRESTADOR",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"prqtAUTSEMVLPREST": {},
									"prqtQRY5VLESTADOS": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-11T18:45:38Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/FD_VL_EST_PRESTADOR')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_POOL_PARQUET')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "POOLPRQT",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FD_TD_PARTICIPANTE",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"prqtQR1AUTORIZACAO": {},
									"poolTDPARTICIPANTE": {},
									"poolTFCADASTRADOSESF": {},
									"prqtAUTTDPARTICIPANTE": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "stagingstoragefolder/AUTORIZACAO"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"sourceStagingConcurrency": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-16T13:03:45Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/FD_TD_PARTICIPANTE')]",
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_POOL_PARQUET_FD_MA')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "POOLPRQT",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FD_PROVISAO_MA",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"poolQRYMA2": {},
									"poolQRYMA1": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "stagingstoragefolder/PROVISAO"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/MENSAIS/PROVISAO"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-10T20:01:56Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/FD_PROVISAO_MA')]",
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ADLSPOCDATA')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ADLSPOCDATA_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ADLSStage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ADLSStage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PowerBIWorkspace')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Teste Autorização",
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "54b35b2e-b97b-4b15-96cf-4538ce041e89",
					"tenantID": "e0e71e1d-4c06-450d-98af-e6e3ff47472c"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/linkedParquet')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedParquet_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/lnk_synprod')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('lnk_synprod_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/lnk_synstage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('lnk_synstage_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/stage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('stage_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/wrkcassisynapseworkspace001-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('wrkcassisynapseworkspace001-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('wrkcassisynapseworkspace001-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"cleanup": true
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DF0_MASTER1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO/Primeiros"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "parquetAUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "parquetVLPRESTADORES"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "DF0SAIDA"
						}
					],
					"transformations": [
						{
							"name": "lkp4CHAVES"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          HD_AUTORIZ_LOGSTATUS as integer,",
						"          HD_AUTORIZ as long,",
						"          SSMAX as integer,",
						"          HD_SSMAX as integer,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> parquetAUTORIZACAO",
						"source(output(",
						"          HD_PRESTADOR as integer,",
						"          HD_TGE as integer,",
						"          HD_CBO as integer,",
						"          HD_REGIME_ATENDIMENTO as integer,",
						"          HD_GRAU as integer,",
						"          DT_INICIAL as timestamp,",
						"          DT_FINAL as timestamp,",
						"          NU_PORTE_ANESTESICO as integer,",
						"          NU_PORTE_SALA as integer,",
						"          VL_US as double,",
						"          VL_UCO as double,",
						"          VL_FILME as double,",
						"          ST_LOOKUP as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QRY4_VL_PRESTADORES') ~> parquetVLPRESTADORES",
						"parquetAUTORIZACAO, parquetVLPRESTADORES lookup(HD_PREST_EXECUTOR == HD_PRESTADOR",
						"     && parquetAUTORIZACAO@HD_TGE == parquetVLPRESTADORES@HD_TGE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkp4CHAVES",
						"lkp4CHAVES sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'testes',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '',",
						"     encodingName: 'ISO-8859-1',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['DF0_SAIDA.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> DF0SAIDA"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DF1_TF_AUTORIZACAO')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolAUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolLOGSTATUS"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolSTATUSSOLICITACAO"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "parquetQR1AUTORIZACAO"
						}
					],
					"transformations": [
						{
							"name": "joinAutLogStatus"
						},
						{
							"name": "joinAutLogStatusSolicit"
						},
						{
							"name": "colAutLogStatusSolicit"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          HD_AUTORIZ_LOGSTATUS as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT DISTINCT\\n     AUT.HANDLE AS HD_AUTORIZACAO\\n    ,AES.HANDLE AS HD_AUTORIZ_EVENTO_SOLICIT\\n    ,AEG.HANDLE AS HD_AUTORIZ_EVENTO_GERADO\\n    ,TGE.HANDLE AS HD_TGE \\n    ,BEN.HANDLE AS HD_BENEF\\n    ,ENDB.ESTADO AS HD_ESTADO_BENEF\\n    ,PRE2.ESTADOPAGAMENTO AS HD_ESTADO_PREST_EXEC\\n    ,PRE1.HANDLE AS HD_PREST_SOLICITANTE\\n    ,PRE1.PRESTADOR AS CO_PREST_SOLICITANTE\\n    ,PRE2.HANDLE AS HD_PREST_EXECUTOR\\n    ,PRE2.PRESTADOR AS CO_PREST_EXECUTOR\\n    ,PFO.HANDLE AS HD_PREST_FORNECEDOR  \\n    ,PFO.PRESTADOR AS CO_PREST_FORNECEDOR  \\n    ,TAU.HANDLE AS HD_TP_AUTORIZ\\n    ,GR.HANDLE AS HD_GRAU\\n    ,GR.GRAU AS CO_GRAU\\n    ,TPT.CODIGO AS CO_TP_TRATAMENTO\\n    ,OBJ.CODIGO AS CO_OBJ_TRATAMENTO\\n    ,TPA.HANDLE as HD_REGIME_ATEND \\n    ,FNL.HANDLE AS HD_FINALID_ATEND\\n    ,CRT.HANDLE AS HD_CARAT_ATEND\\n    ,RGM.HANDLE AS HD_REGIME_INT\\n    ,TPA.HANDLE AS HD_TP_ATEND\\n    ,TPI.HANDLE AS HD_TP_INTERN\\n    ,IND.HANDLE AS HD_IND_ACIDENTE\\n    ,TPC.HANDLE AS HD_TP_CONSULTA\\n    ,PLA.HANDLE AS HD_PLANO\\n    ,CON.HANDLE AS HD_CONTRATO\\n    ,GPU.HANDLE AS HD_USUARIO\\n    ,TPR.HANDLE AS HD_TIS_TAB_PRECO\\n    ,TPR.CODIGO AS CO_TIS_TAB_PRECO\\n    ,CBO.HANDLE AS HD_CBOS\\n    ,CBO.CODIGO AS CO_CBOS\\n /* ,TSS.CODIGO AS CO_ST_SOLICIT */\\n    ,AUT.SITUACAO AS CO_SITUACAO_AUT\\n    ,AES.SITUACAO AS CO_SITUACAO_AES\\n    ,AEG.SITUACAO AS CO_SITUACAO_AEG\\n    ,AES.OPCAOOPME AS ST_OPCAO_OPME  \\n    ,AUT.AUTORIZACAO AS NU_AUTORIZACAO\\n    ,AUT.DATAAUTORIZACAO AS DT_AUTORIZACAO_AUT\\n    ,AUT.DATASOLICITACAO AS DT_SOLICITACAO_AUT\\n    ,AEG.DATAAUTORIZACAO AS DT_AUTORIZACAO_AEG\\n    ,AEG.DATAATENDIMENTO AS DT_ATENDIMENTO_AEG\\n    ,AES.QTDSOLICITADAORIGINAL  AS QTDSOLICITADAORIGINAL\\n    ,AEG.QTDAUTORIZADA AS QTDAUTORIZADA\\n    ,(AES.QTDSOLICITADAORIGINAL - AEG.QTDAUTORIZADA) AS QT_NEGADA   \\n    ,AES.VALORUNITARIOSOLICITADO AS VALORUNITARIOSOLICITADO\\n    ,AES.VALORUNITARIONEGOCIADOOPME AS VALORUNITARIONEGOCIADOOPME\\n    ,AES.VALORUNITARIOCALCULADOOPME AS VALORUNITARIOCALCULADOOPME\\n    ,AES.VALORUNITARIOAUTORIZADOOPME AS VALORUNITARIOAUTORIZADOOPME\\n    ,AES.DATASOLICITACAO AS DT_SOLICITACAO_AES \\n    ,NAU.NIVELAUTORIZACAO AS NU_NIVEL_AUTORIZACAO \\n    ,AUT.ORIGEMAUTORIZACAO AS CO_ORIGEM_AUTORIZACAO \\n    ,AUT.SOLICITANTENOME AS NO_PROF_SOLICITANTE \\n    ,AUT.SOLICITANTECRNUM AS NU_CRM_PROF_SOLICITANTE_AUT \\n    ,AUT.CONSELHOPROFSOLICITANTETISS AS PK_TD_CONSELHO_Prof_Solic \\n    ,AUT.UFCONSELHOPROFSOLICITANTE AS PK_TD_CONSELHO_Uf_Prof_Solic \\n    ,PES.HANDLE AS HD_PREST_SOLICITANTE_AES \\n    ,PES.PRESTADOR AS CO_PREST_SOLICITANTE_AES \\n    ,AUT.RADIOSOLICITACAO AS DS_ORIGEM_SOLICITACAO\\n    ,AUT.INDICACAOCLINICA AS DS_INDICACAO_CLINICA\\n    ,AUT.DATAVALIDADE AS DT_VALIDADE_AUT\\n    ,PEX.HANDLE AS HD_PREST_EXECUTOR_AES \\n    ,PEX.PRESTADOR AS CO_PREST_EXECUTOR_AES \\n    ,AEG.DATAHORAGERACAO AS TS_GERACAO_AEG\\n    ,AEG.DATAHORALIBERACAO AS TS_LIBERACAO_AEG\\n    ,AEG.USUARIOGERACAO AS HD_USUARIO_GERACAO_AEG\\n    ,TGE.COMPORTAHE AS ST_HORARIO_ESPECIAL\\n    ,ALG.HANDLE AS HD_AUTORIZ_LOGSTATUS\\nFROM PROSTG.SAM_AUTORIZ AUT\\nLEFT JOIN PROSTG.SAM_AUTORIZ_EVENTOSOLICIT AES ON AES.AUTORIZACAO = AUT.HANDLE\\nLEFT JOIN PROSTG.SAM_AUTORIZ_EVENTOGERADO AEG ON AEG.EVENTOSOLICITADO = AES.HANDLE\\nJOIN PROSTG.SAM_TIPOAUTORIZ TAU ON TAU.HANDLE = AUT.TIPOAUTORIZACAO\\nLEFT JOIN PROSTG.SAM_REGIMEATENDIMENTO RA ON RA.HANDLE = AUT.REGIMEATENDIMENTO\\nLEFT JOIN PROSTG.SAM_LOCALATENDIMENTO LA ON LA.HANDLE = AUT.LOCALATENDIMENTO\\nLEFT JOIN PROSTG.SAM_TGE TGE ON TGE.HANDLE = ISNULL(AEG.EVENTOGERADO, AES.EVENTO)\\nLEFT JOIN PROSTG.SAM_TGE_NIVELAUTORIZACAO NAU ON NAU.EVENTO = TGE.HANDLE \\nLEFT JOIN PROSTG.TIS_TABELAPRECO TPR ON TPR.HANDLE = TGE.TABELADOMINIOTISS\\nLEFT JOIN PROSTG.SAM_GRAU GR ON GR.HANDLE = AEG.GRAUGERADO\\nLEFT JOIN PROSTG.SAM_TIPOTRATAMENTO TPT ON TPT.HANDLE = TGE.TIPOTRATAMENTO\\nLEFT JOIN PROSTG.SAM_OBJTRATAMENTO OBJ ON OBJ.HANDLE = TGE.OBJETIVOTRATAMENTO\\nJOIN PROSTG.SAM_BENEFICIARIO BEN ON BEN.HANDLE = AUT.BENEFICIARIO \\nLEFT JOIN PROSTG.SAM_PRESTADOR PRE1 ON PRE1.HANDLE = AUT.SOLICITANTE\\nLEFT JOIN PROSTG.SAM_PRESTADOR PRE2 ON PRE2.HANDLE = AUT.LOCALEXECUCAO\\nLEFT JOIN PROSTG.SAM_PRESTADOR PFO  ON PFO.HANDLE  = AES.FORNECEDOR\\nLEFT JOIN PROSTG.SAM_PRESTADOR PES  ON PES.HANDLE  = AES.SOLICITANTE\\nLEFT JOIN PROSTG.SAM_PRESTADOR PEX  ON PEX.HANDLE  = AES.EXECUTOR\\nLEFT JOIN PROSTG.TIS_CBOS CBO ON CBO.HANDLE = AUT.CBOSPROFSOLICITANTETISS\\nLEFT JOIN PROSTG.Z_GRUPOUSUARIOS GPU ON GPU.HANDLE = AUT.USUARIO\\nLEFT JOIN PROSTG.SAM_ENDERECO ENDB ON ENDB.HANDLE = BEN.ENDERECORESIDENCIAL\\nLEFT JOIN PROSTG.SAM_FINALIDADEATENDIMENTO FNL ON FNL.HANDLE = AUT.FINALIDADEATENDIMENTO\\nLEFT JOIN PROSTG.TIS_CARATERATENDIMENTO CRT ON CRT.HANDLE = AUT.CARATERATENDIMENTO\\nLEFT JOIN PROSTG.TIS_REGIMEINTERNACAO RGM ON RGM.HANDLE = AUT.REGIMEINTERNACAO\\nLEFT JOIN PROSTG.TIS_TIPOATENDIMENTO TPA ON TPA.HANDLE = AUT.TIPOATENDIMENTO\\nLEFT JOIN PROSTG.TIS_TIPOINTERNACAO TPI ON TPI.HANDLE = AUT.TIPOINTERNACAOTISS\\nLEFT JOIN PROSTG.TIS_INDICADORDEACIDENTE IND ON IND.HANDLE = AUT.INDICADORDEACIDENTE\\nLEFT JOIN PROSTG.TIS_TIPOCONSULTA TPC ON TPC.HANDLE = AUT.TIPOCONSULTA\\nLEFT JOIN PROSTG.SAM_CONTRATO CON ON CON.HANDLE = BEN.CONTRATO\\nJOIN PROSTG.SAM_PLANO PLA ON PLA.HANDLE = CON.PLANO\\nLEFT JOIN PROSTG.SAM_AUTORIZ_LOGSTATUS ALG ON ALG.AUTORIZACAO = AUT.HANDLE \\n/*         JOIN TABTMP ON SSMAX = ALG.HANDLE\\nLEFT JOIN PROSTG.TIS_STATUSSOLICITACAO TSS ON TSS.HANDLE = ALG.STATUS*/\\nWHERE AUT.LOCALATENDIMENTO = 1 \\nAND AES.SITUACAO <> \\'C\\' \\nAND AUT.SITUACAO NOT IN (\\'C\\',\\'F\\') \\nAND SUBSTRING(CAST(ISNULL(ISNULL(AEG.DATAAUTORIZACAO, AES.DATASOLICITACAO ), AUT.DATAAUTORIZACAO) AS VARCHAR),1,10) = \\'2022-01-01\\'\\nAND NAU.DATAFINAL IS NULL ',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolAUTORIZACAO",
						"source(output(",
						"          HD_AUTORIZ as long,",
						"          SSMAX as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT AU.HANDLE AS HD_AUTORIZ,\\nMAX(LG.HANDLE) AS SSMAX\\nFROM PROSTG.SAM_AUTORIZ_LOGSTATUS LG \\nJOIN PROSTG.SAM_AUTORIZ AU ON LG.AUTORIZACAO = AU.HANDLE\\nGROUP BY AU.HANDLE',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolLOGSTATUS",
						"source(output(",
						"          HD_SSMAX as integer,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT LG.HANDLE AS HD_SSMAX\\n,TSS.CODIGO AS CO_ST_SOLICIT\\nFROM PROSTG.SAM_AUTORIZ_LOGSTATUS LG \\nLEFT JOIN PROSTG.TIS_STATUSSOLICITACAO TSS ON TSS.HANDLE = LG.STATUS',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolSTATUSSOLICITACAO",
						"poolAUTORIZACAO, poolLOGSTATUS join(HD_AUTORIZ_LOGSTATUS == SSMAX,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinAutLogStatus",
						"joinAutLogStatus, poolSTATUSSOLICITACAO join(SSMAX == HD_SSMAX,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinAutLogStatusSolicit",
						"joinAutLogStatusSolicit select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAutLogStatusSolicit",
						"colAutLogStatusSolicit sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['QR1_AUTORIZACAO'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> parquetQR1AUTORIZACAO"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]",
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DF1_TF_AUTORIZACAO_copy1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO/Primeiros"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "CARACAUTORIZ"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "AUTORIZ"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "LOGSTATUS"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "STATUSSOLICITACAO"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "joinAutLogStatus"
						},
						{
							"name": "joinLogStatusSolicitacao"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZ as long,",
						"          REGIMEATENDIMENTO as long,",
						"          CONDICAOATENDIMENTO as long,",
						"          LOCALATENDIMENTO as long,",
						"          FINALIDADEATENDIMENTO as long,",
						"          TIPOAUTORIZACAO as long,",
						"          TIPOTRATAMENTO as long,",
						"          OBJETIVOTRATAMENTO as long,",
						"          ACOMODACAO as long,",
						"          MOTIVOALTA as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     AUT.HANDLE AS HD_AUTORIZ,\\n     AUT.REGIMEATENDIMENTO AS REGIMEATENDIMENTO,\\n     AUT.CONDICAOATENDIMENTO AS CONDICAOATENDIMENTO ,\\n     AUT.LOCALATENDIMENTO AS LOCALATENDIMENTO,\\n     AUT.FINALIDADEATENDIMENTO AS FINALIDADEATENDIMENTO,\\n     AUT.TIPOAUTORIZACAO AS TIPOAUTORIZACAO,\\n     AUT.TIPOTRATAMENTO AS TIPOTRATAMENTO,\\n     AUT.OBJETIVOTRATAMENTO AS OBJETIVOTRATAMENTO,\\n     AUT.ACOMODACAO AS ACOMODACAO,\\n     AUT.MOTIVOALTA AS MOTIVOALTA\\n\\nFROM PROSTG.SAM_AUTORIZ AUT\\nLEFT JOIN PROSTG.SAM_AUTORIZ_EVENTOSOLICIT AES ON AES.AUTORIZACAO = AUT.HANDLE\\nLEFT JOIN PROSTG.SAM_AUTORIZ_EVENTOGERADO  AEG ON AEG.EVENTOSOLICITADO = AES.HANDLE\\n \\nWHERE AUT.LOCALATENDIMENTO = 1 --Rede Credenciada\\nAND AES.SITUACAO <> \\'C\\' --Solicitações diferentes de Canceladas\\nAND AUT.SITUACAO NOT IN (\\'C\\',\\'F\\') --Autorizações diferentes de Cancelada e Fechada\\nAND SUBSTRING(CAST(ISNULL(ISNULL(AEG.DATAAUTORIZACAO, AES.DATASOLICITACAO ), AUT.DATAAUTORIZACAO) AS VARCHAR),1,10) = \\'2022-01-01\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> CARACAUTORIZ",
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          HD_AUTORIZ_LOGSTATUS as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT DISTINCT\\n     AUT.HANDLE AS HD_AUTORIZACAO\\n    ,AES.HANDLE AS HD_AUTORIZ_EVENTO_SOLICIT\\n    ,AEG.HANDLE AS HD_AUTORIZ_EVENTO_GERADO\\n    ,TGE.HANDLE AS HD_TGE \\n    ,BEN.HANDLE AS HD_BENEF\\n    ,ENDB.ESTADO AS HD_ESTADO_BENEF\\n    ,PRE2.ESTADOPAGAMENTO AS HD_ESTADO_PREST_EXEC\\n    ,PRE1.HANDLE AS HD_PREST_SOLICITANTE\\n    ,PRE1.PRESTADOR AS CO_PREST_SOLICITANTE\\n    ,PRE2.HANDLE AS HD_PREST_EXECUTOR\\n    ,PRE2.PRESTADOR AS CO_PREST_EXECUTOR\\n    ,PFO.HANDLE AS HD_PREST_FORNECEDOR  \\n    ,PFO.PRESTADOR AS CO_PREST_FORNECEDOR  \\n    ,TAU.HANDLE AS HD_TP_AUTORIZ\\n    ,GR.HANDLE AS HD_GRAU\\n    ,GR.GRAU AS CO_GRAU\\n    ,TPT.CODIGO AS CO_TP_TRATAMENTO\\n    ,OBJ.CODIGO AS CO_OBJ_TRATAMENTO\\n    ,TPA.HANDLE as HD_REGIME_ATEND \\n    ,FNL.HANDLE AS HD_FINALID_ATEND\\n    ,CRT.HANDLE AS HD_CARAT_ATEND\\n    ,RGM.HANDLE AS HD_REGIME_INT\\n    ,TPA.HANDLE AS HD_TP_ATEND\\n    ,TPI.HANDLE AS HD_TP_INTERN\\n    ,IND.HANDLE AS HD_IND_ACIDENTE\\n    ,TPC.HANDLE AS HD_TP_CONSULTA\\n    ,PLA.HANDLE AS HD_PLANO\\n    ,CON.HANDLE AS HD_CONTRATO\\n    ,GPU.HANDLE AS HD_USUARIO\\n    ,TPR.HANDLE AS HD_TIS_TAB_PRECO\\n    ,TPR.CODIGO AS CO_TIS_TAB_PRECO\\n    ,CBO.HANDLE AS HD_CBOS\\n    ,CBO.CODIGO AS CO_CBOS\\n /* ,TSS.CODIGO AS CO_ST_SOLICIT */\\n    ,AUT.SITUACAO AS CO_SITUACAO_AUT\\n    ,AES.SITUACAO AS CO_SITUACAO_AES\\n    ,AEG.SITUACAO AS CO_SITUACAO_AEG\\n    ,AES.OPCAOOPME AS ST_OPCAO_OPME  \\n    ,AUT.AUTORIZACAO AS NU_AUTORIZACAO\\n    ,AUT.DATAAUTORIZACAO AS DT_AUTORIZACAO_AUT\\n    ,AUT.DATASOLICITACAO AS DT_SOLICITACAO_AUT\\n    ,AEG.DATAAUTORIZACAO AS DT_AUTORIZACAO_AEG\\n    ,AEG.DATAATENDIMENTO AS DT_ATENDIMENTO_AEG\\n    ,AES.QTDSOLICITADAORIGINAL  AS QTDSOLICITADAORIGINAL\\n    ,AEG.QTDAUTORIZADA AS QTDAUTORIZADA\\n    ,(AES.QTDSOLICITADAORIGINAL - AEG.QTDAUTORIZADA) AS QT_NEGADA   \\n    ,AES.VALORUNITARIOSOLICITADO AS VALORUNITARIOSOLICITADO\\n    ,AES.VALORUNITARIONEGOCIADOOPME AS VALORUNITARIONEGOCIADOOPME\\n    ,AES.VALORUNITARIOCALCULADOOPME AS VALORUNITARIOCALCULADOOPME\\n    ,AES.VALORUNITARIOAUTORIZADOOPME AS VALORUNITARIOAUTORIZADOOPME\\n    ,AES.DATASOLICITACAO AS DT_SOLICITACAO_AES \\n    ,NAU.NIVELAUTORIZACAO AS NU_NIVEL_AUTORIZACAO \\n    ,AUT.ORIGEMAUTORIZACAO AS CO_ORIGEM_AUTORIZACAO \\n    ,AUT.SOLICITANTENOME AS NO_PROF_SOLICITANTE \\n    ,AUT.SOLICITANTECRNUM AS NU_CRM_PROF_SOLICITANTE_AUT \\n    ,AUT.CONSELHOPROFSOLICITANTETISS AS PK_TD_CONSELHO_Prof_Solic \\n    ,AUT.UFCONSELHOPROFSOLICITANTE AS PK_TD_CONSELHO_Uf_Prof_Solic \\n    ,PES.HANDLE AS HD_PREST_SOLICITANTE_AES \\n    ,PES.PRESTADOR AS CO_PREST_SOLICITANTE_AES \\n    ,AUT.RADIOSOLICITACAO AS DS_ORIGEM_SOLICITACAO\\n    ,AUT.INDICACAOCLINICA AS DS_INDICACAO_CLINICA\\n    ,AUT.DATAVALIDADE AS DT_VALIDADE_AUT\\n    ,PEX.HANDLE AS HD_PREST_EXECUTOR_AES \\n    ,PEX.PRESTADOR AS CO_PREST_EXECUTOR_AES \\n    ,AEG.DATAHORAGERACAO AS TS_GERACAO_AEG\\n    ,AEG.DATAHORALIBERACAO AS TS_LIBERACAO_AEG\\n    ,AEG.USUARIOGERACAO AS HD_USUARIO_GERACAO_AEG\\n    ,TGE.COMPORTAHE AS ST_HORARIO_ESPECIAL\\n    ,ALG.HANDLE AS HD_AUTORIZ_LOGSTATUS\\nFROM PROSTG.SAM_AUTORIZ AUT\\nLEFT JOIN PROSTG.SAM_AUTORIZ_EVENTOSOLICIT AES ON AES.AUTORIZACAO = AUT.HANDLE\\nLEFT JOIN PROSTG.SAM_AUTORIZ_EVENTOGERADO AEG ON AEG.EVENTOSOLICITADO = AES.HANDLE\\nJOIN PROSTG.SAM_TIPOAUTORIZ TAU ON TAU.HANDLE = AUT.TIPOAUTORIZACAO\\nLEFT JOIN PROSTG.SAM_REGIMEATENDIMENTO RA ON RA.HANDLE = AUT.REGIMEATENDIMENTO\\nLEFT JOIN PROSTG.SAM_LOCALATENDIMENTO LA ON LA.HANDLE = AUT.LOCALATENDIMENTO\\nLEFT JOIN PROSTG.SAM_TGE TGE ON TGE.HANDLE = ISNULL(AEG.EVENTOGERADO, AES.EVENTO)\\nLEFT JOIN PROSTG.SAM_TGE_NIVELAUTORIZACAO NAU ON NAU.EVENTO = TGE.HANDLE \\nLEFT JOIN PROSTG.TIS_TABELAPRECO TPR ON TPR.HANDLE = TGE.TABELADOMINIOTISS\\nLEFT JOIN PROSTG.SAM_GRAU GR ON GR.HANDLE = AEG.GRAUGERADO\\nLEFT JOIN PROSTG.SAM_TIPOTRATAMENTO TPT ON TPT.HANDLE = TGE.TIPOTRATAMENTO\\nLEFT JOIN PROSTG.SAM_OBJTRATAMENTO OBJ ON OBJ.HANDLE = TGE.OBJETIVOTRATAMENTO\\nJOIN PROSTG.SAM_BENEFICIARIO BEN ON BEN.HANDLE = AUT.BENEFICIARIO \\nLEFT JOIN PROSTG.SAM_PRESTADOR PRE1 ON PRE1.HANDLE = AUT.SOLICITANTE\\nLEFT JOIN PROSTG.SAM_PRESTADOR PRE2 ON PRE2.HANDLE = AUT.LOCALEXECUCAO\\nLEFT JOIN PROSTG.SAM_PRESTADOR PFO  ON PFO.HANDLE  = AES.FORNECEDOR\\nLEFT JOIN PROSTG.SAM_PRESTADOR PES  ON PES.HANDLE  = AES.SOLICITANTE\\nLEFT JOIN PROSTG.SAM_PRESTADOR PEX  ON PEX.HANDLE  = AES.EXECUTOR\\nLEFT JOIN PROSTG.TIS_CBOS CBO ON CBO.HANDLE = AUT.CBOSPROFSOLICITANTETISS\\nLEFT JOIN PROSTG.Z_GRUPOUSUARIOS GPU ON GPU.HANDLE = AUT.USUARIO\\nLEFT JOIN PROSTG.SAM_ENDERECO ENDB ON ENDB.HANDLE = BEN.ENDERECORESIDENCIAL\\nLEFT JOIN PROSTG.SAM_FINALIDADEATENDIMENTO FNL ON FNL.HANDLE = AUT.FINALIDADEATENDIMENTO\\nLEFT JOIN PROSTG.TIS_CARATERATENDIMENTO CRT ON CRT.HANDLE = AUT.CARATERATENDIMENTO\\nLEFT JOIN PROSTG.TIS_REGIMEINTERNACAO RGM ON RGM.HANDLE = AUT.REGIMEINTERNACAO\\nLEFT JOIN PROSTG.TIS_TIPOATENDIMENTO TPA ON TPA.HANDLE = AUT.TIPOATENDIMENTO\\nLEFT JOIN PROSTG.TIS_TIPOINTERNACAO TPI ON TPI.HANDLE = AUT.TIPOINTERNACAOTISS\\nLEFT JOIN PROSTG.TIS_INDICADORDEACIDENTE IND ON IND.HANDLE = AUT.INDICADORDEACIDENTE\\nLEFT JOIN PROSTG.TIS_TIPOCONSULTA TPC ON TPC.HANDLE = AUT.TIPOCONSULTA\\nLEFT JOIN PROSTG.SAM_CONTRATO CON ON CON.HANDLE = BEN.CONTRATO\\nJOIN PROSTG.SAM_PLANO PLA ON PLA.HANDLE = CON.PLANO\\nLEFT JOIN PROSTG.SAM_AUTORIZ_LOGSTATUS ALG ON ALG.AUTORIZACAO = AUT.HANDLE \\n/*         JOIN TABTMP ON SSMAX = ALG.HANDLE\\nLEFT JOIN PROSTG.TIS_STATUSSOLICITACAO TSS ON TSS.HANDLE = ALG.STATUS*/\\nWHERE AUT.LOCALATENDIMENTO = 1 \\nAND AES.SITUACAO <> \\'C\\' \\nAND AUT.SITUACAO NOT IN (\\'C\\',\\'F\\') \\nAND SUBSTRING(CAST(ISNULL(ISNULL(AEG.DATAAUTORIZACAO, AES.DATASOLICITACAO ), AUT.DATAAUTORIZACAO) AS VARCHAR),1,10) = \\'2022-01-01\\'\\nAND NAU.DATAFINAL IS NULL ',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> AUTORIZ",
						"source(output(",
						"          HD_AUTORIZ as long,",
						"          SSMAX as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT AU.HANDLE AS HD_AUTORIZ,\\nMAX(LG.HANDLE) AS SSMAX\\nFROM PROSTG.SAM_AUTORIZ_LOGSTATUS LG \\nJOIN PROSTG.SAM_AUTORIZ AU ON LG.AUTORIZACAO = AU.HANDLE\\nGROUP BY AU.HANDLE',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> LOGSTATUS",
						"source(output(",
						"          HD_SSMAX as integer,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT LG.HANDLE AS HD_SSMAX\\n,TSS.CODIGO AS CO_ST_SOLICIT\\nFROM PROSTG.SAM_AUTORIZ_LOGSTATUS LG \\nLEFT JOIN PROSTG.TIS_STATUSSOLICITACAO TSS ON TSS.HANDLE = LG.STATUS',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> STATUSSOLICITACAO",
						"AUTORIZ, LOGSTATUS join(HD_AUTORIZ_LOGSTATUS == SSMAX,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinAutLogStatus",
						"joinAutLogStatus, STATUSSOLICITACAO join(SSMAX == HD_SSMAX,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinLogStatusSolicitacao",
						"joinLogStatusSolicitacao select(mapColumn(",
						"          each(match(true()))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"CARACAUTORIZ sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'testes',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '',",
						"     encodingName: 'ISO-8859-1',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:['TST_AUTORIZ.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'testes',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '',",
						"     encodingName: 'ISO-8859-1',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:['TST_AUTORIZ_2.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]",
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DF2_CARAC_AUT')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolCARACTINTERNACAO"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "parquetQRY2CARACTAUTORIZACAO"
						}
					],
					"transformations": [
						{
							"name": "derColStLookup"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZ as integer,",
						"          REGIMEATENDIMENTO as integer,",
						"          CONDICAOATENDIMENTO as integer,",
						"          LOCALATENDIMENTO as integer,",
						"          FINALIDADEATENDIMENTO as integer,",
						"          TIPOAUTORIZACAO as integer,",
						"          TIPOTRATAMENTO as integer,",
						"          OBJETIVOTRATAMENTO as integer,",
						"          ACOMODACAO as integer,",
						"          MOTIVOALTA as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     AUT.HANDLE AS HD_AUTORIZ,\\n     AUT.REGIMEATENDIMENTO AS REGIMEATENDIMENTO,\\n     AUT.CONDICAOATENDIMENTO AS CONDICAOATENDIMENTO,\\n     AUT.LOCALATENDIMENTO AS LOCALATENDIMENTO,\\n     AUT.FINALIDADEATENDIMENTO AS FINALIDADEATENDIMENTO,\\n     AUT.TIPOAUTORIZACAO AS TIPOAUTORIZACAO,\\n     AUT.TIPOTRATAMENTO AS TIPOTRATAMENTO,\\n     AUT.OBJETIVOTRATAMENTO AS OBJETIVOTRATAMENTO,\\n     AUT.ACOMODACAO AS ACOMODACAO,\\n     AUT.MOTIVOALTA AS MOTIVOALTA\\n\\nFROM PROSTG.SAM_AUTORIZ AUT\\nLEFT JOIN PROSTG.SAM_AUTORIZ_EVENTOSOLICIT AES ON AES.AUTORIZACAO = AUT.HANDLE\\nLEFT JOIN PROSTG.SAM_AUTORIZ_EVENTOGERADO  AEG ON AEG.EVENTOSOLICITADO = AES.HANDLE\\n \\nWHERE AUT.LOCALATENDIMENTO = 1 --Rede Credenciada\\nAND AES.SITUACAO <> \\'C\\' --Solicitações diferentes de Canceladas\\nAND AUT.SITUACAO NOT IN (\\'C\\',\\'F\\') --Autorizações diferentes de Cancelada e Fechada\\nAND SUBSTRING(CAST(ISNULL(ISNULL(AEG.DATAAUTORIZACAO, AES.DATASOLICITACAO ), AUT.DATAAUTORIZACAO) AS VARCHAR),1,10) = \\'2022-01-01\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolCARACTINTERNACAO",
						"poolCARACTINTERNACAO derive(ST_LOOKUP = toBoolean('1')) ~> derColStLookup",
						"derColStLookup sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['QRY2_CARACT_AUTORIZACAO'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> parquetQRY2CARACTAUTORIZACAO"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]",
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DF3_VL_PREST_ANESTESISTA')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolVLPRESTANESTESISTA"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "parquetVLPRESTANESTESISTA"
						}
					],
					"transformations": [
						{
							"name": "derColStLookup"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_PRESTADOR as integer,",
						"          NU_PORTE_ANESTESICO as long,",
						"          DT_INICIAL as timestamp,",
						"          DT_FINAL as timestamp,",
						"          PERCENTUALAUXILIARANESTESISTA as double,",
						"          QTDUSANESTESISTA as double,",
						"          PERCENTUALPAGTOUS as double,",
						"          VALORUSHONORARIO as double,",
						"          VL_US_ANESTESISTA as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT DISTINCT \\n     PR.HANDLE AS HD_PRESTADOR\\n    ,DT.PORTEANESTESICO AS NU_PORTE_ANESTESICO -- PAN\\n    ,DT.DATAINICIAL AS DT_INICIAL\\n    ,DT.DATAFINAL AS DT_FINAL\\n    ,DT.PERCENTUALAUXILIARANESTESISTA AS PERCENTUALAUXILIARANESTESISTA\\n    ,DT.QTDUSANESTESISTA AS QTDUSANESTESISTA\\n    ,DT.PERCENTUALPAGTOUS AS PERCENTUALPAGTOUS\\n    ,VUS.VALORUSHONORARIO AS VALORUSHONORARIO\\n    ,(DT.QTDUSANESTESISTA*DT.PERCENTUALPAGTOUS*VUS.VALORUSHONORARIO)/100  AS VL_US_ANESTESISTA\\n\\nFROM PROSTG.SAM_PRESTADOR PR\\n         JOIN PROSTG.SAM_PRECOPRESTADOR_AN DT ON PR.HANDLE  = DT.PRESTADOR\\n    LEFT JOIN PROSTG.SAM_TABUS US ON US.HANDLE  = DT.TABELAUS\\n    LEFT JOIN PROSTG.SAM_TABUS_VLR VUS ON US.HANDLE  = VUS.TABELAUS\\n\\nWHERE VUS.DATAFINAL IS NULL',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolVLPRESTANESTESISTA",
						"filter1 derive(ST_LOOKUP = toBoolean('1')) ~> derColStLookup",
						"poolVLPRESTANESTESISTA filter(!isNull(HD_PRESTADOR) && !isNull(NU_PORTE_ANESTESICO)) ~> filter1",
						"derColStLookup sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['QRY3_VL_PREST_ANETESISTA'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> parquetVLPRESTANESTESISTA"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]",
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DF4_VL_PRESTADORES')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolVLPRESTADORES"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "parquetVLPRETADORES"
						}
					],
					"transformations": [
						{
							"name": "ColDerStLookup"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_PRESTADOR as integer,",
						"          HD_TGE as integer,",
						"          HD_CBO as integer,",
						"          HD_REGIME_ATENDIMENTO as integer,",
						"          HD_GRAU as integer,",
						"          DT_INICIAL as timestamp,",
						"          DT_FINAL as timestamp,",
						"          NU_PORTE_ANESTESICO as integer,",
						"          NU_PORTE_SALA as integer,",
						"          VL_US as double,",
						"          VL_UCO as double,",
						"          VL_FILME as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT DISTINCT \\n     PR.HANDLE AS HD_PRESTADOR\\n    ,TGE.HANDLE AS HD_TGE\\n    ,CBO.HANDLE AS HD_CBO\\n    ,DT.TIPOATENDIMENTO AS HD_REGIME_ATENDIMENTO\\n    ,GRA.HANDLE AS HD_GRAU\\n    ,DT.DATAINICIAL AS DT_INICIAL\\n    ,DT.DATAFINAL AS DT_FINAL\\n    ,DT.PORTEANESTESICO AS NU_PORTE_ANESTESICO\\n    ,DT.PORTESALA AS NU_PORTE_SALA\\n\\n    ,(DT.QTDUSHONORARIO*DT.PERCENTUALPGTOUS*VUS.VALORUSHONORARIO)/100     AS VL_US\\n    ,(DT.QTDUSCUSTOOPERACIONAL*DT.PERCENTUALPGTOCUSTO*VCO.VALORUSCUSTOOPERACIONAL)/100  AS VL_UCO --Unidade Custo Operacional\\n    ,(DT.FATORFILME*DT.PERCENTUALPGTOFILME* VIL.FILMEVALOR)/100    AS VL_FILME\\n\\nFROM PROSTG.SAM_PRESTADOR                                       PR\\n          JOIN PROSTG.SAM_PRECOPRESTADOR_DOTAC                  DT     ON PR.HANDLE  = DT.PRESTADOR\\n          JOIN PROSTG.SAM_TGE                                   TGE    ON TGE.HANDLE = DT.EVENTO\\n     LEFT JOIN PROSTG.SAM_GRAU                                  GRA    ON TGE.HANDLE = GRA.TERMO\\n     LEFT JOIN PROSTG.TIS_CBOS                                  CBO    ON CBO.HANDLE = DT.CBOSTISS       \\n     LEFT JOIN PROSTG.TIS_TABELAPRECO                           TD     ON TD.HANDLE = TGE.TABELADOMINIOTISS\\n     LEFT JOIN PROSTG.SAM_TABCUSTOOPERAC                        UCO    ON UCO.HANDLE = DT.TABELACUSTOOPERAC \\n     LEFT JOIN PROSTG.SAM_TABCUSTOOPERAC_VLR                    VCO    ON UCO.HANDLE = VCO.TABELACUSTOOPERACUS\\n     LEFT JOIN PROSTG.SAM_TABUS                                 US     ON US.HANDLE  = DT.TABELAUS\\n     LEFT JOIN PROSTG.SAM_TABUS_VLR                             VUS    ON US.HANDLE  = VUS.TABELAUS\\n     LEFT JOIN PROSTG.SAM_TABFILME                              FIL    ON DT.TABELAFILME = FIL.HANDLE\\n     LEFT JOIN PROSTG.SAM_TABFILME_VLR                          VIL    ON FIL.HANDLE = VIL.TABELAFILME\\n\\n WHERE TD.CODIGO = 22\\n      AND VIL.DATAFINAL IS NULL\\n      AND VUS.DATAFINAL IS NULL\\n      AND VCO.DATAFINAL IS NULL\\n\\nAND \\'2022-01-01\\' BETWEEN SUBSTRING(CAST(DT.DATAINICIAL AS VARCHAR),1,10) AND SUBSTRING(CAST(ISNULL(DT.DATAFINAL,\\'9999-12-31\\') AS VARCHAR),1,10)',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolVLPRESTADORES",
						"filter1 derive(ST_LOOKUP = toBoolean('1')) ~> ColDerStLookup",
						"poolVLPRESTADORES filter(!isNull(HD_PRESTADOR) && !isNull(HD_TGE) && !isNull(HD_CBO) && !isNull(HD_REGIME_ATENDIMENTO)) ~> filter1",
						"ColDerStLookup sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['QRY4_VL_PRESTADORES'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1)) ~> parquetVLPRETADORES"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]",
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DF5_VL_ESTADOS')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolVLESTADOS"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtVLESTADOS"
						}
					],
					"transformations": [
						{
							"name": "ColDerLookup"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_ESTADO as long,",
						"          HD_TGE as integer,",
						"          HD_CBO as integer,",
						"          HD_REGIME_ATENDIMENTO as long,",
						"          HD_GRAU as integer,",
						"          DT_INICIAL as timestamp,",
						"          DT_FINAL as timestamp,",
						"          NU_PORTE_ANESTESICO as long,",
						"          NU_PORTE_SALA as long,",
						"          VL_US as double,",
						"          VL_UCO as double,",
						"          VL_FILME as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT DISTINCT \\n     ES.HANDLE AS HD_ESTADO\\n    ,TGE.HANDLE AS HD_TGE\\n    ,CBO.HANDLE AS HD_CBO\\n    ,DT.TIPOATENDIMENTO AS HD_REGIME_ATENDIMENTO\\n    ,GRA.HANDLE AS HD_GRAU\\n    ,DT.DATAINICIAL AS DT_INICIAL\\n    ,DT.DATAFINAL AS DT_FINAL\\n    ,DT.PORTEANESTESICO AS NU_PORTE_ANESTESICO\\n    ,DT.PORTESALA AS NU_PORTE_SALA\\n\\n    ,(DT.QTDUSHONORARIO*DT.PERCENTUALPGTOUS*VUS.VALORUSHONORARIO)/100     AS VL_US\\n    ,(DT.QTDUSCUSTOOPERACIONAL*DT.PERCENTUALPGTOCUSTO*VCO.VALORUSCUSTOOPERACIONAL)/100  AS VL_UCO --Unidade Custo Operacional\\n    ,(DT.FATORFILME*DT.PERCENTUALPGTOFILME*VIL.FILMEVALOR)/100    AS VL_FILME\\n\\nFROM PROSTG.ESTADOS                                             ES\\n          JOIN PROSTG.SAM_PRECOESTADO_DOTAC                     DT     ON ES.HANDLE  = DT.ESTADO\\n          JOIN PROSTG.SAM_TGE                                   TGE    ON TGE.HANDLE = DT.EVENTO\\n     LEFT JOIN PROSTG.SAM_GRAU                                  GRA    ON TGE.HANDLE = GRA.TERMO\\n     LEFT JOIN PROSTG.TIS_CBOS                                  CBO    ON CBO.HANDLE = DT.CBOSTISS       \\n     LEFT JOIN PROSTG.TIS_TABELAPRECO                           TD     ON TD.HANDLE = TGE.TABELADOMINIOTISS\\n     LEFT JOIN PROSTG.SAM_TABCUSTOOPERAC                        UCO    ON UCO.HANDLE = DT.TABELACUSTOOPERAC \\n     LEFT JOIN PROSTG.SAM_TABCUSTOOPERAC_VLR                    VCO    ON UCO.HANDLE = VCO.TABELACUSTOOPERACUS\\n     LEFT JOIN PROSTG.SAM_TABUS                                 US     ON US.HANDLE  = DT.TABELAUS\\n     LEFT JOIN PROSTG.SAM_TABUS_VLR                             VUS    ON US.HANDLE  = VUS.TABELAUS\\n     LEFT JOIN PROSTG.SAM_TABFILME                              FIL    ON DT.TABELAFILME = FIL.HANDLE\\n     LEFT JOIN PROSTG.SAM_TABFILME_VLR                          VIL    ON FIL.HANDLE = VIL.TABELAFILME\\n\\nWHERE TD.CODIGO = 22\\n      AND VIL.DATAFINAL IS NULL\\n      AND VUS.DATAFINAL IS NULL\\n      AND VCO.DATAFINAL IS NULL\\n\\nAND \\'2022-01-01\\' BETWEEN SUBSTRING(CAST(DT.DATAINICIAL AS VARCHAR),1,10) AND SUBSTRING(CAST(ISNULL(DT.DATAFINAL,\\'9999-12-31\\') AS VARCHAR),1,10)\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolVLESTADOS",
						"filter1 derive(ST_LOOKUP = toBoolean('1')) ~> ColDerLookup",
						"poolVLESTADOS filter(!isNull(HD_ESTADO) && !isNull(HD_TGE) && !isNull(HD_CBO) && !isNull(HD_REGIME_ATENDIMENTO)) ~> filter1",
						"ColDerLookup sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['QRY5_VL_ESTADOS'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtVLESTADOS"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]",
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DF6_VL_EST_ANESTASISTA')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolVLESTAANESTESISTA"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtVLESTANESTESISTA"
						}
					],
					"transformations": [
						{
							"name": "ColDerLookup"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_ESTADO as long,",
						"          NU_PORTE_ANESTESICO as long,",
						"          DT_INICIAL as timestamp,",
						"          DT_FINAL as timestamp,",
						"          PERCENTUALAUXILIARANESTESISTA as double,",
						"          QTDUSANESTESISTA as double,",
						"          PERCENTUALPAGTOUS as double,",
						"          VALORUSHONORARIO as double,",
						"          VL_US_ANESTESISTA as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT DISTINCT \\n     ES.HANDLE AS HD_ESTADO\\n    ,DT.PORTEANESTESICO AS NU_PORTE_ANESTESICO \\n    ,DT.DATAINICIAL AS DT_INICIAL\\n    ,DT.DATAFINAL AS DT_FINAL\\n    ,DT.PERCENTUALAUXILIARANESTESISTA AS PERCENTUALAUXILIARANESTESISTA\\n    ,DT.QTDUSANESTESISTA AS QTDUSANESTESISTA\\n    ,DT.PERCENTUALPAGTOUS AS PERCENTUALPAGTOUS\\n    ,VUS.VALORUSHONORARIO AS VALORUSHONORARIO\\n    ,(DT.QTDUSANESTESISTA*DT.PERCENTUALPAGTOUS*VUS.VALORUSHONORARIO)/100  AS VL_US_ANESTESISTA\\n\\nFROM PROSTG.ESTADOS                ES\\n   JOIN PROSTG.SAM_PRECOESTADO_AN  DT     ON ES.HANDLE  = DT.ESTADO\\n   LEFT JOIN PROSTG.SAM_TABUS      US     ON US.HANDLE  = DT.TABELAUS\\n   LEFT JOIN PROSTG.SAM_TABUS_VLR  VUS    ON US.HANDLE  = VUS.TABELAUS\\n\\nWHERE VUS.DATAFINAL IS NULL',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolVLESTAANESTESISTA",
						"filter1 derive(ST_LOOKUP = toBoolean('1')) ~> ColDerLookup",
						"poolVLESTAANESTESISTA filter(!isNull(HD_ESTADO) && !isNull(NU_PORTE_ANESTESICO)) ~> filter1",
						"ColDerLookup sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['QRY6_VL_EST_ANESTESISTA'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1)) ~> prqtVLESTANESTESISTA"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]",
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_CARACTERISCA_AUTORIZACAO')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQRY2CARACTAUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDCARACAUTORIZ"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDCARACAUTORIZACAO"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "lkpQRY2CARACTAUTORIZ"
						},
						{
							"name": "derColQRY2CARACTAUTORIZ"
						},
						{
							"name": "colQRY2CARACTAUTORIZ"
						},
						{
							"name": "lkpTDCARACTAUTORIZ"
						},
						{
							"name": "derColTDCARACAUTORIZ"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          HD_AUTORIZ as integer,",
						"          REGIMEATENDIMENTO as integer,",
						"          CONDICAOATENDIMENTO as integer,",
						"          LOCALATENDIMENTO as integer,",
						"          FINALIDADEATENDIMENTO as integer,",
						"          TIPOAUTORIZACAO as integer,",
						"          TIPOTRATAMENTO as integer,",
						"          OBJETIVOTRATAMENTO as integer,",
						"          ACOMODACAO as integer,",
						"          MOTIVOALTA as integer,",
						"          ST_LOOKUP as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QRY2_CARACT_AUTORIZACAO') ~> prqtQRY2CARACTAUTORIZACAO",
						"source(output(",
						"          SK_TD_CARACTERISTICA_AUTORIZ as decimal(10,0),",
						"          CO_HD_REGIME_ATENDIMENTO as decimal(10,0),",
						"          CO_HD_CONDICAO_ATENDIMENTO as decimal(10,0),",
						"          CO_HD_LOCAL_ATENDIMENTO as decimal(10,0),",
						"          CO_HD_FINALIDADE_ATENDIMENTO as decimal(10,0),",
						"          CO_HD_TIPO_AUTORIZACAO as decimal(10,0),",
						"          CO_HD_TIPO_TRATAMENTO as decimal(10,0),",
						"          CO_HD_OBJETIVO_TRATAMENTO as decimal(10,0),",
						"          CO_HD_ACOMODACAO as decimal(10,0),",
						"          CO_HD_MOTIVO_ALTA as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT SK_TD_CARACTERISTICA_AUTORIZ AS SK_TD_CARACTERISTICA_AUTORIZ\\n,CO_HD_REGIME_ATENDIMENTO AS CO_HD_REGIME_ATENDIMENTO\\n,CO_HD_CONDICAO_ATENDIMENTO AS CO_HD_CONDICAO_ATENDIMENTO\\n,CO_HD_LOCAL_ATENDIMENTO AS CO_HD_LOCAL_ATENDIMENTO\\n,CO_HD_FINALIDADE_ATENDIMENTO AS CO_HD_FINALIDADE_ATENDIMENTO\\n,CO_HD_TIPO_AUTORIZACAO AS CO_HD_TIPO_AUTORIZACAO\\n,CO_HD_TIPO_TRATAMENTO AS CO_HD_TIPO_TRATAMENTO\\n,CO_HD_OBJETIVO_TRATAMENTO AS CO_HD_OBJETIVO_TRATAMENTO\\n,CO_HD_ACOMODACAO AS CO_HD_ACOMODACAO\\n,CO_HD_MOTIVO_ALTA AS CO_HD_MOTIVO_ALTA\\nFROM PRODIM.TD_CARACTERISTICA_AUTORIZACAO\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDCARACAUTORIZ",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"colQR1AUTORIZACAO, prqtQRY2CARACTAUTORIZACAO lookup(HD_AUTORIZACAO == HD_AUTORIZ,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpQRY2CARACTAUTORIZ",
						"colQRY2CARACTAUTORIZ derive(REGIMEATENDIMENTO = iif(isNull(REGIMEATENDIMENTO), -2, REGIMEATENDIMENTO),",
						"          CONDICAOATENDIMENTO = iif(isNull(CONDICAOATENDIMENTO), -2, CONDICAOATENDIMENTO),",
						"          LOCALATENDIMENTO = iif(isNull(LOCALATENDIMENTO), -2, LOCALATENDIMENTO),",
						"          FINALIDADEATENDIMENTO = iif(isNull(FINALIDADEATENDIMENTO), -2, FINALIDADEATENDIMENTO),",
						"          TIPOAUTORIZACAO = iif(isNull(TIPOAUTORIZACAO), -2, TIPOAUTORIZACAO),",
						"          TIPOTRATAMENTO = iif(isNull(TIPOTRATAMENTO), -2, TIPOTRATAMENTO),",
						"          OBJETIVOTRATAMENTO = iif(isNull(OBJETIVOTRATAMENTO), -2, OBJETIVOTRATAMENTO),",
						"          ACOMODACAO = iif(isNull(ACOMODACAO), -2, ACOMODACAO),",
						"          MOTIVOALTA = iif(isNull(MOTIVOALTA), -2, MOTIVOALTA)) ~> derColQRY2CARACTAUTORIZ",
						"lkpQRY2CARACTAUTORIZ select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQRY2CARACTAUTORIZ",
						"derColQRY2CARACTAUTORIZ, derColTDCARACAUTORIZ lookup(REGIMEATENDIMENTO == CO_HD_REGIME_ATENDIMENTO",
						"     && CONDICAOATENDIMENTO == CO_HD_CONDICAO_ATENDIMENTO",
						"     && LOCALATENDIMENTO == CO_HD_LOCAL_ATENDIMENTO",
						"     && FINALIDADEATENDIMENTO == CO_HD_FINALIDADE_ATENDIMENTO",
						"     && TIPOAUTORIZACAO == CO_HD_TIPO_AUTORIZACAO",
						"     && TIPOTRATAMENTO == CO_HD_TIPO_TRATAMENTO",
						"     && OBJETIVOTRATAMENTO == CO_HD_OBJETIVO_TRATAMENTO",
						"     && ACOMODACAO == CO_HD_ACOMODACAO",
						"     && MOTIVOALTA == CO_HD_ACOMODACAO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDCARACTAUTORIZ",
						"poolTDCARACAUTORIZ derive(CO_HD_REGIME_ATENDIMENTO = toInteger(CO_HD_REGIME_ATENDIMENTO),",
						"          CO_HD_CONDICAO_ATENDIMENTO = toInteger(CO_HD_CONDICAO_ATENDIMENTO),",
						"          CO_HD_LOCAL_ATENDIMENTO = toInteger(CO_HD_LOCAL_ATENDIMENTO),",
						"          CO_HD_FINALIDADE_ATENDIMENTO = toInteger(CO_HD_FINALIDADE_ATENDIMENTO),",
						"          CO_HD_TIPO_AUTORIZACAO = toInteger(CO_HD_TIPO_AUTORIZACAO),",
						"          CO_HD_TIPO_TRATAMENTO = toInteger(CO_HD_TIPO_TRATAMENTO),",
						"          CO_HD_OBJETIVO_TRATAMENTO = toInteger(CO_HD_OBJETIVO_TRATAMENTO),",
						"          CO_HD_ACOMODACAO = toInteger(CO_HD_ACOMODACAO),",
						"          CO_HD_MOTIVO_ALTA = toInteger(CO_HD_MOTIVO_ALTA)) ~> derColTDCARACAUTORIZ",
						"lkpTDCARACTAUTORIZ sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_CARAC_AUTORIZACAO'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDCARACAUTORIZACAO"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_PROVISAO_MA')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/MENSAIS/PROVISAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolQRYMA2"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolQRYMA1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "unionQRYMA"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CTL_ORIGEM_DADOS as string,",
						"          DT_CARGA as timestamp,",
						"          DT_REF_CARGA as date,",
						"          HD_PEG as integer,",
						"          HD_GUIA as integer,",
						"          HD_GUIA_EVENTOS as integer,",
						"          HD_FATURA as integer,",
						"          HD_BENEF_EVENTO as integer,",
						"          HD_BENEF_TITULAR as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_TGE as integer,",
						"          CO_PRESTADOR as string,",
						"          CO_REGIME_PAGAMENTO as integer,",
						"          NU_PEG as double,",
						"          NU_GUIA as double,",
						"          NU_FATURA as integer,",
						"          NU_PROTOCOLO as integer,",
						"          ST_PROTOCOLO as string,",
						"          ST_GUIA_REV_PAGTO as string,",
						"          DATAATENDIMENTO as timestamp,",
						"          DATAAVISO as timestamp,",
						"          DATA_RECEB_CEPAG_PEDIDO as timestamp,",
						"          DATACONTABIL as date,",
						"          DATA_PREVISTA_PAGTO_ACERTO as timestamp,",
						"          VALOR_APRESENTADO as double,",
						"          VALOR_CALC_PAGTO as double,",
						"          VALOR_A_PAGAR as double,",
						"          VALOR_GLOSADO as double,",
						"          VALOR_PAS as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT DISTINCT \\n\\n   \\'MA2\\' CTL_ORIGEM_DADOS,\\n   SYSDATETIME() AS DT_CARGA,\\n   --TO_DATE(\\'#par_DATA_REF#\\',\\'YYYY-MM-DD\\') AS DT_REF_CARGA,\\n   CAST(\\'2022-07-22\\' AS DATE) AS DT_REF_CARGA,\\n   PEG.HANDLE AS HD_PEG,\\n   G.HANDLE AS HD_GUIA,\\n   RE.HANDLE AS HD_GUIA_EVENTOS,\\n   -1 AS HD_FATURA,\\n   BEN.HANDLE AS HD_BENEF_EVENTO,\\n   B1.HANDLE AS HD_BENEF_TITULAR,\\n   CON.HANDLE AS HD_CONTRATO,\\n   TGE.HANDLE AS HD_TGE,\\n   PRE.PRESTADOR AS CO_PRESTADOR,\\n   PEG.TABREGIMEPGTO AS CO_REGIME_PAGAMENTO, \\n   PEG.PEG AS NU_PEG,\\n   G.GUIA AS NU_GUIA,\\n   -1 AS NU_FATURA,\\n   RP.NUMEROPROTOCOLO AS NU_PROTOCOLO,\\n   RP.SITUACAO AS ST_PROTOCOLO,\\n   RG.SITUACAO AS ST_GUIA_REV_PAGTO,\\n\\n   RE.DATAATENDIMENTO,\\n   RP.DATAAVISO,\\n   RP.DATAPEDIDO AS DATA_RECEB_CEPAG_PEDIDO,\\n   --TO_DATE(\\'31/12/9999\\',\\'DD/MM/YYYY\\') AS DATACONTABIL, --Não se aplica\\n   CAST(\\'9999-12-31\\' AS DATE) AS DATACONTABIL,\\n   RP.DATAPAGAMENTOACERTO AS DATA_PREVISTA_PAGTO_ACERTO,\\n\\n   RE.VALORAPRESENTADO AS VALOR_APRESENTADO,\\n   RE.VALORCALCULADO AS VALOR_CALC_PAGTO,\\n   RE.VALORRECURSO AS VALOR_A_PAGAR,\\n   RE.VALORAPRESENTADO - (CASE WHEN RE.EHESTORNO =\\'S\\' THEN -RE.VALORRECURSO ELSE RE.VALORRECURSO END) AS VALOR_GLOSADO,\\n   0 AS VALOR_PAS\\n\\nFROM PROSTG.SAM_REVISAOPAGTO RP\\n   JOIN PROSTG.SAM_REVISAOPAGTO_GUIA RG ON RP.HANDLE = RG.REVISAOPAGTO\\n   JOIN PROSTG.SAM_REVISAOPAGTO_EVENTO RE ON RE.REVISAOPAGTOGUIA = RG.HANDLE\\n   LEFT JOIN PROSTG.SAM_TGE TGE ON TGE.HANDLE = RE.EVENTO\\n   LEFT JOIN PROSTG.SAM_CLASSEEVENTO CL ON CL.HANDLE = TGE.CLASSEEVENTO\\n   JOIN PROSTG.SAM_GUIA G ON RG.GUIA = G.HANDLE\\n   JOIN PROSTG.SAM_PEG PEG ON PEG.HANDLE = G.PEG\\n   LEFT JOIN PROSTG.SAM_PRESTADOR PRE ON PRE.HANDLE = PEG.RECEBEDOR\\n   JOIN PROSTG.SAM_BENEFICIARIO BEN  ON BEN.HANDLE = ISNULL(G.BENEFICIARIO,PEG.BENEFICIARIO)\\n   LEFT JOIN PROSTG.SAM_FAMILIA FAM ON FAM.HANDLE = BEN.FAMILIA\\n   LEFT JOIN PROSTG.SAM_BENEFICIARIO B1 ON B1.HANDLE = FAM.TITULARRESPONSAVEL\\n   JOIN PROSTG.SAM_CONTRATO CON ON CON.HANDLE = BEN.CONTRATO\\n   JOIN PROSTG.SAM_GRUPOCONTRATO GPL ON CON.GRUPOCONTRATO = GPL.HANDLE\\n\\nWHERE RP.SITUACAO IN (\\'P\\',\\'B\\')\\n   AND RP.DATAPEDIDO IS NOT NULL\\n   --AND RP.DATAPEDIDO <= LAST_DAY(TO_DATE(\\'#par_DATA_REF#\\',\\'YYYY-MM-DD\\'))\\n   AND RP.DATAPEDIDO <= EOMONTH(CAST(\\'2022-07-22\\' AS DATE))\\n   AND RE.EHESTORNO = \\'N\\'\\n   AND RE.VALORRECURSO > 0\\n   AND CON.HANDLE IS NOT NULL --Plano/Contrato não nulo\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolQRYMA2",
						"source(output(",
						"          CTL_ORIGEM_DADOS as string,",
						"          DT_CARGA as timestamp,",
						"          DT_REF_CARGA as date,",
						"          HD_PEG as integer,",
						"          HD_GUIA as integer,",
						"          HD_GUIA_EVENTOS as integer,",
						"          HD_FATURA as integer,",
						"          HD_BENEF_EVENTO as integer,",
						"          HD_BENEF_TITULAR as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_TGE as integer,",
						"          CO_PRESTADOR as string,",
						"          CO_REGIME_PAGAMENTO as integer,",
						"          NU_PEG as double,",
						"          NU_GUIA as double,",
						"          NU_FATURA as integer,",
						"          NU_PROTOCOLO as integer,",
						"          ST_PROTOCOLO as string,",
						"          ST_GUIA_REV_PAGTO as string,",
						"          DATAATENDIMENTO as timestamp,",
						"          DATAAVISO as timestamp,",
						"          DATA_RECEB_CEPAG_PEDIDO as timestamp,",
						"          DATACONTABIL as timestamp,",
						"          DATA_PREVISTA_PAGTO_ACERTO as timestamp,",
						"          VALOR_APRESENTADO as double,",
						"          VALOR_CALC_PAGTO as double,",
						"          VALOR_A_PAGAR as double,",
						"          VALOR_GLOSADO as double,",
						"          VALOR_PAS as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT DISTINCT \\n\\n   \\'MA1\\' AS CTL_ORIGEM_DADOS,\\n   SYSDATETIME() AS DT_CARGA,\\n   --TO_DATE(\\'#par_DATA_REF#\\',\\'YYYY-MM-DD\\') AS DT_REF_CARGA,\\n   CAST(\\'2022-07-22\\' AS DATE) AS DT_REF_CARGA,\\n   PEG.HANDLE AS HD_PEG,\\n   G.HANDLE AS HD_GUIA,\\n   ACE.HANDLE AS HD_GUIA_EVENTOS,\\n   FAT.HANDLE AS HD_FATURA,\\n   BEN.HANDLE AS HD_BENEF_EVENTO,\\n   B1.HANDLE AS HD_BENEF_TITULAR,\\n   CON.HANDLE AS HD_CONTRATO,\\n   TGE.HANDLE AS HD_TGE,\\n   PRE.PRESTADOR AS CO_PRESTADOR,\\n   PEG.TABREGIMEPGTO AS CO_REGIME_PAGAMENTO, \\n   PEG.PEG AS NU_PEG,\\n   G.GUIA AS NU_GUIA,\\n   FAT.NUMERO AS NU_FATURA,\\n   RP.NUMEROPROTOCOLO AS NU_PROTOCOLO,\\n   RP.SITUACAO AS ST_PROTOCOLO,\\n   RG.SITUACAO AS ST_GUIA_REV_PAGTO,\\n   \\n   GE.DATAATENDIMENTO AS DATAATENDIMENTO,\\n   RP.DATAAVISO AS DATAAVISO,\\n   RP.DATAPEDIDO AS DATA_RECEB_CEPAG_PEDIDO,\\n   FAT.DATACONTABIL AS DATACONTABIL,\\n   RP.DATAPAGAMENTOACERTO AS DATA_PREVISTA_PAGTO_ACERTO,\\n\\n   ACE.VALORPGTOACERTO AS VALOR_APRESENTADO,\\n   RE.VALORCALCULADO AS VALOR_CALC_PAGTO,\\n   --NVL(ACE.VALORPGTOACERTO - ACE.VALORPGTOORIGINAL, FAT.VALOR) AS VALOR_A_PAGAR,\\n   ISNULL(ACE.VALORPGTOACERTO - ACE.VALORPGTOORIGINAL, FAT.VALOR) AS VALOR_A_PAGAR,\\n   ACE.VALORAPRESENTADOACERTO - ACE.VALORPGTOACERTO AS VALOR_GLOSADO,\\n   ACE.VALORAUXILIOBENEFICIARIOACERTO - ACE.VALORAUXILIOBENEFORIGINAL AS VALOR_PAS\\n\\nFROM PROSTG.SFN_FATURA FAT\\n     LEFT JOIN PROSTG.SIS_TIPOFATURAMENTO TPF ON TPF.HANDLE = FAT.TIPOFATURAMENTO\\n     JOIN PROSTG.SFN_TIPOFATURA TF ON TF.HANDLE = FAT.TIPOFATURA AND TF.CODIGO IN (410, 411)\\n     JOIN PROSTG.SAM_ACERTO_FATURA ACF ON FAT.HANDLE = ACF.FATURAACERTO\\n     JOIN PROSTG.SAM_GUIA_EVENTOS_ACERTO ACE ON ACE.HANDLE = ACF.GUIAEVENTOACERTO\\n     JOIN PROSTG.SAM_ACERTOLOTE ACL ON ACL.HANDLE = ACE.ACERTOLOTE\\n     LEFT JOIN PROSTG.SAM_REVISAOPAGTO RP ON RP.HANDLE = ACL.REVISAOPAGTO\\n     LEFT JOIN PROSTG.SAM_TGE TGE ON TGE.HANDLE = ACE.EVENTOACERTO\\n     LEFT JOIN PROSTG.SAM_CLASSEEVENTO CL ON CL.HANDLE = TGE.CLASSEEVENTO\\n     LEFT JOIN PROSTG.SAM_GUIA_EVENTOS GE ON GE.HANDLE = ACE.GUIAEVENTO\\n     LEFT JOIN PROSTG.SAM_GUIA G  ON G.HANDLE = GE.GUIA\\n     LEFT JOIN PROSTG.SAM_REVISAOPAGTO_GUIA RG ON RP.HANDLE = RG.REVISAOPAGTO\\n     JOIN PROSTG.SAM_REVISAOPAGTO_EVENTO RE ON RG.HANDLE = RE.REVISAOPAGTOGUIA AND RE.GUIAEVENTO = GE.HANDLE\\n     LEFT JOIN PROSTG.SAM_PEG PEG  ON PEG.HANDLE = G.PEG\\n     LEFT JOIN PROSTG.SAM_PRESTADOR PRE ON PRE.HANDLE = PEG.RECEBEDOR\\n     LEFT JOIN PROSTG.SAM_BENEFICIARIO BEN  ON BEN.HANDLE = ISNULL(ACE.BENEFICIARIOACERTO, PEG.BENEFICIARIO)\\n     LEFT JOIN PROSTG.SAM_FAMILIA FAM ON FAM.HANDLE = BEN.FAMILIA\\n     LEFT JOIN PROSTG.SAM_BENEFICIARIO B1 ON B1.HANDLE = FAM.TITULARRESPONSAVEL\\n     LEFT JOIN PROSTG.SAM_CONTRATO CON ON CON.HANDLE = BEN.CONTRATO\\n     LEFT JOIN PROSTG.SAM_GRUPOCONTRATO GPL ON CON.GRUPOCONTRATO = GPL.HANDLE\\n\\n--WHERE FAT.DATACONTABIL BETWEEN ADD_MONTHS(TO_DATE(TO_CHAR(TO_DATE(\\'#par_DATA_REF#\\',\\'YYYY-MM-DD\\'), \\'YYYY-MM\\')||\\'-01\\',\\'YYYY-MM-DD\\'), 1) AND ADD_MONTHS(LAST_DAY(TO_DATE(\\'#par_DATA_REF#\\',\\'YYYY-MM-DD\\')), 1)\\nWHERE FAT.DATACONTABIL BETWEEN FORMAT(DATEADD(MONTH, 1, CONCAT(FORMAT(CAST(\\'2022-07-22\\' AS DATE),\\'yyyy-MM\\'),\\'-01\\')),\\'yyyy-MM-dd\\') AND FORMAT(EOMONTH(DATEADD(MONTH, 1, CAST(\\'2022-07-22\\' AS DATE))),\\'yyyy-MM-dd\\')\\n\\n   AND RP.DATAPEDIDO IS NOT NULL\\n   --AND RP.DATAPEDIDO <= LAST_DAY(TO_DATE(\\'#par_DATA_REF#\\',\\'YYYY-MM-DD\\'))\\n   AND RP.DATAPEDIDO <= EOMONTH(CAST(\\'2022-07-22\\' AS DATE))\\n   AND CON.HANDLE IS NOT NULL --Plano/Contrato não nulo\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolQRYMA1",
						"poolQRYMA2, poolQRYMA1 union(byName: true)~> unionQRYMA",
						"unionQRYMA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'provisao',",
						"     partitionFileNames:['QRY_MA2.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]",
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_QRY1_AUTORIZACAO')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolAUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolLOGSTATUS"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolSTATUSSOLICITACAO"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "parquetQR1AUTORIZACAO"
						}
					],
					"transformations": [
						{
							"name": "joinAutLogStatus"
						},
						{
							"name": "joinAutLogStatusSolicit"
						},
						{
							"name": "colAutLogStatusSolicit"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          HD_AUTORIZ_LOGSTATUS as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT DISTINCT\\n     AUT.HANDLE AS HD_AUTORIZACAO\\n    ,AES.HANDLE AS HD_AUTORIZ_EVENTO_SOLICIT\\n    ,AEG.HANDLE AS HD_AUTORIZ_EVENTO_GERADO\\n    ,TGE.HANDLE AS HD_TGE \\n    ,BEN.HANDLE AS HD_BENEF\\n    ,ENDB.ESTADO AS HD_ESTADO_BENEF\\n    ,PRE2.ESTADOPAGAMENTO AS HD_ESTADO_PREST_EXEC\\n    ,PRE1.HANDLE AS HD_PREST_SOLICITANTE\\n    ,PRE1.PRESTADOR AS CO_PREST_SOLICITANTE\\n    ,PRE2.HANDLE AS HD_PREST_EXECUTOR\\n    ,PRE2.PRESTADOR AS CO_PREST_EXECUTOR\\n    ,PFO.HANDLE AS HD_PREST_FORNECEDOR  \\n    ,PFO.PRESTADOR AS CO_PREST_FORNECEDOR  \\n    ,TAU.HANDLE AS HD_TP_AUTORIZ\\n    ,GR.HANDLE AS HD_GRAU\\n    ,GR.GRAU AS CO_GRAU\\n    ,TPT.CODIGO AS CO_TP_TRATAMENTO\\n    ,OBJ.CODIGO AS CO_OBJ_TRATAMENTO\\n    ,TPA.HANDLE as HD_REGIME_ATEND \\n    ,FNL.HANDLE AS HD_FINALID_ATEND\\n    ,CRT.HANDLE AS HD_CARAT_ATEND\\n    ,RGM.HANDLE AS HD_REGIME_INT\\n    ,TPA.HANDLE AS HD_TP_ATEND\\n    ,TPI.HANDLE AS HD_TP_INTERN\\n    ,IND.HANDLE AS HD_IND_ACIDENTE\\n    ,TPC.HANDLE AS HD_TP_CONSULTA\\n    ,PLA.HANDLE AS HD_PLANO\\n    ,CON.HANDLE AS HD_CONTRATO\\n    ,GPU.HANDLE AS HD_USUARIO\\n    ,TPR.HANDLE AS HD_TIS_TAB_PRECO\\n    ,TPR.CODIGO AS CO_TIS_TAB_PRECO\\n    ,CBO.HANDLE AS HD_CBOS\\n    ,CBO.CODIGO AS CO_CBOS\\n /* ,TSS.CODIGO AS CO_ST_SOLICIT */\\n    ,AUT.SITUACAO AS CO_SITUACAO_AUT\\n    ,AES.SITUACAO AS CO_SITUACAO_AES\\n    ,AEG.SITUACAO AS CO_SITUACAO_AEG\\n    ,AES.OPCAOOPME AS ST_OPCAO_OPME  \\n    ,AUT.AUTORIZACAO AS NU_AUTORIZACAO\\n    ,AUT.DATAAUTORIZACAO AS DT_AUTORIZACAO_AUT\\n    ,AUT.DATASOLICITACAO AS DT_SOLICITACAO_AUT\\n    ,AEG.DATAAUTORIZACAO AS DT_AUTORIZACAO_AEG\\n    ,AEG.DATAATENDIMENTO AS DT_ATENDIMENTO_AEG\\n    ,AES.QTDSOLICITADAORIGINAL  AS QTDSOLICITADAORIGINAL\\n    ,AEG.QTDAUTORIZADA AS QTDAUTORIZADA\\n    ,(AES.QTDSOLICITADAORIGINAL - AEG.QTDAUTORIZADA) AS QT_NEGADA   \\n    ,AES.VALORUNITARIOSOLICITADO AS VALORUNITARIOSOLICITADO\\n    ,AES.VALORUNITARIONEGOCIADOOPME AS VALORUNITARIONEGOCIADOOPME\\n    ,AES.VALORUNITARIOCALCULADOOPME AS VALORUNITARIOCALCULADOOPME\\n    ,AES.VALORUNITARIOAUTORIZADOOPME AS VALORUNITARIOAUTORIZADOOPME\\n    ,AES.DATASOLICITACAO AS DT_SOLICITACAO_AES \\n    ,NAU.NIVELAUTORIZACAO AS NU_NIVEL_AUTORIZACAO \\n    ,AUT.ORIGEMAUTORIZACAO AS CO_ORIGEM_AUTORIZACAO \\n    ,AUT.SOLICITANTENOME AS NO_PROF_SOLICITANTE \\n    ,AUT.SOLICITANTECRNUM AS NU_CRM_PROF_SOLICITANTE_AUT \\n    ,AUT.CONSELHOPROFSOLICITANTETISS AS PK_TD_CONSELHO_Prof_Solic \\n    ,AUT.UFCONSELHOPROFSOLICITANTE AS PK_TD_CONSELHO_Uf_Prof_Solic \\n    ,PES.HANDLE AS HD_PREST_SOLICITANTE_AES \\n    ,PES.PRESTADOR AS CO_PREST_SOLICITANTE_AES \\n    ,AUT.RADIOSOLICITACAO AS DS_ORIGEM_SOLICITACAO\\n    ,AUT.INDICACAOCLINICA AS DS_INDICACAO_CLINICA\\n    ,AUT.DATAVALIDADE AS DT_VALIDADE_AUT\\n    ,PEX.HANDLE AS HD_PREST_EXECUTOR_AES \\n    ,PEX.PRESTADOR AS CO_PREST_EXECUTOR_AES \\n    ,AEG.DATAHORAGERACAO AS TS_GERACAO_AEG\\n    ,AEG.DATAHORALIBERACAO AS TS_LIBERACAO_AEG\\n    ,AEG.USUARIOGERACAO AS HD_USUARIO_GERACAO_AEG\\n    ,TGE.COMPORTAHE AS ST_HORARIO_ESPECIAL\\n    ,ALG.HANDLE AS HD_AUTORIZ_LOGSTATUS\\nFROM PROSTG.SAM_AUTORIZ AUT\\nLEFT JOIN PROSTG.SAM_AUTORIZ_EVENTOSOLICIT AES ON AES.AUTORIZACAO = AUT.HANDLE\\nLEFT JOIN PROSTG.SAM_AUTORIZ_EVENTOGERADO AEG ON AEG.EVENTOSOLICITADO = AES.HANDLE\\nJOIN PROSTG.SAM_TIPOAUTORIZ TAU ON TAU.HANDLE = AUT.TIPOAUTORIZACAO\\nLEFT JOIN PROSTG.SAM_REGIMEATENDIMENTO RA ON RA.HANDLE = AUT.REGIMEATENDIMENTO\\nLEFT JOIN PROSTG.SAM_LOCALATENDIMENTO LA ON LA.HANDLE = AUT.LOCALATENDIMENTO\\nLEFT JOIN PROSTG.SAM_TGE TGE ON TGE.HANDLE = ISNULL(AEG.EVENTOGERADO, AES.EVENTO)\\nLEFT JOIN PROSTG.SAM_TGE_NIVELAUTORIZACAO NAU ON NAU.EVENTO = TGE.HANDLE \\nLEFT JOIN PROSTG.TIS_TABELAPRECO TPR ON TPR.HANDLE = TGE.TABELADOMINIOTISS\\nLEFT JOIN PROSTG.SAM_GRAU GR ON GR.HANDLE = AEG.GRAUGERADO\\nLEFT JOIN PROSTG.SAM_TIPOTRATAMENTO TPT ON TPT.HANDLE = TGE.TIPOTRATAMENTO\\nLEFT JOIN PROSTG.SAM_OBJTRATAMENTO OBJ ON OBJ.HANDLE = TGE.OBJETIVOTRATAMENTO\\nJOIN PROSTG.SAM_BENEFICIARIO BEN ON BEN.HANDLE = AUT.BENEFICIARIO \\nLEFT JOIN PROSTG.SAM_PRESTADOR PRE1 ON PRE1.HANDLE = AUT.SOLICITANTE\\nLEFT JOIN PROSTG.SAM_PRESTADOR PRE2 ON PRE2.HANDLE = AUT.LOCALEXECUCAO\\nLEFT JOIN PROSTG.SAM_PRESTADOR PFO  ON PFO.HANDLE  = AES.FORNECEDOR\\nLEFT JOIN PROSTG.SAM_PRESTADOR PES  ON PES.HANDLE  = AES.SOLICITANTE\\nLEFT JOIN PROSTG.SAM_PRESTADOR PEX  ON PEX.HANDLE  = AES.EXECUTOR\\nLEFT JOIN PROSTG.TIS_CBOS CBO ON CBO.HANDLE = AUT.CBOSPROFSOLICITANTETISS\\nLEFT JOIN PROSTG.Z_GRUPOUSUARIOS GPU ON GPU.HANDLE = AUT.USUARIO\\nLEFT JOIN PROSTG.SAM_ENDERECO ENDB ON ENDB.HANDLE = BEN.ENDERECORESIDENCIAL\\nLEFT JOIN PROSTG.SAM_FINALIDADEATENDIMENTO FNL ON FNL.HANDLE = AUT.FINALIDADEATENDIMENTO\\nLEFT JOIN PROSTG.TIS_CARATERATENDIMENTO CRT ON CRT.HANDLE = AUT.CARATERATENDIMENTO\\nLEFT JOIN PROSTG.TIS_REGIMEINTERNACAO RGM ON RGM.HANDLE = AUT.REGIMEINTERNACAO\\nLEFT JOIN PROSTG.TIS_TIPOATENDIMENTO TPA ON TPA.HANDLE = AUT.TIPOATENDIMENTO\\nLEFT JOIN PROSTG.TIS_TIPOINTERNACAO TPI ON TPI.HANDLE = AUT.TIPOINTERNACAOTISS\\nLEFT JOIN PROSTG.TIS_INDICADORDEACIDENTE IND ON IND.HANDLE = AUT.INDICADORDEACIDENTE\\nLEFT JOIN PROSTG.TIS_TIPOCONSULTA TPC ON TPC.HANDLE = AUT.TIPOCONSULTA\\nLEFT JOIN PROSTG.SAM_CONTRATO CON ON CON.HANDLE = BEN.CONTRATO\\nJOIN PROSTG.SAM_PLANO PLA ON PLA.HANDLE = CON.PLANO\\nLEFT JOIN PROSTG.SAM_AUTORIZ_LOGSTATUS ALG ON ALG.AUTORIZACAO = AUT.HANDLE \\n/*         JOIN TABTMP ON SSMAX = ALG.HANDLE\\nLEFT JOIN PROSTG.TIS_STATUSSOLICITACAO TSS ON TSS.HANDLE = ALG.STATUS*/\\nWHERE AUT.LOCALATENDIMENTO = 1 \\nAND AES.SITUACAO <> \\'C\\' \\nAND AUT.SITUACAO NOT IN (\\'C\\',\\'F\\') \\nAND SUBSTRING(CAST(ISNULL(ISNULL(AEG.DATAAUTORIZACAO, AES.DATASOLICITACAO ), AUT.DATAAUTORIZACAO) AS VARCHAR),1,10) = \\'2022-01-01\\'\\nAND NAU.DATAFINAL IS NULL ',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolAUTORIZACAO",
						"source(output(",
						"          HD_AUTORIZ as long,",
						"          SSMAX as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT AU.HANDLE AS HD_AUTORIZ,\\nMAX(LG.HANDLE) AS SSMAX\\nFROM PROSTG.SAM_AUTORIZ_LOGSTATUS LG \\nJOIN PROSTG.SAM_AUTORIZ AU ON LG.AUTORIZACAO = AU.HANDLE\\nGROUP BY AU.HANDLE',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolLOGSTATUS",
						"source(output(",
						"          HD_SSMAX as integer,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT LG.HANDLE AS HD_SSMAX\\n,TSS.CODIGO AS CO_ST_SOLICIT\\nFROM PROSTG.SAM_AUTORIZ_LOGSTATUS LG \\nLEFT JOIN PROSTG.TIS_STATUSSOLICITACAO TSS ON TSS.HANDLE = LG.STATUS',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolSTATUSSOLICITACAO",
						"poolAUTORIZACAO, poolLOGSTATUS join(HD_AUTORIZ_LOGSTATUS == SSMAX,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinAutLogStatus",
						"joinAutLogStatus, poolSTATUSSOLICITACAO join(SSMAX == HD_SSMAX,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinAutLogStatusSolicit",
						"joinAutLogStatusSolicit select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAutLogStatusSolicit",
						"colAutLogStatusSolicit sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['QR1_AUTORIZACAO'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> parquetQR1AUTORIZACAO"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]",
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_CARACTERISTICA_ATENDMENTO')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDCARACTERISTICAATENDIMENTO"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTCARACATEND"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "lkpTDCARACTERISTICAATENDIMENTO"
						},
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "colAUTCARACATEND"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_CARACTERISTICA_ATENDIM as decimal(10,0),",
						"          CO_PROGRAMA_CASSI as decimal(10,0),",
						"          CO_CARATER_ATENDIMENTO as decimal(10,0),",
						"          CO_REGIME_INTERNACAO as decimal(10,0),",
						"          CO_TIPO_ATENDIMENTO as decimal(10,0),",
						"          CO_TIPO_INTERNACAO as decimal(10,0),",
						"          CO_INDICADOR_ACIDENTE as decimal(10,0),",
						"          CO_TIPO_CONSULTA as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT SK_TD_CARACTERISTICA_ATENDIM AS SK_TD_CARACTERISTICA_ATENDIM\\n      ,CO_PROGRAMA_CASSI AS CO_PROGRAMA_CASSI\\n      ,CO_CARATER_ATENDIMENTO AS CO_CARATER_ATENDIMENTO\\n      ,CO_REGIME_INTERNACAO AS CO_REGIME_INTERNACAO\\n      ,CO_TIPO_ATENDIMENTO AS CO_TIPO_ATENDIMENTO\\n      ,CO_TIPO_INTERNACAO AS CO_TIPO_INTERNACAO\\n      ,CO_INDICADOR_ACIDENTE AS CO_INDICADOR_ACIDENTE\\n      ,CO_TIPO_CONSULTA AS CO_TIPO_CONSULTA\\n  FROM PRODIM.TD_CARACTERISTICA_ATENDIMENTO',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDCARACTERISTICAATENDIMENTO",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"derColQR1AUTORIZACAO, poolTDCARACTERISTICAATENDIMENTO lookup(HD_FINALID_ATEND == CO_PROGRAMA_CASSI",
						"     && HD_CARAT_ATEND == CO_CARATER_ATENDIMENTO",
						"     && HD_REGIME_INT == CO_REGIME_INTERNACAO",
						"     && HD_TP_ATEND == CO_TIPO_ATENDIMENTO",
						"     && HD_TP_INTERN == CO_TIPO_INTERNACAO",
						"     && HD_IND_ACIDENTE == CO_INDICADOR_ACIDENTE",
						"     && HD_TP_CONSULTA == CO_TIPO_CONSULTA,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDCARACTERISTICAATENDIMENTO",
						"colQR1AUTORIZACAO derive(HD_FINALID_ATEND = iif(isNull(HD_FINALID_ATEND), -2, HD_FINALID_ATEND),",
						"          HD_CARAT_ATEND = iif(isNull(HD_CARAT_ATEND), -2, HD_CARAT_ATEND),",
						"          HD_REGIME_INT = iif(isNull(HD_REGIME_INT), -2, HD_REGIME_INT),",
						"          HD_TP_ATEND = iif(isNull(HD_TP_ATEND), -2, HD_TP_ATEND),",
						"          HD_TP_INTERN = iif(isNull(HD_TP_INTERN), -2, HD_TP_INTERN),",
						"          HD_IND_ACIDENTE = iif(isNull(HD_IND_ACIDENTE), -2, HD_IND_ACIDENTE),",
						"          HD_TP_CONSULTA = iif(isNull(HD_TP_CONSULTA), -2, HD_TP_CONSULTA)) ~> derColQR1AUTORIZACAO",
						"lkpTDCARACTERISTICAATENDIMENTO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_CARACTERISTICA_ATENDIM",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTCARACATEND",
						"colAUTCARACATEND sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_CARAC_ATEND'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTCARACATEND"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_CBOS')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDCBOS"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDCBOS"
						}
					],
					"transformations": [
						{
							"name": "colAUTCBOS"
						},
						{
							"name": "lkpTDCBOS"
						},
						{
							"name": "derColAUTCBOS"
						},
						{
							"name": "derColTDCBOS"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_CBOS as decimal(10,0),",
						"          CO_CBOS as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_CBOS AS SK_TD_CBOS, \\n     CO_CBOS AS CO_CBOS \\nFROM PRODIM.TD_CBOS\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDCBOS",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_CBOS,",
						"          CO_CBOS",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTCBOS",
						"derColAUTCBOS, derColTDCBOS lookup(derColAUTCBOS@CO_CBOS == derColTDCBOS@CO_CBOS,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDCBOS",
						"colAUTCBOS derive(CO_CBOS = iif(isNull(CO_CBOS), '-2', trim(CO_CBOS))) ~> derColAUTCBOS",
						"poolTDCBOS derive(CO_CBOS = trim(CO_CBOS)) ~> derColTDCBOS",
						"lkpTDCBOS select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_CBOS",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_CBOS'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDCBOS"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_CONSELHO_MEDICINA')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDCONMED"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDCONMED"
						}
					],
					"transformations": [
						{
							"name": "colAUTCONMED"
						},
						{
							"name": "derColAUTCONMED"
						},
						{
							"name": "lkpTDCONMED"
						},
						{
							"name": "colAUTTDCONMED"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_CONSELHO_MEDICINA as decimal(10,0),",
						"          CO_CONSELHO as decimal(10,0),",
						"          CO_ESTADO as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_CONSELHO_MEDICINA AS SK_TD_CONSELHO_MEDICINA, \\n     CO_CONSELHO AS CO_CONSELHO,\\n     CO_ESTADO AS CO_ESTADO\\nFROM PRODIM.TD_CONSELHO_MEDICINA\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDCONMED",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTCONMED",
						"colAUTCONMED derive(PK_TD_CONSELHO_Prof_Solic = iif(isNull(PK_TD_CONSELHO_Prof_Solic), -2, toInteger(PK_TD_CONSELHO_Prof_Solic)),",
						"          PK_TD_CONSELHO_Uf_Prof_Solic = iif(isNull(PK_TD_CONSELHO_Uf_Prof_Solic), -2, toInteger(PK_TD_CONSELHO_Uf_Prof_Solic))) ~> derColAUTCONMED",
						"derColAUTCONMED, poolTDCONMED lookup(PK_TD_CONSELHO_Prof_Solic == CO_CONSELHO",
						"     && PK_TD_CONSELHO_Uf_Prof_Solic == CO_ESTADO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDCONMED",
						"lkpTDCONMED select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_CONSELHO_MEDICINA",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTTDCONMED",
						"colAUTTDCONMED sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_CONSELHO_MEDICINA'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDCONMED"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_EVENTO')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDEVENTO"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDEVENTO"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "lkpTDEVENTO"
						},
						{
							"name": "colAUTTDEVENTO"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_EVENTO as decimal(10,0),",
						"          CO_EVENTO as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_EVENTO AS SK_TD_EVENTO, \\n     CO_EVENTO AS CO_EVENTO \\nFROM PRODIM.TD_EVENTO\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDEVENTO",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"colQR1AUTORIZACAO derive(HD_TGE = iif(isNull(HD_TGE), -2, HD_TGE)) ~> derColQR1AUTORIZACAO",
						"derColQR1AUTORIZACAO, poolTDEVENTO lookup(HD_TGE == CO_EVENTO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDEVENTO",
						"lkpTDEVENTO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_EVENTO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTTDEVENTO",
						"colAUTTDEVENTO sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_EVENTO'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDEVENTO"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_GRAU')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDGRAU"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDGRAU"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "lkpTDGRAU"
						},
						{
							"name": "ColAUTTDGRAU"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_GRAU as decimal(10,0),",
						"          CO_GRAU as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_GRAU AS SK_TD_GRAU, \\n     CO_GRAU AS CO_GRAU \\nFROM PRODIM.TD_GRAU\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDGRAU",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          CO_GRAU",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"colQR1AUTORIZACAO derive(CO_GRAU = iif(isNull(CO_GRAU), -2, CO_GRAU)) ~> derColQR1AUTORIZACAO",
						"derColQR1AUTORIZACAO, poolTDGRAU lookup(derColQR1AUTORIZACAO@CO_GRAU == poolTDGRAU@CO_GRAU,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDGRAU",
						"lkpTDGRAU select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_GRAU",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ColAUTTDGRAU",
						"ColAUTTDGRAU sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_GRAU'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDGRAU"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_PARTICIPANTE')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDPARTICIPANTE"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTFCADASTRADOSESF"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDPARTICIPANTE"
						}
					],
					"transformations": [
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "lkpTDPARTICIPACAO"
						},
						{
							"name": "dercolDTNASC"
						},
						{
							"name": "derColIDADE"
						},
						{
							"name": "colAUTTDPARTICIPANTE"
						},
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "lkpTFCADASTRADOSESF"
						},
						{
							"name": "derColTFCADASTRADOSESF"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_PARTICIPANTE as decimal(10,0),",
						"          CO_HD_BENEFICIARIO as decimal(10,0),",
						"          DT_NASCIMENTO_BENEFICIARIO as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_PARTICIPANTE AS SK_TD_PARTICIPANTE, \\n     CO_HD_BENEFICIARIO AS CO_HD_BENEFICIARIO,\\n--     CO_TIPO_DEPENDENCIA AS CO_TIPO_DEPENDENCIA,\\n--     NU_MATRICULA_CASSI AS NU_MATRICULA_CASSI,\\n--     NU_CPF_BENEFICIARIO AS NU_CPF_BENEFICIARIO, \\n     DT_NASCIMENTO_BENEFICIARIO AS DT_NASCIMENTO_BENEFICIARIO\\nFROM PRODIM.TD_PARTICIPANTE\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDPARTICIPANTE",
						"source(output(",
						"          CO_HD_BENEFICIARIO as decimal(10,0),",
						"          SK_TD_ESTRUTURA_ORG_SOC as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT DISTINCT \\n   P.CO_HD_BENEFICIARIO AS CO_HD_BENEFICIARIO, \\n   TF.SK_TD_ESTRUTURA_ORG_SOC AS SK_TD_ESTRUTURA_ORG_SOC\\n\\nFROM PRODIM.TF_CADASTRADOS_ESF TF\\nINNER JOIN PRODIM.TD_TEMPO TD ON TD.SK_TD_TEMPO = TF.SK_TD_TEMPO_DIA\\nINNER JOIN PRODIM.TD_PARTICIPANTE P ON P.SK_TD_PARTICIPANTE = TF.SK_TD_PARTICIPANTE \\n\\nWHERE TF.ANO_MES_PROCESSAMENTO = \\'202201\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTFCADASTRADOSESF",
						"colQR1AUTORIZACAO derive(HD_BENEF = iif(isNull(HD_BENEF), -2, HD_BENEF),",
						"          DT_AUTORIZACAO_AUT = toDate(DT_AUTORIZACAO_AUT)) ~> derColQR1AUTORIZACAO",
						"lkpTFCADASTRADOSESF, poolTDPARTICIPANTE lookup(HD_BENEF == poolTDPARTICIPANTE@CO_HD_BENEFICIARIO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDPARTICIPACAO",
						"lkpTDPARTICIPACAO derive(DT_NASCIMENTO_BENEFICIARIO = iif(isNull(DT_NASCIMENTO_BENEFICIARIO), toDate('9999-12-31'), toDate(DT_NASCIMENTO_BENEFICIARIO))) ~> dercolDTNASC",
						"dercolDTNASC derive(NU_IDADE = floor(toDecimal((DT_AUTORIZACAO_AUT-DT_NASCIMENTO_BENEFICIARIO)/365.25))) ~> derColIDADE",
						"derColIDADE select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_PARTICIPANTE,",
						"          SK_TD_ESTRUTURA_ORG_SOC,",
						"          NU_IDADE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTTDPARTICIPANTE",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_BENEF,",
						"          DT_AUTORIZACAO_AUT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"derColQR1AUTORIZACAO, derColTFCADASTRADOSESF lookup(HD_BENEF == CO_HD_BENEFICIARIO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTFCADASTRADOSESF",
						"poolTFCADASTRADOSESF derive(CO_HD_BENEFICIARIO = toInteger(CO_HD_BENEFICIARIO)) ~> derColTFCADASTRADOSESF",
						"colAUTTDPARTICIPANTE sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_PARTICIPANTE'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDPARTICIPANTE"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_PLANO_SAUDE')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDPLANOSAUDE"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDPLANOSAUDE"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "lkpTDPLANOSAUDE"
						},
						{
							"name": "colAUTTDPLANOSAUDE"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_PLANO_SAUDE as decimal(10,0),",
						"          CO_CONTRATO as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT SK_TD_PLANO_SAUDE AS SK_TD_PLANO_SAUDE, \\nPS.CO_CONTRATO AS CO_CONTRATO\\nFROM PRODIM.TD_PLANO_SAUDE PS\\nWHERE PS.ST_REGISTRO_CORRENTE = \\'S\\'\\nAND ((PS.CO_CARENCIA = -1 AND PS.CO_MODULO_COBERTURA = -1 AND PS.CO_PLANO_SAUDE <> -1 AND PS.CO_CONTRATO <> -1) Or (PS.CO_PLANO_SAUDE = -2 AND PS.CO_CONTRATO = -2 AND PS.CO_CARENCIA = -2 AND PS.CO_MODULO_COBERTURA = -2 AND PS.CO_TIPO_FATURAMENT_PLANO_SAUDE = -2))',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDPLANOSAUDE",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_CONTRATO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"colQR1AUTORIZACAO derive(HD_CONTRATO = iif(isNull(HD_CONTRATO), -2, HD_CONTRATO)) ~> derColQR1AUTORIZACAO",
						"derColQR1AUTORIZACAO, poolTDPLANOSAUDE lookup(HD_CONTRATO == CO_CONTRATO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDPLANOSAUDE",
						"lkpTDPLANOSAUDE select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_PLANO_SAUDE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTTDPLANOSAUDE",
						"colAUTTDPLANOSAUDE sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_PLANO_SAUDE'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDPLANOSAUDE"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_PREST_EXECUTANTE')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDPRESTEXECUTANTE"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDPRESTEXECUTANTE"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "lkpTDPRESTEXECUTANTE"
						},
						{
							"name": "colAUTTDPRESTEXECUTANTE"
						},
						{
							"name": "derColTDPRESTEXECUTANTE"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_PRESTADOR_EXECUTANTE as decimal(10,0),",
						"          CO_PRESTADOR as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n    SK_TD_PRESTADOR AS SK_TD_PRESTADOR_EXECUTANTE, \\n    CO_PRESTADOR AS CO_PRESTADOR\\nFROM PRODIM.TD_PRESTADOR\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDPRESTEXECUTANTE",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          CO_PREST_EXECUTOR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"colQR1AUTORIZACAO derive(CO_PREST_EXECUTOR = iif(isNull(CO_PREST_EXECUTOR), '-2', trim(CO_PREST_EXECUTOR))) ~> derColQR1AUTORIZACAO",
						"derColQR1AUTORIZACAO, derColTDPRESTEXECUTANTE lookup(CO_PREST_EXECUTOR == CO_PRESTADOR,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDPRESTEXECUTANTE",
						"lkpTDPRESTEXECUTANTE select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_PRESTADOR_EXECUTANTE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTTDPRESTEXECUTANTE",
						"poolTDPRESTEXECUTANTE derive(CO_PRESTADOR = trim(CO_PRESTADOR)) ~> derColTDPRESTEXECUTANTE",
						"colAUTTDPRESTEXECUTANTE sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_PREST_EXECUTANTE'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDPRESTEXECUTANTE"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_PREST_EXECUTOR_AES')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDPRESTEXECUTORAES"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDPRESTEXECUTORAES"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "derColTDPRESTEXECUTORAES"
						},
						{
							"name": "lkpTDPRESTEXECUTORAES"
						},
						{
							"name": "colAUTTDPRESTEXECUTORAES"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_PRESTADOR_EXEC_AES as decimal(10,0),",
						"          CO_PRESTADOR as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n    SK_TD_PRESTADOR AS SK_TD_PRESTADOR_EXEC_AES, \\n    CO_PRESTADOR AS CO_PRESTADOR\\nFROM PRODIM.TD_PRESTADOR\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDPRESTEXECUTORAES",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          CO_PREST_EXECUTOR_AES",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"colQR1AUTORIZACAO derive(CO_PREST_EXECUTOR_AES = iif(isNull(CO_PREST_EXECUTOR_AES), '-2', trim(CO_PREST_EXECUTOR_AES))) ~> derColQR1AUTORIZACAO",
						"poolTDPRESTEXECUTORAES derive(CO_PRESTADOR = trim(CO_PRESTADOR)) ~> derColTDPRESTEXECUTORAES",
						"derColQR1AUTORIZACAO, derColTDPRESTEXECUTORAES lookup(CO_PREST_EXECUTOR_AES == CO_PRESTADOR,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDPRESTEXECUTORAES",
						"lkpTDPRESTEXECUTORAES select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_PRESTADOR_EXEC_AES",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTTDPRESTEXECUTORAES",
						"colAUTTDPRESTEXECUTORAES sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_PREST_EXECUTOR_AES'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDPRESTEXECUTORAES"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_PREST_FORNECEDOR')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDPRESTFORNECEDOR"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDPRESTFORNECEDOR"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "derColTDPRESTFORNECEDOR"
						},
						{
							"name": "lkpTDPRESTFORNECEDOR"
						},
						{
							"name": "colAUTTDPRESTFORNECEDOR"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_PRESTADOR_FORNECEDOR as decimal(10,0),",
						"          CO_PRESTADOR as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n    SK_TD_PRESTADOR AS SK_TD_PRESTADOR_FORNECEDOR, \\n    CO_PRESTADOR AS CO_PRESTADOR\\nFROM PRODIM.TD_PRESTADOR\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDPRESTFORNECEDOR",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          CO_PREST_FORNECEDOR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"colQR1AUTORIZACAO derive(CO_PREST_FORNECEDOR = iif(isNull(CO_PREST_FORNECEDOR), '-2', trim(CO_PREST_FORNECEDOR))) ~> derColQR1AUTORIZACAO",
						"poolTDPRESTFORNECEDOR derive(CO_PRESTADOR = trim(CO_PRESTADOR)) ~> derColTDPRESTFORNECEDOR",
						"derColQR1AUTORIZACAO, derColTDPRESTFORNECEDOR lookup(CO_PREST_FORNECEDOR == CO_PRESTADOR,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDPRESTFORNECEDOR",
						"lkpTDPRESTFORNECEDOR select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_PRESTADOR_FORNECEDOR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTTDPRESTFORNECEDOR",
						"colAUTTDPRESTFORNECEDOR sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_PREST_FORNECEDOR'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDPRESTFORNECEDOR"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_PREST_RECEBEDOR')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDPRESTRECEBEDOR"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDPRESTRECEBEDOR"
						}
					],
					"transformations": [
						{
							"name": "ColQR1AUTORIZACAO"
						},
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "derColTDPRESTRECEBEDOR"
						},
						{
							"name": "lkpTDPRESTRECEBEDOR"
						},
						{
							"name": "colAUTTDPRESTRECEBEDOR"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_PRESTADOR_RECEBEDOR as decimal(10,0),",
						"          CO_PRESTADOR as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n    SK_TD_PRESTADOR AS SK_TD_PRESTADOR_RECEBEDOR, \\n    CO_PRESTADOR AS CO_PRESTADOR\\nFROM PRODIM.TD_PRESTADOR\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDPRESTRECEBEDOR",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          CO_PREST_SOLICITANTE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ColQR1AUTORIZACAO",
						"ColQR1AUTORIZACAO derive(CO_PREST_SOLICITANTE = iif(isNull(CO_PREST_SOLICITANTE), '-2', trim(CO_PREST_SOLICITANTE))) ~> derColQR1AUTORIZACAO",
						"poolTDPRESTRECEBEDOR derive(CO_PRESTADOR = trim(CO_PRESTADOR)) ~> derColTDPRESTRECEBEDOR",
						"derColQR1AUTORIZACAO, derColTDPRESTRECEBEDOR lookup(CO_PREST_SOLICITANTE == CO_PRESTADOR,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDPRESTRECEBEDOR",
						"lkpTDPRESTRECEBEDOR select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_PRESTADOR_RECEBEDOR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTTDPRESTRECEBEDOR",
						"colAUTTDPRESTRECEBEDOR sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_PREST_RECEBEDOR'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDPRESTRECEBEDOR"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_PREST_SOLICITANTE_AES')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDPRESTSOLICITANTEAES"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDPRESTSOLICITANTEAES"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "derColTDPRESTSOLICITANTEAES"
						},
						{
							"name": "lkpTDPRESTSOLICITANTEAES"
						},
						{
							"name": "colAUTTDPRESTSOLICITANTEAES"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_PRESTADOR_AES as decimal(10,0),",
						"          CO_PRESTADOR as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n    SK_TD_PRESTADOR AS SK_TD_PRESTADOR_AES, \\n    CO_PRESTADOR AS CO_PRESTADOR\\nFROM PRODIM.TD_PRESTADOR\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDPRESTSOLICITANTEAES",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          CO_PREST_SOLICITANTE_AES",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"colQR1AUTORIZACAO derive(CO_PREST_SOLICITANTE_AES = iif(isNull(CO_PREST_SOLICITANTE_AES), '-2', trim(CO_PREST_SOLICITANTE_AES))) ~> derColQR1AUTORIZACAO",
						"poolTDPRESTSOLICITANTEAES derive(CO_PRESTADOR = trim(CO_PRESTADOR)) ~> derColTDPRESTSOLICITANTEAES",
						"derColQR1AUTORIZACAO, derColTDPRESTSOLICITANTEAES lookup(CO_PREST_SOLICITANTE_AES == CO_PRESTADOR,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDPRESTSOLICITANTEAES",
						"lkpTDPRESTSOLICITANTEAES select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_PRESTADOR_AES",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTTDPRESTSOLICITANTEAES",
						"colAUTTDPRESTSOLICITANTEAES sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_PREST_SOLICITANTE_AES'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDPRESTSOLICITANTEAES"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_SIT_AUTORIZ_EVENTO')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDSITAUTORIZEVENTO"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDSITAUTORIZEVENTO"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "derColTDSITAUTORIZEVENTO"
						},
						{
							"name": "lkpTDSITAUTORIZEVENTO"
						},
						{
							"name": "colAUTTDSITAUTORIZEVENTO"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_SITUACAO_AUTORIZ_EVENTO as decimal(10,0),",
						"          CO_STATUS_AUTORIZ as string,",
						"          CO_SIT_AUTORIZ as string,",
						"          CO_SIT_EVENTO_SOLICIT as string,",
						"          CO_SIT_EVENTO_GERADO as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_SITUACAO_AUTORIZ_EVENTO AS SK_TD_SITUACAO_AUTORIZ_EVENTO, \\n     CO_STATUS_AUTORIZ AS CO_STATUS_AUTORIZ, \\n     CO_SIT_AUTORIZ AS CO_SIT_AUTORIZ, \\n     CO_SIT_EVENTO_SOLICIT AS CO_SIT_EVENTO_SOLICIT, \\n     CO_SIT_EVENTO_GERADO AS CO_SIT_EVENTO_GERADO\\nFROM PRODIM.TD_SITUACAO_AUTORIZ_EVENTO\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDSITAUTORIZEVENTO",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          CO_ST_SOLICIT,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"colQR1AUTORIZACAO derive(CO_ST_SOLICIT = iif(isNull(CO_ST_SOLICIT), '-2', trim(CO_ST_SOLICIT)),",
						"          CO_SITUACAO_AUT = iif(isNull(CO_SITUACAO_AUT), '-2', trim(CO_SITUACAO_AUT)),",
						"          CO_SITUACAO_AES = iif(isNull(CO_SITUACAO_AES), '-2', trim(CO_SITUACAO_AES)),",
						"          CO_SITUACAO_AEG = iif(isNull(CO_SITUACAO_AEG), '-2', trim(CO_SITUACAO_AEG))) ~> derColQR1AUTORIZACAO",
						"poolTDSITAUTORIZEVENTO derive(CO_STATUS_AUTORIZ = trim(CO_STATUS_AUTORIZ),",
						"          CO_SIT_AUTORIZ = trim(CO_SIT_AUTORIZ),",
						"          CO_SIT_EVENTO_SOLICIT = trim(CO_SIT_EVENTO_SOLICIT),",
						"          CO_SIT_EVENTO_GERADO = trim(CO_SIT_EVENTO_GERADO)) ~> derColTDSITAUTORIZEVENTO",
						"derColQR1AUTORIZACAO, derColTDSITAUTORIZEVENTO lookup(CO_ST_SOLICIT == CO_STATUS_AUTORIZ",
						"     && CO_SITUACAO_AUT == CO_SIT_AUTORIZ",
						"     && CO_SITUACAO_AES == CO_SIT_EVENTO_SOLICIT",
						"     && CO_SITUACAO_AES == CO_SIT_EVENTO_GERADO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDSITAUTORIZEVENTO",
						"lkpTDSITAUTORIZEVENTO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_SITUACAO_AUTORIZ_EVENTO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTTDSITAUTORIZEVENTO",
						"colAUTTDSITAUTORIZEVENTO sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_SIT_AUTORIZ_EVENTO'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDSITAUTORIZEVENTO"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_TAB_DOMINIO_EVENTO')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDTABDOMINIOEVENTO"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDTABDOMINIOEVENTO"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "lkpTDTABDOMINIOEVENTO"
						},
						{
							"name": "colAUTTDTABDOMINIOEVENTO"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_TAB_DOMINIO_EVENTO as decimal(10,0),",
						"          HD_DOMINIO as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_TAB_DOMINIO_EVENTO AS SK_TD_TAB_DOMINIO_EVENTO, \\n     HD_DOMINIO AS HD_DOMINIO \\nFROM PRODIM.TD_TAB_DOMINIO_EVENTO\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDTABDOMINIOEVENTO",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TIS_TAB_PRECO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"colQR1AUTORIZACAO derive(HD_TIS_TAB_PRECO = iif(isNull(HD_TIS_TAB_PRECO), -2, toInteger(HD_TIS_TAB_PRECO))) ~> derColQR1AUTORIZACAO",
						"derColQR1AUTORIZACAO, poolTDTABDOMINIOEVENTO lookup(HD_TIS_TAB_PRECO == HD_DOMINIO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDTABDOMINIOEVENTO",
						"lkpTDTABDOMINIOEVENTO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_TAB_DOMINIO_EVENTO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTTDTABDOMINIOEVENTO",
						"colAUTTDTABDOMINIOEVENTO sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_TAB_DOMINIO_EVENTO'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDTABDOMINIOEVENTO"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_TEMPO_AES_SOLICIT')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDTEMPOAESSOLICIT"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDTEMPOAESSOLICIT"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "derColTDTEMPOAESSOLICIT"
						},
						{
							"name": "lkpTDTEMPOAESSOLICIT"
						},
						{
							"name": "colAUTTDTEMPOAESSOLICIT"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_TEMPO_AES_SOLICIT as decimal(10,0),",
						"          DT_COMPLETA as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_TEMPO AS SK_TD_TEMPO_AES_SOLICIT, \\n     DT_COMPLETA AS DT_COMPLETA\\nFROM  PRODIM.TD_TEMPO\\nWHERE  ST_REGISTRO_CORRENTE = \\'S\\'\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDTEMPOAESSOLICIT",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          DT_SOLICITACAO_AES",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"colQR1AUTORIZACAO derive(DT_SOLICITACAO_AES = iif(isNull(DT_SOLICITACAO_AES), toDate('9999-12-31'), toDate(DT_SOLICITACAO_AES))) ~> derColQR1AUTORIZACAO",
						"poolTDTEMPOAESSOLICIT derive(DT_COMPLETA = toDate(DT_COMPLETA)) ~> derColTDTEMPOAESSOLICIT",
						"derColQR1AUTORIZACAO, derColTDTEMPOAESSOLICIT lookup(DT_SOLICITACAO_AES == DT_COMPLETA,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDTEMPOAESSOLICIT",
						"lkpTDTEMPOAESSOLICIT select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_TEMPO_AES_SOLICIT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTTDTEMPOAESSOLICIT",
						"colAUTTDTEMPOAESSOLICIT sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_TEMPO_AES_SOLICIT'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDTEMPOAESSOLICIT"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_TEMPO_ATENDIMENTO')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDTEMPOATENDIMENTO"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDTEMPOATENDIMENTO"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "derColTDTEMPOATENDIMENTO"
						},
						{
							"name": "lkpTDTEMPOATENDIMENTO"
						},
						{
							"name": "colAUTTDTEMPOATENDIMENTO"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_TEMPO_ATENDIMENTO as decimal(10,0),",
						"          DT_COMPLETA as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_TEMPO AS SK_TD_TEMPO_ATENDIMENTO, \\n     DT_COMPLETA AS DT_COMPLETA\\nFROM  PRODIM.TD_TEMPO\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDTEMPOATENDIMENTO",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          DT_ATENDIMENTO_AEG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"colQR1AUTORIZACAO derive(DT_ATENDIMENTO_AEG = iif(isNull(DT_ATENDIMENTO_AEG), toDate('9999-12-31'), toDate(DT_ATENDIMENTO_AEG))) ~> derColQR1AUTORIZACAO",
						"poolTDTEMPOATENDIMENTO derive(DT_COMPLETA = toDate(DT_COMPLETA)) ~> derColTDTEMPOATENDIMENTO",
						"derColQR1AUTORIZACAO, derColTDTEMPOATENDIMENTO lookup(DT_ATENDIMENTO_AEG == DT_COMPLETA,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDTEMPOATENDIMENTO",
						"lkpTDTEMPOATENDIMENTO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_TEMPO_ATENDIMENTO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTTDTEMPOATENDIMENTO",
						"colAUTTDTEMPOATENDIMENTO sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_TEMPO_ATENDIMENTO'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDTEMPOATENDIMENTO"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_TEMPO_AUTORIZ')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDTEMPOAUTORIZ"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDTEMPOAUTORIZ"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "derColTDTEMPOAUTORIZ"
						},
						{
							"name": "lkpTDTEMPOAUTORIZ"
						},
						{
							"name": "colTDTEMPOAUTORIZ"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_TEMPO_AUTORIZ as decimal(10,0),",
						"          DT_COMPLETA as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_TEMPO AS SK_TD_TEMPO_AUTORIZ, \\n     DT_COMPLETA AS DT_COMPLETA \\nFROM  PRODIM.TD_TEMPO\\nWHERE  ST_REGISTRO_CORRENTE = \\'S\\'\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDTEMPOAUTORIZ",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          DT_AUTORIZACAO_AUT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"colQR1AUTORIZACAO derive(DT_AUTORIZACAO_AUT = iif(isNull(DT_AUTORIZACAO_AUT), toDate('9999-12-31'), toDate(DT_AUTORIZACAO_AUT))) ~> derColQR1AUTORIZACAO",
						"poolTDTEMPOAUTORIZ derive(DT_COMPLETA = toDate(DT_COMPLETA)) ~> derColTDTEMPOAUTORIZ",
						"derColQR1AUTORIZACAO, derColTDTEMPOAUTORIZ lookup(DT_AUTORIZACAO_AUT == DT_COMPLETA,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDTEMPOAUTORIZ",
						"lkpTDTEMPOAUTORIZ select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_TEMPO_AUTORIZ",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colTDTEMPOAUTORIZ",
						"colTDTEMPOAUTORIZ sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_TEMPO_AUTORIZ'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDTEMPOAUTORIZ"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_TEMPO_AUT_SOLICIT')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDTEMPOAUTSOLICIT"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDTEMPOAUTSOLICIT"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "derColTDTEMPOAUTSOLICIT"
						},
						{
							"name": "lkpTDTEMPOAUTSOLICIT"
						},
						{
							"name": "colAUTTDTEMPOAUTSOLICIT"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_TEMPO_AUT_SOLICIT as decimal(10,0),",
						"          DT_COMPLETA as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_TEMPO AS SK_TD_TEMPO_AUT_SOLICIT, \\n     DT_COMPLETA AS DT_COMPLETA\\nFROM  PRODIM.TD_TEMPO\\nWHERE      ST_REGISTRO_CORRENTE = \\'S\\'\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDTEMPOAUTSOLICIT",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          DT_SOLICITACAO_AUT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"colQR1AUTORIZACAO derive(DT_SOLICITACAO_AUT = iif(isNull(DT_SOLICITACAO_AUT), toDate('9999-12-31'), toDate(DT_SOLICITACAO_AUT))) ~> derColQR1AUTORIZACAO",
						"poolTDTEMPOAUTSOLICIT derive(DT_COMPLETA = toDate(DT_COMPLETA)) ~> derColTDTEMPOAUTSOLICIT",
						"derColQR1AUTORIZACAO, derColTDTEMPOAUTSOLICIT lookup(DT_SOLICITACAO_AUT == DT_COMPLETA,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDTEMPOAUTSOLICIT",
						"lkpTDTEMPOAUTSOLICIT select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_TEMPO_AUT_SOLICIT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTTDTEMPOAUTSOLICIT",
						"colAUTTDTEMPOAUTSOLICIT sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_TEMPO_AUT_SOLICIT'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDTEMPOAUTSOLICIT"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_TEMPO_EVENTO_GERADO')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDTEMPOEVENTOGERADO"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDTEMPOEVENTOGERADO"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "derColTDTEMPOEVENTOGERADO"
						},
						{
							"name": "lkpTDTEMPOEVENTOGERADO"
						},
						{
							"name": "colAUTTDTEMPOEVENTOGERADO"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_TEMPO_EVENTO_GERADO as decimal(10,0),",
						"          DT_COMPLETA as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_TEMPO AS SK_TD_TEMPO_EVENTO_GERADO, \\n     DT_COMPLETA AS DT_COMPLETA\\nFROM  PRODIM.TD_TEMPO\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDTEMPOEVENTOGERADO",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          DT_AUTORIZACAO_AEG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"colQR1AUTORIZACAO derive(DT_AUTORIZACAO_AEG = iif(isNull(DT_AUTORIZACAO_AEG), toDate('9999-12-31'), toDate(DT_AUTORIZACAO_AEG))) ~> derColQR1AUTORIZACAO",
						"poolTDTEMPOEVENTOGERADO derive(DT_COMPLETA = toDate(DT_COMPLETA)) ~> derColTDTEMPOEVENTOGERADO",
						"derColQR1AUTORIZACAO, derColTDTEMPOEVENTOGERADO lookup(DT_AUTORIZACAO_AEG == DT_COMPLETA,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDTEMPOEVENTOGERADO",
						"lkpTDTEMPOEVENTOGERADO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_TEMPO_EVENTO_GERADO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTTDTEMPOEVENTOGERADO",
						"colAUTTDTEMPOEVENTOGERADO sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_TEMPO_EVENTO_GERADO'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDTEMPOEVENTOGERADO"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_TEMPO_VALIDADE')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDTEMPOVALIDADE"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDTEMPOVALIDADE"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "derColTDTEMPOVALIDADE"
						},
						{
							"name": "lkpTDTEMPOVALIDADE"
						},
						{
							"name": "colAUTTDTEMPOVALIDADE"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_TEMPO_VALIDADE as decimal(10,0),",
						"          DT_COMPLETA as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_TEMPO AS SK_TD_TEMPO_VALIDADE, \\n     DT_COMPLETA AS DT_COMPLETA\\nFROM  PRODIM.TD_TEMPO\\nWHERE  ST_REGISTRO_CORRENTE = \\'S\\'\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDTEMPOVALIDADE",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          DT_VALIDADE_AUT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"colQR1AUTORIZACAO derive(DT_VALIDADE_AUT = iif(isNull(DT_VALIDADE_AUT), toDate('9999-12-31'), toDate(DT_VALIDADE_AUT))) ~> derColQR1AUTORIZACAO",
						"poolTDTEMPOVALIDADE derive(DT_COMPLETA = toDate(DT_COMPLETA)) ~> derColTDTEMPOVALIDADE",
						"derColQR1AUTORIZACAO, derColTDTEMPOVALIDADE lookup(DT_VALIDADE_AUT == DT_COMPLETA,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDTEMPOVALIDADE",
						"lkpTDTEMPOVALIDADE select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_TEMPO_VALIDADE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTTDTEMPOVALIDADE",
						"colAUTTDTEMPOVALIDADE sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_TEMPO_VALIDADE'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDTEMPOVALIDADE"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_TIPO_AUTORIZACAO')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDTIPOAUTORIZACAO"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDTIPOAUTORIZACAO"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "lkpTDTIPOAUTORIZACAO"
						},
						{
							"name": "colAUTTDTIPOAUTORIZACAO"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_TIPO_AUTORIZACAO as decimal(10,0),",
						"          HD_TIPO_AUTORIZACAO as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_TIPO_AUTORIZACAO AS SK_TD_TIPO_AUTORIZACAO, \\n     HD_TIPO_AUTORIZACAO AS HD_TIPO_AUTORIZACAO \\nFROM PRODIM.TD_TIPO_AUTORIZACAO\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDTIPOAUTORIZACAO",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TP_AUTORIZ",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"colQR1AUTORIZACAO derive(HD_TP_AUTORIZ = iif(isNull(HD_TP_AUTORIZ), -2, toInteger(HD_TP_AUTORIZ))) ~> derColQR1AUTORIZACAO",
						"derColQR1AUTORIZACAO, poolTDTIPOAUTORIZACAO lookup(HD_TP_AUTORIZ == HD_TIPO_AUTORIZACAO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDTIPOAUTORIZACAO",
						"lkpTDTIPOAUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_TIPO_AUTORIZACAO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTTDTIPOAUTORIZACAO",
						"colAUTTDTIPOAUTORIZACAO sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_TIPO_AUTORIZACAO'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDTIPOAUTORIZACAO"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_TRATAMENTO_SAUDE')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDTRATAMENTOSAUDE"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDTRATAMENTOSAUDE"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "lkpTDTRATAMENTOSAUDE"
						},
						{
							"name": "colAUTTDTRATAMENTOSAUDE"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_TRATAMENTO_SAUDE as decimal(10,0),",
						"          CO_TIPO_TRATAMENTO as decimal(10,0),",
						"          CO_OBJETIVO_TRATAMENTO as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_TRATAMENTO_SAUDE AS SK_TD_TRATAMENTO_SAUDE, \\n     CO_TIPO_TRATAMENTO AS CO_TIPO_TRATAMENTO,\\n     CO_OBJETIVO_TRATAMENTO AS CO_OBJETIVO_TRATAMENTO\\nFROM PRODIM.TD_TRATAMENTO_SAUDE\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDTRATAMENTOSAUDE",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"colQR1AUTORIZACAO derive(CO_TP_TRATAMENTO = iif(isNull(CO_TP_TRATAMENTO), -2, toInteger(CO_TP_TRATAMENTO)),",
						"          CO_OBJ_TRATAMENTO = iif(isNull(CO_OBJ_TRATAMENTO), -2, toInteger(CO_OBJ_TRATAMENTO))) ~> derColQR1AUTORIZACAO",
						"derColQR1AUTORIZACAO, poolTDTRATAMENTOSAUDE lookup(CO_TP_TRATAMENTO == CO_TIPO_TRATAMENTO",
						"     && CO_OBJ_TRATAMENTO == CO_OBJETIVO_TRATAMENTO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDTRATAMENTOSAUDE",
						"lkpTDTRATAMENTOSAUDE select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_TRATAMENTO_SAUDE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTTDTRATAMENTOSAUDE",
						"colAUTTDTRATAMENTOSAUDE sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_TRATAMENTO_SAUDE'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDTRATAMENTOSAUDE"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_USUARIO')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDUSUARIO"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDUSUARIO"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "lkpTDUSUARIO"
						},
						{
							"name": "colAUTTDUSUARIO"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_USUARIO as decimal(10,0),",
						"          CO_HD_USUARIO as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_USUARIO AS SK_TD_USUARIO, \\n     CO_HD_USUARIO AS CO_HD_USUARIO \\nFROM PRODIM.TD_USUARIO\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDUSUARIO",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_USUARIO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"colQR1AUTORIZACAO derive(HD_USUARIO = iif(isNull(HD_USUARIO), -2, toInteger(HD_USUARIO))) ~> derColQR1AUTORIZACAO",
						"derColQR1AUTORIZACAO, poolTDUSUARIO lookup(HD_USUARIO == CO_HD_USUARIO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDUSUARIO",
						"lkpTDUSUARIO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_USUARIO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTTDUSUARIO",
						"colAUTTDUSUARIO sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_USUARIO'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDUSUARIO"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_USUARIO_AEG')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDUSUARIOAEG"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDUSUARIOAEG"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "derColQR1AUTORIZACAO"
						},
						{
							"name": "lkpTDUSUARIOAEG"
						},
						{
							"name": "colAUTTDUSUARIOAEG"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          SK_TD_USUARIO_AEG as decimal(10,0),",
						"          CO_HD_USUARIO as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_USUARIO AS SK_TD_USUARIO_AEG, \\n     CO_HD_USUARIO AS CO_HD_USUARIO \\nFROM PRODIM.TD_USUARIO\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDUSUARIOAEG",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_USUARIO_GERACAO_AEG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"colQR1AUTORIZACAO derive(HD_USUARIO_GERACAO_AEG = iif(isNull(HD_USUARIO_GERACAO_AEG), -2, toInteger(HD_USUARIO_GERACAO_AEG))) ~> derColQR1AUTORIZACAO",
						"derColQR1AUTORIZACAO, poolTDUSUARIOAEG lookup(HD_USUARIO_GERACAO_AEG == CO_HD_USUARIO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDUSUARIOAEG",
						"lkpTDUSUARIOAEG select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_USUARIO_AEG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTTDUSUARIOAEG",
						"colAUTTDUSUARIOAEG sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_USUARIO_AEG'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDUSUARIOAEG"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_TD_USUARIO_AEN')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolAUTORIZEVENTONEGACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDUSUARIOAEN"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTTDUSUARIOAEN"
						}
					],
					"transformations": [
						{
							"name": "colQR1AUTORIZACAO"
						},
						{
							"name": "srtAUTORIZEVENTONEGACAO"
						},
						{
							"name": "lkpAUTORIZEVENTONEGACAO"
						},
						{
							"name": "derColAUTORIZEVENTONEGACAO"
						},
						{
							"name": "lkpTDUSUARIOAEN"
						},
						{
							"name": "colAUTTDUSUARIOAEN"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          EVENTOGERADO as integer,",
						"          REVERTIDOPOR as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT EVENTOGERADO AS EVENTOGERADO,\\n     REVERTIDOPOR AS REVERTIDOPOR\\nFROM PROSTG.SAM_AUTORIZ_EVENTONEGACAO\\nWHERE REVERTIDOPOR IS NOT NULL',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolAUTORIZEVENTONEGACAO",
						"source(output(",
						"          SK_TD_USUARIO_AEN as decimal(10,0),",
						"          CO_HD_USUARIO as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_USUARIO AS SK_TD_USUARIO_AEN, \\n     CO_HD_USUARIO AS CO_HD_USUARIO \\nFROM PRODIM.TD_USUARIO\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDUSUARIOAEN",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
						"poolAUTORIZEVENTONEGACAO sort(desc(EVENTOGERADO, true)) ~> srtAUTORIZEVENTONEGACAO",
						"colQR1AUTORIZACAO, srtAUTORIZEVENTONEGACAO lookup(HD_AUTORIZ_EVENTO_GERADO == EVENTOGERADO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpAUTORIZEVENTONEGACAO",
						"lkpAUTORIZEVENTONEGACAO derive(REVERTIDOPOR = iif(isNull(REVERTIDOPOR), -2, toInteger(REVERTIDOPOR))) ~> derColAUTORIZEVENTONEGACAO",
						"derColAUTORIZEVENTONEGACAO, poolTDUSUARIOAEN lookup(REVERTIDOPOR == CO_HD_USUARIO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDUSUARIOAEN",
						"lkpTDUSUARIOAEN select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          SK_TD_USUARIO_AEN",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colAUTTDUSUARIOAEN",
						"colAUTTDUSUARIOAEN sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TD_USUARIO_AEN'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTTDUSUARIOAEN"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_VL_EST_PRESTADOR')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTSEMVLPREST"
						},
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQRY5VLESTADOS"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "colQRY5VLESTADOS"
						},
						{
							"name": "derColQRY5VLESTADOS"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_PREST_EXECUTOR as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_CBOS as integer,",
						"          DT_ATENDIMENTO_AEG as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'AUT_SEM_VL_PRESTADORES') ~> prqtAUTSEMVLPREST",
						"source(output(",
						"          HD_ESTADO as long,",
						"          HD_TGE as integer,",
						"          HD_CBO as integer,",
						"          HD_REGIME_ATENDIMENTO as long,",
						"          HD_GRAU as integer,",
						"          DT_INICIAL as timestamp,",
						"          DT_FINAL as timestamp,",
						"          NU_PORTE_ANESTESICO as long,",
						"          NU_PORTE_SALA as long,",
						"          VL_US as double,",
						"          VL_UCO as double,",
						"          VL_FILME as double,",
						"          ST_LOOKUP as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QRY5_VL_ESTADOS') ~> prqtQRY5VLESTADOS",
						"prqtQRY5VLESTADOS select(mapColumn(",
						"          HD_ESTADO,",
						"          HD_TGE,",
						"          HD_CBO,",
						"          HD_REGIME_ATENDIMENTO,",
						"          DT_INICIAL,",
						"          DT_FINAL,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          ST_LOOKUP",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colQRY5VLESTADOS",
						"colQRY5VLESTADOS derive(HD_ESTADO = iif(isNull(HD_ESTADO), -2, toInteger(HD_ESTADO)),",
						"          HD_TGE = iif(isNull(HD_TGE), -2, toInteger(HD_TGE)),",
						"          HD_CBO = iif(isNull(HD_CBO), -2, toInteger(HD_CBO)),",
						"          HD_REGIME_ATENDIMENTO = iif(isNull(HD_REGIME_ATENDIMENTO), -2, toInteger(HD_REGIME_ATENDIMENTO)),",
						"          DT_INICIAL = iif(isNull(DT_INICIAL), toDate('9999-12-31'), toDate(DT_INICIAL)),",
						"          DT_FINAL = iif(isNull(DT_FINAL), toDate('9999-12-31'), toDate(DT_FINAL))) ~> derColQRY5VLESTADOS",
						"prqtAUTSEMVLPREST sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_TESTE'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FD_VL_PRESTADORES_copy1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO/Primeiros"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQR1AUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQRY4VLPRESTADORES"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTSEMVLPREST"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derColQRY4VLPRESTADORES"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "lkp4PreTgeCboReg"
						},
						{
							"name": "split4PreTgeCboReg"
						},
						{
							"name": "colT4PreTgeCboReg"
						},
						{
							"name": "colF4PreTgeCboReg"
						},
						{
							"name": "lkp3PreTgeCbo"
						},
						{
							"name": "split3PreTgeCbo"
						},
						{
							"name": "colT3PreTgeCbo"
						},
						{
							"name": "union1"
						},
						{
							"name": "colF3PreTgeCbo"
						},
						{
							"name": "lkp3PreTgeReg"
						},
						{
							"name": "split3PreTgeReg"
						},
						{
							"name": "union2"
						},
						{
							"name": "colT3PreTgeReg"
						},
						{
							"name": "colF3PreTgeReg"
						},
						{
							"name": "lkp2PreTge"
						},
						{
							"name": "split2PreTge"
						},
						{
							"name": "colT2PreTge"
						},
						{
							"name": "colF2PreTge"
						},
						{
							"name": "union3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
						"source(output(",
						"          HD_PRESTADOR as integer,",
						"          HD_TGE as integer,",
						"          HD_CBO as integer,",
						"          HD_REGIME_ATENDIMENTO as integer,",
						"          HD_GRAU as integer,",
						"          DT_INICIAL as timestamp,",
						"          DT_FINAL as timestamp,",
						"          NU_PORTE_ANESTESICO as integer,",
						"          NU_PORTE_SALA as integer,",
						"          VL_US as double,",
						"          VL_UCO as double,",
						"          VL_FILME as double,",
						"          ST_LOOKUP as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QRY4_VL_PRESTADORES') ~> prqtQRY4VLPRESTADORES",
						"prqtQR1AUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_PREST_EXECUTOR,",
						"          HD_REGIME_ATEND,",
						"          HD_CBOS,",
						"          DT_ATENDIMENTO_AEG,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_ESTADO_BENEF",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"prqtQRY4VLPRESTADORES derive(DT_INICIAL = toDate(DT_INICIAL),",
						"          DT_FINAL = toDate(DT_FINAL)) ~> derColQRY4VLPRESTADORES",
						"select1 derive(HD_TGE = iif(isNull(HD_TGE), -2, HD_TGE),",
						"          HD_PREST_EXECUTOR = iif(isNull(HD_PREST_EXECUTOR), -2, HD_PREST_EXECUTOR),",
						"          HD_REGIME_ATEND = iif(isNull(HD_REGIME_ATEND), -2, HD_REGIME_ATEND),",
						"          HD_CBOS = iif(isNull(HD_CBOS), -2, HD_CBOS),",
						"          DT_ATENDIMENTO_AEG = toDate(DT_ATENDIMENTO_AEG)) ~> derivedColumn2",
						"derivedColumn2, derColQRY4VLPRESTADORES lookup(HD_PREST_EXECUTOR == HD_PRESTADOR",
						"     && derivedColumn2@HD_TGE == prqtQRY4VLPRESTADORES@HD_TGE",
						"     && HD_CBOS == HD_CBO",
						"     && HD_REGIME_ATEND == HD_REGIME_ATENDIMENTO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkp4PreTgeCboReg",
						"lkp4PreTgeCboReg split(ST_LOOKUP == toBoolean('1') && between(DT_ATENDIMENTO_AEG, DT_INICIAL, DT_FINAL),",
						"     disjoint: false) ~> split4PreTgeCboReg@(true4PTCR, false4PTCR)",
						"split4PreTgeCboReg@true4PTCR select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split4PreTgeCboReg@true4PTCR@HD_TGE,",
						"          HD_PREST_EXECUTOR,",
						"          HD_REGIME_ATEND,",
						"          HD_CBOS,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_FILME,",
						"          HD_PREST_EXECUTOR,",
						"          HD_ESTADO_BENEF",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colT4PreTgeCboReg",
						"split4PreTgeCboReg@false4PTCR select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split4PreTgeCboReg@false4PTCR@HD_TGE,",
						"          HD_PREST_EXECUTOR,",
						"          HD_REGIME_ATEND,",
						"          HD_CBOS,",
						"          DT_ATENDIMENTO_AEG,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_ESTADO_BENEF",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colF4PreTgeCboReg",
						"colF4PreTgeCboReg, derColQRY4VLPRESTADORES lookup(HD_PREST_EXECUTOR == HD_PRESTADOR",
						"     && colF4PreTgeCboReg@HD_TGE == prqtQRY4VLPRESTADORES@HD_TGE",
						"     && HD_CBOS == HD_CBO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkp3PreTgeCbo",
						"lkp3PreTgeCbo split(ST_LOOKUP == toBoolean('1') && between(DT_ATENDIMENTO_AEG, DT_INICIAL, DT_FINAL),",
						"     disjoint: false) ~> split3PreTgeCbo@(true3PreTgeCbo, false3PreTgeCbo)",
						"split3PreTgeCbo@true3PreTgeCbo select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split3PreTgeCbo@true3PreTgeCbo@HD_TGE,",
						"          HD_PREST_EXECUTOR,",
						"          HD_REGIME_ATEND,",
						"          HD_CBOS,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_FILME,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_ESTADO_BENEF",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colT3PreTgeCbo",
						"colT4PreTgeCboReg, colT3PreTgeCbo union(byName: true)~> union1",
						"split3PreTgeCbo@false3PreTgeCbo select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split3PreTgeCbo@false3PreTgeCbo@HD_TGE,",
						"          HD_PREST_EXECUTOR,",
						"          HD_REGIME_ATEND,",
						"          HD_CBOS,",
						"          DT_ATENDIMENTO_AEG,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_ESTADO_BENEF",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colF3PreTgeCbo",
						"colF3PreTgeCbo, derColQRY4VLPRESTADORES lookup(HD_PREST_EXECUTOR == HD_PRESTADOR",
						"     && colF3PreTgeCbo@HD_TGE == prqtQRY4VLPRESTADORES@HD_TGE",
						"     && HD_REGIME_ATEND == HD_REGIME_ATENDIMENTO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkp3PreTgeReg",
						"lkp3PreTgeReg split(ST_LOOKUP == toBoolean('1') && between(DT_ATENDIMENTO_AEG, DT_INICIAL, DT_FINAL),",
						"     disjoint: false) ~> split3PreTgeReg@(true3PreTgeReg, false3PreTgeReg)",
						"union1, colT3PreTgeReg union(byName: true)~> union2",
						"split3PreTgeReg@true3PreTgeReg select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split3PreTgeReg@true3PreTgeReg@HD_TGE,",
						"          HD_PREST_EXECUTOR,",
						"          HD_REGIME_ATEND,",
						"          HD_CBOS,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_FILME,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_ESTADO_BENEF",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colT3PreTgeReg",
						"split3PreTgeReg@false3PreTgeReg select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split3PreTgeReg@false3PreTgeReg@HD_TGE,",
						"          HD_PREST_EXECUTOR,",
						"          HD_REGIME_ATEND,",
						"          HD_CBOS,",
						"          DT_ATENDIMENTO_AEG,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_ESTADO_BENEF",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colF3PreTgeReg",
						"colF3PreTgeReg, derColQRY4VLPRESTADORES lookup(HD_PREST_EXECUTOR == HD_PRESTADOR",
						"     && colF3PreTgeReg@HD_TGE == prqtQRY4VLPRESTADORES@HD_TGE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkp2PreTge",
						"lkp2PreTge split(ST_LOOKUP == toBoolean('1') && between(DT_ATENDIMENTO_AEG, DT_INICIAL, DT_FINAL),",
						"     disjoint: false) ~> split2PreTge@(true2PreTge, false2PreTge)",
						"split2PreTge@true2PreTge select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split2PreTge@true2PreTge@HD_TGE,",
						"          HD_PREST_EXECUTOR,",
						"          HD_REGIME_ATEND,",
						"          HD_CBOS,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_FILME,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_ESTADO_BENEF",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colT2PreTge",
						"split2PreTge@false2PreTge select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split2PreTge@false2PreTge@HD_TGE,",
						"          HD_PREST_EXECUTOR,",
						"          HD_REGIME_ATEND,",
						"          HD_CBOS,",
						"          DT_ATENDIMENTO_AEG,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_ESTADO_BENEF",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colF2PreTge",
						"union2, colT2PreTge union(byName: true)~> union3",
						"union3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_VL_PRESTADORES'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"colF2PreTge sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_SEM_VL_PREST'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTSEMVLPREST"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TSTj08_TF_AUTORIZACAO_Ext_Anes')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO/Primeiros"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTEXTRACTVALORES"
						},
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQRY3VLPRESTANETESISTA"
						},
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQRY6VLESTANESTESISTA"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTEXTRACTVALORESANEST"
						}
					],
					"transformations": [
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "split2"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "union1"
						},
						{
							"name": "split3"
						},
						{
							"name": "union2"
						},
						{
							"name": "select3"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "lookup2"
						},
						{
							"name": "derivedColumn4"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string,",
						"          DT_REF_CARGA as date,",
						"          CTL_DT_EXTRACAO as timestamp,",
						"          TS_ATENDIMENTO_AEG as date,",
						"          TS_AUTORIZACAO_AUT as timestamp,",
						"          TS_AUTORIZACAO_AEG as timestamp,",
						"          DT_INICIAL as timestamp,",
						"          NU_PORTE_ANESTESICO as long,",
						"          NU_PORTE_SALA as long,",
						"          VL_US as double,",
						"          VL_UCO as double,",
						"          VL_FILME as double,",
						"          CTL_ORIGEM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'AUT_EXTRACT_VALORES') ~> prqtAUTEXTRACTVALORES",
						"source(output(",
						"          HD_PRESTADOR as integer,",
						"          NU_PORTE_ANESTESICO as long,",
						"          DT_INICIAL as timestamp,",
						"          DT_FINAL as timestamp,",
						"          PERCENTUALAUXILIARANESTESISTA as double,",
						"          QTDUSANESTESISTA as double,",
						"          PERCENTUALPAGTOUS as double,",
						"          VALORUSHONORARIO as double,",
						"          VL_US_ANESTESISTA as double,",
						"          ST_LOOKUP as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QRY3_VL_PREST_ANETESISTA') ~> prqtQRY3VLPRESTANETESISTA",
						"source(output(",
						"          HD_ESTADO as long,",
						"          NU_PORTE_ANESTESICO as long,",
						"          DT_INICIAL as timestamp,",
						"          DT_FINAL as timestamp,",
						"          PERCENTUALAUXILIARANESTESISTA as double,",
						"          QTDUSANESTESISTA as double,",
						"          PERCENTUALPAGTOUS as double,",
						"          VALORUSHONORARIO as double,",
						"          VL_US_ANESTESISTA as double,",
						"          ST_LOOKUP as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QRY6_VL_EST_ANESTESISTA') ~> prqtQRY6VLESTANESTESISTA",
						"prqtAUTEXTRACTVALORES split(CO_GRAU != 6 && CO_GRAU != 16,",
						"     disjoint: false) ~> split1@(TRUE1, FALSE1)",
						"split1@TRUE1 derive(PERCENTUALAUXILIARANESTESISTA = toDouble(0),",
						"          VL_US_ANESTESISTA = toDouble(0)) ~> derivedColumn1",
						"split1@FALSE1, derivedColumn2 lookup(HD_PREST_EXECUTOR == HD_PRESTADOR",
						"     && split1@FALSE1@NU_PORTE_ANESTESICO == prqtQRY3VLPRESTANETESISTA@NU_PORTE_ANESTESICO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"prqtQRY3VLPRESTANETESISTA derive(ST_LOOKUP = toBoolean('1')) ~> derivedColumn2",
						"lookup1 split(ST_LOOKUP == toBoolean('1') && between(TS_ATENDIMENTO_AEG, prqtQRY3VLPRESTANETESISTA@DT_INICIAL, DT_FINAL),",
						"     disjoint: false) ~> split2@(TRUE2, FALSE2)",
						"split2@TRUE2 select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL = split2@TRUE2@DT_INICIAL,",
						"          NU_PORTE_ANESTESICO = split2@TRUE2@NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"split2@FALSE2 select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL = split2@FALSE2@DT_INICIAL,",
						"          NU_PORTE_ANESTESICO = split2@FALSE2@NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select1, select2 union(byName: true)~> union1",
						"union1 split(!isNull(VL_US_ANESTESISTA) && VL_US_ANESTESISTA != 0,",
						"     disjoint: false) ~> split3@(TRUE3, FALSE3)",
						"derivedColumn1, split3@TRUE3 union(byName: true)~> union2",
						"split3@FALSE3 select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 derive(CTL_ORIGEM = '15-Anestesista_Estado_Benef_2keys  E  os nao encontrados') ~> derivedColumn3",
						"derivedColumn3, prqtQRY6VLESTANESTESISTA lookup(HD_ESTADO_PREST_EXEC == HD_ESTADO",
						"     && select3@NU_PORTE_ANESTESICO == prqtQRY6VLESTANESTESISTA@NU_PORTE_ANESTESICO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup2",
						"prqtQRY6VLESTANESTESISTA derive(ST_LOOKUP = toBoolean('1')) ~> derivedColumn4",
						"union2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_EXTRACT_VALORES_ANEST'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTEXTRACTVALORESANEST"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/j04_TF_AUTORIZACAO_Ext_Prest')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO/Primeiros"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtVLPRESTADORES"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtVLPREST4CHAVES"
						},
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "semValoresPrestadores"
						}
					],
					"transformations": [
						{
							"name": "lookup4chaves"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "split1"
						},
						{
							"name": "colunasLookup3Chaves"
						},
						{
							"name": "colunasPrqt4Chaves"
						},
						{
							"name": "lookup3Achaves"
						},
						{
							"name": "split2"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "colunasLookup3BChaves"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "split3"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "colunasLookup2Chaves"
						},
						{
							"name": "lookup2chaves"
						},
						{
							"name": "split4"
						},
						{
							"name": "select3"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "select4"
						},
						{
							"name": "union1"
						},
						{
							"name": "union2"
						},
						{
							"name": "union3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QR1_AUTORIZACAO') ~> prqtAUTORIZACAO",
						"source(output(",
						"          HD_PRESTADOR as integer,",
						"          HD_TGE as integer,",
						"          HD_CBO as integer,",
						"          HD_REGIME_ATENDIMENTO as integer,",
						"          HD_GRAU as integer,",
						"          DT_INICIAL as timestamp,",
						"          DT_FINAL as timestamp,",
						"          NU_PORTE_ANESTESICO as integer,",
						"          NU_PORTE_SALA as integer,",
						"          VL_US as double,",
						"          VL_UCO as double,",
						"          VL_FILME as double,",
						"          ST_LOOKUP as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QRY4_VL_PRESTADORES') ~> prqtVLPRESTADORES",
						"derivedColumn1, prqtVLPRESTADORES lookup(HD_PREST_EXECUTOR == HD_PRESTADOR",
						"     && prqtAUTORIZACAO@HD_TGE == prqtVLPRESTADORES@HD_TGE",
						"     && HD_CBOS == HD_CBO",
						"     && HD_REGIME_ATEND == HD_REGIME_ATENDIMENTO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup4chaves",
						"prqtAUTORIZACAO derive(DT_REF_CARGA = toDate('2022-01-01'),",
						"          CTL_DT_EXTRACAO = currentTimestamp(),",
						"          TS_ATENDIMENTO_AEG = toDate(DT_ATENDIMENTO_AEG),",
						"          TS_AUTORIZACAO_AUT = DT_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG = DT_AUTORIZACAO_AEG) ~> derivedColumn1",
						"lookup4chaves split(ST_LOOKUP == toBoolean('1') && between(TS_ATENDIMENTO_AEG, toDate(DT_INICIAL), toDate(DT_FINAL)),",
						"     disjoint: false) ~> split1@(TRUE4CHAVES, FALSE4CHAVES)",
						"split1@FALSE4CHAVES select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split1@FALSE4CHAVES@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split1@FALSE4CHAVES@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colunasLookup3Chaves",
						"split1@TRUE4CHAVES select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split1@TRUE4CHAVES@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split1@TRUE4CHAVES@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colunasPrqt4Chaves",
						"colunasLookup3Chaves, prqtVLPRESTADORES lookup(HD_PREST_EXECUTOR == HD_PRESTADOR",
						"     && colunasLookup3Chaves@HD_TGE == prqtVLPRESTADORES@HD_TGE",
						"     && HD_CBOS == HD_CBO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup3Achaves",
						"lookup3Achaves split(ST_LOOKUP == toBoolean('1') && between(TS_ATENDIMENTO_AEG, toDate(DT_INICIAL), toDate(DT_FINAL)),",
						"     disjoint: false) ~> split2@(TRUE3ACHAVES, FALSE3ACHAVES)",
						"split2@TRUE3ACHAVES select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split2@TRUE3ACHAVES@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split2@TRUE3ACHAVES@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"colunasPrqt4Chaves derive(CTL_ORIGEM = '01-Prestadores_4keys') ~> derivedColumn2",
						"select1 derive(CTL_ORIGEM = '02-Prestadores_3Akeys') ~> derivedColumn3",
						"split2@FALSE3ACHAVES select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split2@FALSE3ACHAVES@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split2@FALSE3ACHAVES@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colunasLookup3BChaves",
						"colunasLookup3BChaves, prqtVLPRESTADORES lookup(HD_PREST_EXECUTOR == HD_PRESTADOR",
						"     && colunasLookup3BChaves@HD_TGE == prqtVLPRESTADORES@HD_TGE",
						"     && HD_REGIME_ATEND == HD_REGIME_ATENDIMENTO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 split(ST_LOOKUP == toBoolean('1') && between(TS_ATENDIMENTO_AEG, toDate(DT_INICIAL), toDate(DT_FINAL)),",
						"     disjoint: false) ~> split3@(TRUE3BCHAVES, FALSE3BCHAVES)",
						"split3@TRUE3BCHAVES select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split3@TRUE3BCHAVES@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split3@TRUE3BCHAVES@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive(CTL_ORIGEM = '03-Prestadores_3Bkeys') ~> derivedColumn4",
						"split3@FALSE3BCHAVES select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split3@FALSE3BCHAVES@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split3@FALSE3BCHAVES@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> colunasLookup2Chaves",
						"colunasLookup2Chaves, prqtVLPRESTADORES lookup(HD_PREST_EXECUTOR == HD_PRESTADOR",
						"     && colunasLookup2Chaves@HD_TGE == prqtVLPRESTADORES@HD_TGE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup2chaves",
						"lookup2chaves split(ST_LOOKUP == toBoolean('1') && between(TS_ATENDIMENTO_AEG, toDate(DT_INICIAL), toDate(DT_FINAL)),",
						"     disjoint: false) ~> split4@(TRUE2CHAVES, FALSE2CHAVES)",
						"split4@TRUE2CHAVES select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split4@TRUE2CHAVES@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split4@TRUE2CHAVES@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 derive(CTL_ORIGEM = '04-Prestadores_2keys') ~> derivedColumn5",
						"split4@FALSE2CHAVES select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split4@FALSE2CHAVES@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split4@FALSE2CHAVES@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"derivedColumn2, derivedColumn3 union(byName: true)~> union1",
						"union1, derivedColumn4 union(byName: true)~> union2",
						"union2, derivedColumn5 union(byName: true)~> union3",
						"union3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_VL_PRES'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtVLPREST4CHAVES",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_SEM_VL_PRESTADORES'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> semValoresPrestadores"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/j05_TF_AUTORIZACAO_Ext_EstPrest')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO/Primeiros"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtSEMVLPRESTADORES"
						},
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQRY5VLESTADOS"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtTMP4CHAVEZ"
						},
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "semValoresEstados"
						}
					],
					"transformations": [
						{
							"name": "Lookup4chaves"
						},
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "Lookup3Achaves"
						},
						{
							"name": "split2"
						},
						{
							"name": "select3"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "union43A"
						},
						{
							"name": "select4"
						},
						{
							"name": "lookup3Bchaves"
						},
						{
							"name": "split3"
						},
						{
							"name": "select5"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "union43A3B"
						},
						{
							"name": "select6"
						},
						{
							"name": "lookup2chaves"
						},
						{
							"name": "split4"
						},
						{
							"name": "select7"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "union43A3B2"
						},
						{
							"name": "select8"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string,",
						"          DT_REF_CARGA as date,",
						"          CTL_DT_EXTRACAO as timestamp,",
						"          TS_ATENDIMENTO_AEG as date,",
						"          TS_AUTORIZACAO_AUT as timestamp,",
						"          TS_AUTORIZACAO_AEG as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'AUT_SEM_VL_PRESTADORES') ~> prqtSEMVLPRESTADORES",
						"source(output(",
						"          HD_ESTADO as long,",
						"          HD_TGE as integer,",
						"          HD_CBO as integer,",
						"          HD_REGIME_ATENDIMENTO as long,",
						"          HD_GRAU as integer,",
						"          DT_INICIAL as timestamp,",
						"          DT_FINAL as timestamp,",
						"          NU_PORTE_ANESTESICO as long,",
						"          NU_PORTE_SALA as long,",
						"          VL_US as double,",
						"          VL_UCO as double,",
						"          VL_FILME as double,",
						"          ST_LOOKUP as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QRY5_VL_ESTADOS') ~> prqtQRY5VLESTADOS",
						"prqtSEMVLPRESTADORES, prqtQRY5VLESTADOS lookup(HD_ESTADO_PREST_EXEC == HD_ESTADO",
						"     && prqtSEMVLPRESTADORES@HD_TGE == prqtQRY5VLESTADOS@HD_TGE",
						"     && HD_CBOS == HD_CBO",
						"     && HD_REGIME_ATEND == HD_REGIME_ATENDIMENTO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> Lookup4chaves",
						"Lookup4chaves split(ST_LOOKUP == toBoolean('1') && between(TS_ATENDIMENTO_AEG, toDate(DT_INICIAL), toDate(DT_FINAL)),",
						"     disjoint: false) ~> split1@(true4chaves, fales4chaves)",
						"split1@true4chaves derive(CTL_ORIGEM = '05-Estado_Prest_4keys') ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split1@true4chaves@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split1@true4chaves@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"split1@fales4chaves select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split1@fales4chaves@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split1@fales4chaves@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, prqtQRY5VLESTADOS lookup(HD_ESTADO_PREST_EXEC == HD_ESTADO",
						"     && select2@HD_TGE == prqtQRY5VLESTADOS@HD_TGE",
						"     && HD_CBOS == HD_CBO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> Lookup3Achaves",
						"Lookup3Achaves split(ST_LOOKUP == toBoolean('1') && between(TS_ATENDIMENTO_AEG, toDate(DT_INICIAL), toDate(DT_FINAL)),",
						"     disjoint: false) ~> split2@(true3Achaves, false3achaves)",
						"split2@true3Achaves select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split2@true3Achaves@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split2@true3Achaves@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 derive(CTL_ORIGEM = '06-Estado_Prest_3Akeys') ~> derivedColumn2",
						"select1, derivedColumn2 union(byName: true)~> union43A",
						"split2@false3achaves select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split2@false3achaves@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split2@false3achaves@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select4, prqtQRY5VLESTADOS lookup(HD_ESTADO_PREST_EXEC == HD_ESTADO",
						"     && select4@HD_TGE == prqtQRY5VLESTADOS@HD_TGE",
						"     && HD_REGIME_ATEND == HD_REGIME_ATENDIMENTO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup3Bchaves",
						"lookup3Bchaves split(ST_LOOKUP == toBoolean('1') && between(TS_ATENDIMENTO_AEG, toDate(DT_INICIAL), toDate(DT_FINAL)),",
						"     disjoint: false) ~> split3@(true3Bchaves, false3Bchaves)",
						"split3@true3Bchaves select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split3@true3Bchaves@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split3@true3Bchaves@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select5 derive(CTL_ORIGEM = '07-Estado_Prest_3Bkeys') ~> derivedColumn3",
						"union43A, derivedColumn3 union(byName: true)~> union43A3B",
						"split3@false3Bchaves select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split3@false3Bchaves@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split3@false3Bchaves@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"select6, prqtQRY5VLESTADOS lookup(HD_ESTADO_PREST_EXEC == HD_ESTADO",
						"     && select6@HD_TGE == prqtQRY5VLESTADOS@HD_TGE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup2chaves",
						"lookup2chaves split(ST_LOOKUP == toBoolean('1') && between(TS_ATENDIMENTO_AEG, toDate(DT_INICIAL), toDate(DT_FINAL)),",
						"     disjoint: false) ~> split4@(true2chaves, false2chaves)",
						"split4@true2chaves select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split4@true2chaves@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split4@true2chaves@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"select7 derive(CTL_ORIGEM = '08-Estado_Prest_2keys') ~> derivedColumn4",
						"union43A3B, derivedColumn4 union(byName: true)~> union43A3B2",
						"split4@false2chaves select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split4@false2chaves@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split4@false2chaves@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"union43A3B2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_VL_ESTADOS'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtTMP4CHAVEZ",
						"select8 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_SEM_VL_ESTADOS'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> semValoresEstados"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/j06_TF_AUTORIZACAO_Ext_EstBenef')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO/Primeiros"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtSEMVLESTADOS"
						},
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtVLESTADOSBEN"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTVLBENEFICIARIO"
						},
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTSEMVLESTBEN"
						}
					],
					"transformations": [
						{
							"name": "lookup4chaves"
						},
						{
							"name": "split1"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "lookup3Achaves"
						},
						{
							"name": "split2"
						},
						{
							"name": "select3"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "union43A"
						},
						{
							"name": "select4"
						},
						{
							"name": "lookup3Bchaves"
						},
						{
							"name": "split3"
						},
						{
							"name": "select5"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "union43A3B"
						},
						{
							"name": "select6"
						},
						{
							"name": "lookup2chaves"
						},
						{
							"name": "split4"
						},
						{
							"name": "select7"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "union43A3B2"
						},
						{
							"name": "select8"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string,",
						"          DT_REF_CARGA as date,",
						"          CTL_DT_EXTRACAO as timestamp,",
						"          TS_ATENDIMENTO_AEG as date,",
						"          TS_AUTORIZACAO_AUT as timestamp,",
						"          TS_AUTORIZACAO_AEG as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'AUT_SEM_VL_ESTADOS') ~> prqtSEMVLESTADOS",
						"source(output(",
						"          HD_ESTADO as long,",
						"          HD_TGE as integer,",
						"          HD_CBO as integer,",
						"          HD_REGIME_ATENDIMENTO as long,",
						"          HD_GRAU as integer,",
						"          DT_INICIAL as timestamp,",
						"          DT_FINAL as timestamp,",
						"          NU_PORTE_ANESTESICO as long,",
						"          NU_PORTE_SALA as long,",
						"          VL_US as double,",
						"          VL_UCO as double,",
						"          VL_FILME as double,",
						"          ST_LOOKUP as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QRY5_VL_ESTADOS') ~> prqtVLESTADOSBEN",
						"prqtSEMVLESTADOS, prqtVLESTADOSBEN lookup(HD_ESTADO_BENEF == HD_ESTADO",
						"     && prqtSEMVLESTADOS@HD_TGE == prqtVLESTADOSBEN@HD_TGE",
						"     && HD_CBOS == HD_CBO",
						"     && HD_REGIME_ATEND == HD_REGIME_ATENDIMENTO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup4chaves",
						"lookup4chaves split(ST_LOOKUP == toBoolean('1') && between(TS_ATENDIMENTO_AEG, toDate(DT_INICIAL), toDate(DT_FINAL)),",
						"     disjoint: false) ~> split1@(true4chaves, false4chaves)",
						"split1@true4chaves select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split1@true4chaves@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split1@true4chaves@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(CTL_ORIGEM = '09-Estado_Benef_4keys') ~> derivedColumn1",
						"split1@false4chaves select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split1@false4chaves@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split1@false4chaves@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, prqtVLESTADOSBEN lookup(HD_ESTADO_BENEF == HD_ESTADO",
						"     && select2@HD_TGE == prqtVLESTADOSBEN@HD_TGE",
						"     && HD_CBOS == HD_CBO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup3Achaves",
						"lookup3Achaves split(ST_LOOKUP == toBoolean('1') && between(TS_ATENDIMENTO_AEG, toDate(DT_INICIAL), toDate(DT_FINAL)),",
						"     disjoint: false) ~> split2@(true3Achaves, false3Achaves)",
						"split2@true3Achaves select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split2@true3Achaves@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split2@true3Achaves@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 derive(CTL_ORIGEM = '10-Estado_Benef_3Akeys') ~> derivedColumn2",
						"derivedColumn1, derivedColumn2 union(byName: true)~> union43A",
						"split2@false3Achaves select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split2@false3Achaves@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split2@false3Achaves@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select4, prqtVLESTADOSBEN lookup(HD_ESTADO_BENEF == HD_ESTADO",
						"     && select4@HD_TGE == prqtVLESTADOSBEN@HD_TGE",
						"     && HD_REGIME_ATEND == HD_REGIME_ATENDIMENTO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup3Bchaves",
						"lookup3Bchaves split(ST_LOOKUP == toBoolean('1') && between(TS_ATENDIMENTO_AEG, toDate(DT_INICIAL), toDate(DT_FINAL)),",
						"     disjoint: false) ~> split3@(true3Bchaves, false3Bchaves)",
						"split3@true3Bchaves select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split3@true3Bchaves@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split3@true3Bchaves@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select5 derive(CTL_ORIGEM = '11-Estado_Benef_3Bkeys') ~> derivedColumn3",
						"union43A, derivedColumn2 union(byName: true)~> union43A3B",
						"split3@false3Bchaves select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split3@false3Bchaves@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split3@false3Bchaves@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"select6, prqtVLESTADOSBEN lookup(HD_ESTADO_BENEF == HD_ESTADO",
						"     && select6@HD_TGE == prqtVLESTADOSBEN@HD_TGE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup2chaves",
						"lookup2chaves split(ST_LOOKUP == toBoolean('1') && between(TS_ATENDIMENTO_AEG, toDate(DT_INICIAL), toDate(DT_FINAL)),",
						"     disjoint: false) ~> split4@(true2chaves, false2chaves)",
						"split4@true2chaves select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split4@true2chaves@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split4@true2chaves@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"select7 derive(CTL_ORIGEM = '12-Estado_Benef_2keys') ~> derivedColumn4",
						"union43A3B, derivedColumn4 union(byName: true)~> union43A3B2",
						"split4@false2chaves select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE = split4@false2chaves@HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU = split4@false2chaves@HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"union43A3B2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_VL_BENEFICIARIO'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTVLBENEFICIARIO",
						"select8 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_SEM_VL_EST_BEN'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTSEMVLESTBEN"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/j07_TF_AUTORIZACAO_Ext_Union')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO/Primeiros"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTVLBENEFICIARIO"
						},
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTVLESTADOS"
						},
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTVLPRESTADOR"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTEXTRACTVALORES"
						}
					],
					"transformations": [
						{
							"name": "union1"
						},
						{
							"name": "union2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string,",
						"          DT_REF_CARGA as date,",
						"          CTL_DT_EXTRACAO as timestamp,",
						"          TS_ATENDIMENTO_AEG as date,",
						"          TS_AUTORIZACAO_AUT as timestamp,",
						"          TS_AUTORIZACAO_AEG as timestamp,",
						"          DT_INICIAL as timestamp,",
						"          NU_PORTE_ANESTESICO as long,",
						"          NU_PORTE_SALA as long,",
						"          VL_US as double,",
						"          VL_UCO as double,",
						"          VL_FILME as double,",
						"          CTL_ORIGEM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'AUT_VL_BENEFICIARIO') ~> prqtAUTVLBENEFICIARIO",
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string,",
						"          DT_REF_CARGA as date,",
						"          CTL_DT_EXTRACAO as timestamp,",
						"          TS_ATENDIMENTO_AEG as date,",
						"          TS_AUTORIZACAO_AUT as timestamp,",
						"          TS_AUTORIZACAO_AEG as timestamp,",
						"          DT_INICIAL as timestamp,",
						"          NU_PORTE_ANESTESICO as long,",
						"          NU_PORTE_SALA as long,",
						"          VL_US as double,",
						"          VL_UCO as double,",
						"          VL_FILME as double,",
						"          CTL_ORIGEM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'AUT_VL_ESTADOS') ~> prqtAUTVLESTADOS",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'AUT_VL_PRES') ~> prqtAUTVLPRESTADOR",
						"prqtAUTVLBENEFICIARIO, prqtAUTVLESTADOS union(byName: true)~> union1",
						"union1, prqtAUTVLPRESTADOR union(byName: true)~> union2",
						"union2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_EXTRACT_VALORES'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTEXTRACTVALORES"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/j08_TF_AUTORIZACAO_Ext_Anestesista')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO/Primeiros"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTEXTRACTVALORES"
						},
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQRY3VLPRESTANETESISTA"
						},
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQRY6VLESTANESTESISTA"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTEXTRACTANESTESISTA"
						}
					],
					"transformations": [
						{
							"name": "split1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "LKPPrestAnest"
						},
						{
							"name": "split2"
						},
						{
							"name": "select1"
						},
						{
							"name": "union1"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "select2"
						},
						{
							"name": "LKPEstPrestAnest"
						},
						{
							"name": "split3"
						},
						{
							"name": "select3"
						},
						{
							"name": "union2"
						},
						{
							"name": "select4"
						},
						{
							"name": "LKPEstBenefAnest"
						},
						{
							"name": "split4"
						},
						{
							"name": "select5"
						},
						{
							"name": "select6"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "union3"
						},
						{
							"name": "union4"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string,",
						"          DT_REF_CARGA as date,",
						"          CTL_DT_EXTRACAO as timestamp,",
						"          TS_ATENDIMENTO_AEG as date,",
						"          TS_AUTORIZACAO_AUT as timestamp,",
						"          TS_AUTORIZACAO_AEG as timestamp,",
						"          DT_INICIAL as timestamp,",
						"          NU_PORTE_ANESTESICO as long,",
						"          NU_PORTE_SALA as long,",
						"          VL_US as double,",
						"          VL_UCO as double,",
						"          VL_FILME as double,",
						"          CTL_ORIGEM as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'AUT_EXTRACT_VALORES') ~> prqtAUTEXTRACTVALORES",
						"source(output(",
						"          HD_PRESTADOR as integer,",
						"          NU_PORTE_ANESTESICO as long,",
						"          DT_INICIAL as timestamp,",
						"          DT_FINAL as timestamp,",
						"          PERCENTUALAUXILIARANESTESISTA as double,",
						"          QTDUSANESTESISTA as double,",
						"          PERCENTUALPAGTOUS as double,",
						"          VALORUSHONORARIO as double,",
						"          VL_US_ANESTESISTA as double,",
						"          ST_LOOKUP as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QRY3_VL_PREST_ANETESISTA') ~> prqtQRY3VLPRESTANETESISTA",
						"source(output(",
						"          HD_ESTADO as long,",
						"          NU_PORTE_ANESTESICO as long,",
						"          DT_INICIAL as timestamp,",
						"          DT_FINAL as timestamp,",
						"          PERCENTUALAUXILIARANESTESISTA as double,",
						"          QTDUSANESTESISTA as double,",
						"          PERCENTUALPAGTOUS as double,",
						"          VALORUSHONORARIO as double,",
						"          VL_US_ANESTESISTA as double,",
						"          ST_LOOKUP as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QRY6_VL_EST_ANESTESISTA') ~> prqtQRY6VLESTANESTESISTA",
						"prqtAUTEXTRACTVALORES split(CO_GRAU != 6 && CO_GRAU != 16,",
						"     disjoint: false) ~> split1@(TRUE1, FALSE1)",
						"split1@TRUE1 derive(PERCENTUALAUXILIARANESTESISTA = toDouble(0),",
						"          VL_US_ANESTESISTA = toDouble(0)) ~> derivedColumn1",
						"prqtQRY3VLPRESTANETESISTA derive(ST_LOOKUP = toBoolean('1')) ~> derivedColumn2",
						"split1@FALSE1, derivedColumn2 lookup(HD_PREST_EXECUTOR == HD_PRESTADOR",
						"     && split1@FALSE1@NU_PORTE_ANESTESICO == prqtQRY3VLPRESTANETESISTA@NU_PORTE_ANESTESICO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LKPPrestAnest",
						"LKPPrestAnest split(ST_LOOKUP == toBoolean('1') && between(TS_ATENDIMENTO_AEG, toDate(prqtQRY3VLPRESTANETESISTA@DT_INICIAL), toDate(DT_FINAL)) && (VL_US_ANESTESISTA != 0 || !isNull(VL_US_ANESTESISTA)),",
						"     disjoint: false) ~> split2@(TRUE2, FALSE2)",
						"split2@TRUE2 select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL = split2@TRUE2@DT_INICIAL,",
						"          NU_PORTE_ANESTESICO = split2@TRUE2@NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          DT_INICIAL = split2@TRUE2@DT_INICIAL,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1, select1 union(byName: true)~> union1",
						"prqtQRY6VLESTANESTESISTA derive(ST_LOOKUP = toBoolean('1')) ~> derivedColumn3",
						"split2@FALSE2 select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL = split2@FALSE2@DT_INICIAL,",
						"          NU_PORTE_ANESTESICO = split2@FALSE2@NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, derivedColumn3 lookup(HD_ESTADO_PREST_EXEC == HD_ESTADO",
						"     && select2@NU_PORTE_ANESTESICO == prqtQRY6VLESTANESTESISTA@NU_PORTE_ANESTESICO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LKPEstPrestAnest",
						"LKPEstPrestAnest split(ST_LOOKUP == toBoolean('1') && between(TS_ATENDIMENTO_AEG, toDate(prqtQRY6VLESTANESTESISTA@DT_INICIAL), toDate(DT_FINAL)) && (VL_US_ANESTESISTA != 0 || !isNull(VL_US_ANESTESISTA)),",
						"     disjoint: false) ~> split3@(TRUE3, FALSE3)",
						"split3@TRUE3 select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL = split3@TRUE3@DT_INICIAL,",
						"          NU_PORTE_ANESTESICO = split3@TRUE3@NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          DT_INICIAL = split3@TRUE3@DT_INICIAL,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"union1, select3 union(byName: true)~> union2",
						"split3@FALSE3 select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL = split3@FALSE3@DT_INICIAL,",
						"          NU_PORTE_ANESTESICO = split3@FALSE3@NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select4, derivedColumn3 lookup(HD_ESTADO_BENEF == HD_ESTADO",
						"     && select4@NU_PORTE_ANESTESICO == prqtQRY6VLESTANESTESISTA@NU_PORTE_ANESTESICO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LKPEstBenefAnest",
						"LKPEstBenefAnest split(ST_LOOKUP == toBoolean('1') && between(TS_ATENDIMENTO_AEG, toDate(prqtQRY6VLESTANESTESISTA@DT_INICIAL), toDate(DT_FINAL)) && (VL_US_ANESTESISTA != 0 || !isNull(VL_US_ANESTESISTA)),",
						"     disjoint: false) ~> split4@(TRUE4, FALSE4)",
						"split4@TRUE4 select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL = split4@TRUE4@DT_INICIAL,",
						"          NU_PORTE_ANESTESICO = split4@TRUE4@NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          DT_INICIAL = split4@TRUE4@DT_INICIAL,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"split4@FALSE4 select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL = split4@FALSE4@DT_INICIAL,",
						"          NU_PORTE_ANESTESICO = split4@FALSE4@NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"select6 derive(PERCENTUALAUXILIARANESTESISTA = toDouble(0),",
						"          VL_US_ANESTESISTA = toDouble(0)) ~> derivedColumn4",
						"union2, select5 union(byName: true)~> union3",
						"union3, derivedColumn4 union(byName: true)~> union4",
						"union4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['AUT_EXTRACT_VL_ANESTESISTA'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> prqtAUTEXTRACTANESTESISTA"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/j09TF_AUTORIZACAO_Dim')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO/Primeiros"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtAUTEXTRACTVLANESTESISTA"
						},
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "prqtQRY2CARACAUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolAUTORIZEVENTONEGACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDPARTICIPANTE"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDEVENTO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDGRAU"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDPLANOSAUDE"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDTABDOMINIOEVENTO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDSITUACAOAUTORIZEVENTO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDTIPOAUTORIZACAO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDCARACTERISTICAATENDIMENTO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDTRATAMENTOSAUDE"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDCBOS"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDCONSELHOMEDICINA"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDPRESTADOREXEC"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDPRESTADORRECEB"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDPRESTADORFORN"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDPRESTADORSOLAES"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDPRESTADOREXEAES"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDUSUARIO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDUSUARIOAEG"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDUSUARIOAEN"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDTEMPOATENDIMENTO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTDTEMPOAUTORIZ"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTEMPOAUTSOLICIT"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTEMPOEVENTOGERADO"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTEMPOAESSOLICIT"
						},
						{
							"linkedService": {
								"referenceName": "lnk_synprod",
								"type": "LinkedServiceReference"
							},
							"name": "poolTEMPOVALIDADE"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "sortEVENTONEGACAO"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup2"
						},
						{
							"name": "select2"
						},
						{
							"name": "lkpTDPARTICIPANTE"
						},
						{
							"name": "select3"
						},
						{
							"name": "lkpTDEVENTO"
						},
						{
							"name": "select4"
						},
						{
							"name": "lkpTDGRAU"
						},
						{
							"name": "select5"
						},
						{
							"name": "lkpTDPLANOSAUDE"
						},
						{
							"name": "select6"
						},
						{
							"name": "lkpTDTABDOMINIOEVENTO"
						},
						{
							"name": "select7"
						},
						{
							"name": "lkpTDSITUACAOAUTORIZEVENTO"
						},
						{
							"name": "select8"
						},
						{
							"name": "lkpTDTIPOAUTORIZACAO"
						},
						{
							"name": "select9"
						},
						{
							"name": "lkpTDCARACTERISTICAATENDIMENTO"
						},
						{
							"name": "select10"
						},
						{
							"name": "lkpTDTRATAMENTOSAUDE"
						},
						{
							"name": "select11"
						},
						{
							"name": "lkpTDCBOS"
						},
						{
							"name": "select12"
						},
						{
							"name": "lkpTDCONSELHOMEDICINA"
						},
						{
							"name": "select13"
						},
						{
							"name": "lkpTDPRESTADOREXEC"
						},
						{
							"name": "select14"
						},
						{
							"name": "lkpTDPRESTADORRECEB"
						},
						{
							"name": "select15"
						},
						{
							"name": "lkpTDPRESTADORFORN"
						},
						{
							"name": "select16"
						},
						{
							"name": "lkpTDPRESTADORSOLAES"
						},
						{
							"name": "select17"
						},
						{
							"name": "lkpTDPRESTADOREXEAES"
						},
						{
							"name": "select18"
						},
						{
							"name": "lkpTDUSUARIO"
						},
						{
							"name": "select19"
						},
						{
							"name": "lkpTDUSUARIOAEG"
						},
						{
							"name": "select20"
						},
						{
							"name": "lkpTDUSUARIOAEN"
						},
						{
							"name": "select21"
						},
						{
							"name": "derColDATASTDTEMPO"
						},
						{
							"name": "lkpTDTEMPOATENDIMENTO"
						},
						{
							"name": "lkpTDTEMPOAUTORIZ"
						},
						{
							"name": "lkpTEMPOAUTSOLICIT"
						},
						{
							"name": "lkpTEMPOEVENTOGERADO"
						},
						{
							"name": "lkpTEMPOAESSOLICIT"
						},
						{
							"name": "lkpTEMPOVALIDADE"
						},
						{
							"name": "select22"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HD_AUTORIZACAO as long,",
						"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
						"          HD_AUTORIZ_EVENTO_GERADO as integer,",
						"          HD_TGE as integer,",
						"          HD_BENEF as integer,",
						"          HD_ESTADO_BENEF as integer,",
						"          HD_ESTADO_PREST_EXEC as integer,",
						"          HD_PREST_SOLICITANTE as integer,",
						"          CO_PREST_SOLICITANTE as string,",
						"          HD_PREST_EXECUTOR as integer,",
						"          CO_PREST_EXECUTOR as string,",
						"          HD_PREST_FORNECEDOR as integer,",
						"          CO_PREST_FORNECEDOR as string,",
						"          HD_TP_AUTORIZ as integer,",
						"          HD_GRAU as integer,",
						"          CO_GRAU as integer,",
						"          CO_TP_TRATAMENTO as integer,",
						"          CO_OBJ_TRATAMENTO as integer,",
						"          HD_REGIME_ATEND as integer,",
						"          HD_FINALID_ATEND as integer,",
						"          HD_CARAT_ATEND as integer,",
						"          HD_REGIME_INT as integer,",
						"          HD_TP_ATEND as integer,",
						"          HD_TP_INTERN as integer,",
						"          HD_IND_ACIDENTE as integer,",
						"          HD_TP_CONSULTA as integer,",
						"          HD_PLANO as integer,",
						"          HD_CONTRATO as integer,",
						"          HD_USUARIO as integer,",
						"          HD_TIS_TAB_PRECO as integer,",
						"          CO_TIS_TAB_PRECO as string,",
						"          HD_CBOS as integer,",
						"          CO_CBOS as string,",
						"          CO_SITUACAO_AUT as string,",
						"          CO_SITUACAO_AES as string,",
						"          CO_SITUACAO_AEG as string,",
						"          ST_OPCAO_OPME as integer,",
						"          NU_AUTORIZACAO as long,",
						"          DT_AUTORIZACAO_AUT as timestamp,",
						"          DT_SOLICITACAO_AUT as timestamp,",
						"          DT_AUTORIZACAO_AEG as timestamp,",
						"          DT_ATENDIMENTO_AEG as timestamp,",
						"          QTDSOLICITADAORIGINAL as double,",
						"          QTDAUTORIZADA as double,",
						"          QT_NEGADA as double,",
						"          VALORUNITARIOSOLICITADO as double,",
						"          VALORUNITARIONEGOCIADOOPME as double,",
						"          VALORUNITARIOCALCULADOOPME as double,",
						"          VALORUNITARIOAUTORIZADOOPME as double,",
						"          DT_SOLICITACAO_AES as timestamp,",
						"          NU_NIVEL_AUTORIZACAO as integer,",
						"          CO_ORIGEM_AUTORIZACAO as string,",
						"          NO_PROF_SOLICITANTE as string,",
						"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
						"          PK_TD_CONSELHO_Prof_Solic as long,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
						"          HD_PREST_SOLICITANTE_AES as integer,",
						"          CO_PREST_SOLICITANTE_AES as string,",
						"          DS_ORIGEM_SOLICITACAO as string,",
						"          DS_INDICACAO_CLINICA as string,",
						"          DT_VALIDADE_AUT as timestamp,",
						"          HD_PREST_EXECUTOR_AES as integer,",
						"          CO_PREST_EXECUTOR_AES as string,",
						"          TS_GERACAO_AEG as timestamp,",
						"          TS_LIBERACAO_AEG as timestamp,",
						"          HD_USUARIO_GERACAO_AEG as integer,",
						"          ST_HORARIO_ESPECIAL as string,",
						"          CO_ST_SOLICIT as string,",
						"          DT_REF_CARGA as date,",
						"          CTL_DT_EXTRACAO as timestamp,",
						"          TS_ATENDIMENTO_AEG as date,",
						"          TS_AUTORIZACAO_AUT as timestamp,",
						"          TS_AUTORIZACAO_AEG as timestamp,",
						"          DT_INICIAL as timestamp,",
						"          NU_PORTE_ANESTESICO as long,",
						"          NU_PORTE_SALA as long,",
						"          VL_US as double,",
						"          VL_UCO as double,",
						"          VL_FILME as double,",
						"          CTL_ORIGEM as string,",
						"          PERCENTUALAUXILIARANESTESISTA as double,",
						"          VL_US_ANESTESISTA as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'AUT_EXTRACT_VL_ANESTESISTA') ~> prqtAUTEXTRACTVLANESTESISTA",
						"source(output(",
						"          HD_AUTORIZ as integer,",
						"          REGIMEATENDIMENTO as integer,",
						"          CONDICAOATENDIMENTO as integer,",
						"          LOCALATENDIMENTO as integer,",
						"          FINALIDADEATENDIMENTO as integer,",
						"          TIPOAUTORIZACAO as integer,",
						"          TIPOTRATAMENTO as integer,",
						"          OBJETIVOTRATAMENTO as integer,",
						"          ACOMODACAO as integer,",
						"          MOTIVOALTA as integer,",
						"          ST_LOOKUP as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     fileName: 'QRY2_CARAC_AUTORIZACAO') ~> prqtQRY2CARACAUTORIZACAO",
						"source(output(",
						"          EVENTOGERADO as integer,",
						"          REVERTIDOPOR as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT\\n     AEN.EVENTOGERADO AS EVENTOGERADO,\\n     AEN.REVERTIDOPOR AS REVERTIDOPOR\\nFROM PROSTG.SAM_AUTORIZ_EVENTONEGACAO AEN\\nWHERE AEN.REVERTIDOPOR IS NOT NULL\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolAUTORIZEVENTONEGACAO",
						"source(output(",
						"          SK_TD_PARTICIPANTE as decimal(10,0),",
						"          CO_HD_BENEFICIARIO as decimal(10,0),",
						"          DT_NASCIMENTO_BENEFICIARIO as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_PARTICIPANTE, \\n     CO_HD_BENEFICIARIO,\\n     DT_NASCIMENTO_BENEFICIARIO\\n\\nFROM PRODIM.TD_PARTICIPANTE\\n\\nWHERE\\n     ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDPARTICIPANTE",
						"source(output(",
						"          SK_TD_EVENTO as decimal(10,0),",
						"          CO_EVENTO as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_EVENTO AS SK_TD_EVENTO, \\n     CO_EVENTO CO_EVENTO \\n\\nFROM PRODIM.TD_EVENTO\\n\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDEVENTO",
						"source(output(",
						"          SK_TD_GRAU as decimal(10,0),",
						"          CO_GRAU as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_GRAU AS SK_TD_GRAU, \\n     CO_GRAU AS CO_GRAU \\n\\nFROM PRODIM.TD_GRAU\\n\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDGRAU",
						"source(output(",
						"          SK_TD_PLANO_SAUDE as decimal(10,0),",
						"          CO_PLANO_SAUDE as decimal(10,0),",
						"          CO_CONTRATO as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_PLANO_SAUDE AS SK_TD_PLANO_SAUDE, \\n     CO_PLANO_SAUDE AS CO_PLANO_SAUDE,\\n     CO_CONTRATO AS CO_CONTRATO\\n\\nFROM PRODIM.TD_PLANO_SAUDE\\n\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'\\nAND CO_CARENCIA = -1\\nAND CO_MODULO_COBERTURA = -1',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDPLANOSAUDE",
						"source(output(",
						"          SK_TD_TAB_DOMINIO_EVENTO as decimal(10,0),",
						"          HD_DOMINIO as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_TAB_DOMINIO_EVENTO AS SK_TD_TAB_DOMINIO_EVENTO, \\n     HD_DOMINIO  AS HD_DOMINIO \\n\\nFROM PRODIM.TD_TAB_DOMINIO_EVENTO\\n\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDTABDOMINIOEVENTO",
						"source(output(",
						"          SK_TD_SITUACAO_AUTORIZ_EVENTO as decimal(10,0),",
						"          CO_STATUS_AUTORIZ as string,",
						"          CO_SIT_AUTORIZ as string,",
						"          CO_SIT_EVENTO_SOLICIT as string,",
						"          CO_SIT_EVENTO_GERADO as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_SITUACAO_AUTORIZ_EVENTO  AS SK_TD_SITUACAO_AUTORIZ_EVENTO,\\n     CO_STATUS_AUTORIZ AS CO_STATUS_AUTORIZ, \\n     CO_SIT_AUTORIZ AS CO_SIT_AUTORIZ, \\n     CO_SIT_EVENTO_SOLICIT AS CO_SIT_EVENTO_SOLICIT, \\n     CO_SIT_EVENTO_GERADO AS CO_SIT_EVENTO_GERADO\\n\\nFROM PRODIM.TD_SITUACAO_AUTORIZ_EVENTO\\n\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDSITUACAOAUTORIZEVENTO",
						"source(output(",
						"          SK_TD_TIPO_AUTORIZACAO as decimal(10,0),",
						"          HD_TIPO_AUTORIZACAO as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_TIPO_AUTORIZACAO AS SK_TD_TIPO_AUTORIZACAO, \\n     HD_TIPO_AUTORIZACAO AS HD_TIPO_AUTORIZACAO \\n\\nFROM PRODIM.TD_TIPO_AUTORIZACAO\\n\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDTIPOAUTORIZACAO",
						"source(output(",
						"          SK_TD_CARACTERISTICA_ATENDIM as decimal(10,0),",
						"          CO_PROGRAMA_CASSI as decimal(10,0),",
						"          CO_CARATER_ATENDIMENTO as decimal(10,0),",
						"          CO_REGIME_INTERNACAO as decimal(10,0),",
						"          CO_TIPO_ATENDIMENTO as decimal(10,0),",
						"          CO_TIPO_INTERNACAO as decimal(10,0),",
						"          CO_INDICADOR_ACIDENTE as decimal(10,0),",
						"          CO_TIPO_CONSULTA as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT SK_TD_CARACTERISTICA_ATENDIM AS SK_TD_CARACTERISTICA_ATENDIM\\n      ,CO_PROGRAMA_CASSI AS CO_PROGRAMA_CASSI\\n      ,CO_CARATER_ATENDIMENTO AS CO_CARATER_ATENDIMENTO\\n      ,CO_REGIME_INTERNACAO AS CO_REGIME_INTERNACAO\\n      ,CO_TIPO_ATENDIMENTO AS CO_TIPO_ATENDIMENTO\\n      ,CO_TIPO_INTERNACAO AS CO_TIPO_INTERNACAO\\n      ,CO_INDICADOR_ACIDENTE AS CO_INDICADOR_ACIDENTE\\n      ,CO_TIPO_CONSULTA AS CO_TIPO_CONSULTA\\n  FROM PRODIM.TD_CARACTERISTICA_ATENDIMENTO',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDCARACTERISTICAATENDIMENTO",
						"source(output(",
						"          SK_TD_TRATAMENTO_SAUDE as decimal(10,0),",
						"          CO_TIPO_TRATAMENTO as decimal(10,0),",
						"          CO_OBJETIVO_TRATAMENTO as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_TRATAMENTO_SAUDE AS SK_TD_TRATAMENTO_SAUDE, \\n     CO_TIPO_TRATAMENTO AS CO_TIPO_TRATAMENTO,\\n     CO_OBJETIVO_TRATAMENTO AS CO_OBJETIVO_TRATAMENTO\\n\\nFROM PRODIM.TD_TRATAMENTO_SAUDE\\n\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDTRATAMENTOSAUDE",
						"source(output(",
						"          SK_TD_CBOS as decimal(10,0),",
						"          CO_CBOS as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_CBOS AS SK_TD_CBOS, \\n     CO_CBOS AS CO_CBOS  \\n\\nFROM PRODIM.TD_CBOS\\n\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDCBOS",
						"source(output(",
						"          SK_TD_CONSELHO_MEDICINA as decimal(10,0),",
						"          CO_CONSELHO as decimal(10,0),",
						"          CO_ESTADO as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_CONSELHO_MEDICINA AS SK_TD_CONSELHO_MEDICINA, \\n     CO_CONSELHO AS CO_CONSELHO,\\n     CO_ESTADO AS CO_ESTADO\\n\\nFROM PRODIM.TD_CONSELHO_MEDICINA\\n\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDCONSELHOMEDICINA",
						"source(output(",
						"          SK_TD_PRESTADOR_EXECUTANTE as decimal(10,0),",
						"          CO_PRESTADOR as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n    SK_TD_PRESTADOR AS SK_TD_PRESTADOR_EXECUTANTE, \\n    CO_PRESTADOR AS CO_PRESTADOR\\n\\nFROM PRODIM.TD_PRESTADOR\\n\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDPRESTADOREXEC",
						"source(output(",
						"          SK_TD_PRESTADOR_RECEBEDOR as decimal(10,0),",
						"          CO_PRESTADOR as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n    SK_TD_PRESTADOR AS SK_TD_PRESTADOR_RECEBEDOR, \\n    CO_PRESTADOR AS CO_PRESTADOR\\n\\nFROM PRODIM.TD_PRESTADOR\\n\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDPRESTADORRECEB",
						"source(output(",
						"          SK_TD_PRESTADOR_FORNECEDOR as decimal(10,0),",
						"          CO_PRESTADOR as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n    SK_TD_PRESTADOR AS SK_TD_PRESTADOR_FORNECEDOR, \\n    CO_PRESTADOR AS CO_PRESTADOR\\n\\nFROM PRODIM.TD_PRESTADOR\\n\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDPRESTADORFORN",
						"source(output(",
						"          SK_TD_PRESTADOR_AES as decimal(10,0),",
						"          CO_PRESTADOR as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n    SK_TD_PRESTADOR AS SK_TD_PRESTADOR_AES, \\n    CO_PRESTADOR AS CO_PRESTADOR\\n\\nFROM PRODIM.TD_PRESTADOR\\n\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDPRESTADORSOLAES",
						"source(output(",
						"          SK_TD_PRESTADOR_EXEC_AES as decimal(10,0),",
						"          CO_PRESTADOR as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n    SK_TD_PRESTADOR AS SK_TD_PRESTADOR_EXEC_AES, \\n    CO_PRESTADOR AS CO_PRESTADOR\\n\\nFROM PRODIM.TD_PRESTADOR\\n\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDPRESTADOREXEAES",
						"source(output(",
						"          SK_TD_USUARIO as decimal(10,0),",
						"          CO_HD_USUARIO as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_USUARIO AS SK_TD_USUARIO, \\n     CO_HD_USUARIO AS CO_HD_USUARIO \\n\\nFROM PRODIM.TD_USUARIO\\n\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDUSUARIO",
						"source(output(",
						"          SK_TD_USUARIO_AEG as decimal(10,0),",
						"          CO_HD_USUARIO as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_USUARIO AS SK_TD_USUARIO_AEG, \\n     CO_HD_USUARIO AS CO_HD_USUARIO \\n\\nFROM PRODIM.TD_USUARIO\\n\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDUSUARIOAEG",
						"source(output(",
						"          SK_TD_USUARIO_AEN as decimal(10,0),",
						"          CO_HD_USUARIO as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_USUARIO AS SK_TD_USUARIO_AEN, \\n     CO_HD_USUARIO as CO_HD_USUARIO \\n\\nFROM PRODIM.TD_USUARIO\\n\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDUSUARIOAEN",
						"source(output(",
						"          SK_TD_TEMPO_ATENDIMENTO as decimal(10,0),",
						"          PK_GRUPO_HIERARQUIA as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_TEMPO AS SK_TD_TEMPO_ATENDIMENTO, \\n     PK_GRUPO_HIERARQUIA \\n\\nFROM  PRODIM.TD_TEMPO\\n\\nWHERE\\n     ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDTEMPOATENDIMENTO",
						"source(output(",
						"          SK_TD_TEMPO_AUTORIZ as decimal(10,0),",
						"          PK_GRUPO_HIERARQUIA as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_TEMPO AS SK_TD_TEMPO_AUTORIZ, \\n     PK_GRUPO_HIERARQUIA AS PK_GRUPO_HIERARQUIA \\n\\nFROM  PRODIM.TD_TEMPO\\n\\nWHERE\\n     ST_REGISTRO_CORRENTE = \\'S\\'\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTDTEMPOAUTORIZ",
						"source(output(",
						"          SK_TD_TEMPO_AUT_SOLICIT as decimal(10,0),",
						"          PK_GRUPO_HIERARQUIA as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_TEMPO AS SK_TD_TEMPO_AUT_SOLICIT, \\n     PK_GRUPO_HIERARQUIA AS PK_GRUPO_HIERARQUIA \\n\\nFROM  PRODIM.TD_TEMPO\\n\\nWHERE\\n     ST_REGISTRO_CORRENTE = \\'S\\'\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTEMPOAUTSOLICIT",
						"source(output(",
						"          SK_TD_TEMPO_EVENTO_GERADO as decimal(10,0),",
						"          PK_GRUPO_HIERARQUIA as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_TEMPO AS SK_TD_TEMPO_EVENTO_GERADO, \\n     PK_GRUPO_HIERARQUIA AS PK_GRUPO_HIERARQUIA \\n\\nFROM  PRODIM.TD_TEMPO\\n\\nWHERE\\n     ST_REGISTRO_CORRENTE = \\'S\\'',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTEMPOEVENTOGERADO",
						"source(output(",
						"          SK_TD_TEMPO_AES_SOLICIT as decimal(10,0),",
						"          PK_GRUPO_HIERARQUIA as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_TEMPO AS SK_TD_TEMPO_AES_SOLICIT, \\n     PK_GRUPO_HIERARQUIA AS PK_GRUPO_HIERARQUIA \\n\\nFROM  PRODIM.TD_TEMPO\\n\\nWHERE\\n     ST_REGISTRO_CORRENTE = \\'S\\'\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTEMPOAESSOLICIT",
						"source(output(",
						"          SK_TD_TEMPO_VALIDADE as decimal(10,0),",
						"          PK_GRUPO_HIERARQUIA as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'synapseanalytics',",
						"     query: 'SELECT \\n     SK_TD_TEMPO AS SK_TD_TEMPO_VALIDADE, \\n     PK_GRUPO_HIERARQUIA AS PK_GRUPO_HIERARQUIA \\n\\nFROM  PRODIM.TD_TEMPO\\n\\nWHERE\\n     ST_REGISTRO_CORRENTE = \\'S\\'\\n',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     staged: true) ~> poolTEMPOVALIDADE",
						"prqtAUTEXTRACTVLANESTESISTA, prqtQRY2CARACAUTORIZACAO lookup(HD_AUTORIZACAO == HD_AUTORIZ,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"poolAUTORIZEVENTONEGACAO sort(desc(EVENTOGERADO, true)) ~> sortEVENTONEGACAO",
						"lookup1 select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, sortEVENTONEGACAO lookup(HD_AUTORIZ_EVENTO_GERADO == EVENTOGERADO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup2",
						"lookup2 select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA,",
						"          REVERTIDOPOR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, poolTDPARTICIPANTE lookup(HD_BENEF == CO_HD_BENEFICIARIO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDPARTICIPANTE",
						"lkpTDPARTICIPANTE select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA,",
						"          REVERTIDOPOR,",
						"          SK_TD_PARTICIPANTE,",
						"          DT_NASCIMENTO_BENEFICIARIO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3, poolTDEVENTO lookup(HD_TGE == CO_EVENTO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDEVENTO",
						"lkpTDEVENTO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA,",
						"          REVERTIDOPOR,",
						"          SK_TD_PARTICIPANTE,",
						"          DT_NASCIMENTO_BENEFICIARIO,",
						"          SK_TD_EVENTO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select4, poolTDGRAU lookup(select4@CO_GRAU == poolTDGRAU@CO_GRAU,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDGRAU",
						"lkpTDGRAU select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU = select4@CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA,",
						"          REVERTIDOPOR,",
						"          SK_TD_PARTICIPANTE,",
						"          DT_NASCIMENTO_BENEFICIARIO,",
						"          SK_TD_EVENTO,",
						"          SK_TD_GRAU",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select5, poolTDPLANOSAUDE lookup(HD_PLANO == CO_PLANO_SAUDE",
						"     && HD_CONTRATO == CO_CONTRATO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDPLANOSAUDE",
						"lkpTDPLANOSAUDE select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA,",
						"          REVERTIDOPOR,",
						"          SK_TD_PARTICIPANTE,",
						"          DT_NASCIMENTO_BENEFICIARIO,",
						"          SK_TD_EVENTO,",
						"          SK_TD_GRAU,",
						"          SK_TD_PLANO_SAUDE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"select6, poolTDTABDOMINIOEVENTO lookup(HD_TIS_TAB_PRECO == HD_DOMINIO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDTABDOMINIOEVENTO",
						"lkpTDTABDOMINIOEVENTO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA,",
						"          REVERTIDOPOR,",
						"          SK_TD_PARTICIPANTE,",
						"          DT_NASCIMENTO_BENEFICIARIO,",
						"          SK_TD_EVENTO,",
						"          SK_TD_GRAU,",
						"          SK_TD_PLANO_SAUDE,",
						"          SK_TD_TAB_DOMINIO_EVENTO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"select7, poolTDSITUACAOAUTORIZEVENTO lookup(CO_ST_SOLICIT == CO_STATUS_AUTORIZ",
						"     && CO_SITUACAO_AUT == CO_SIT_AUTORIZ",
						"     && CO_SITUACAO_AES == CO_SIT_EVENTO_SOLICIT",
						"     && CO_SITUACAO_AEG == CO_SIT_EVENTO_GERADO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDSITUACAOAUTORIZEVENTO",
						"lkpTDSITUACAOAUTORIZEVENTO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA,",
						"          REVERTIDOPOR,",
						"          SK_TD_PARTICIPANTE,",
						"          DT_NASCIMENTO_BENEFICIARIO,",
						"          SK_TD_EVENTO,",
						"          SK_TD_GRAU,",
						"          SK_TD_PLANO_SAUDE,",
						"          SK_TD_TAB_DOMINIO_EVENTO,",
						"          SK_TD_SITUACAO_AUTORIZ_EVENTO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"select8, poolTDTIPOAUTORIZACAO lookup(HD_TP_AUTORIZ == HD_TIPO_AUTORIZACAO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDTIPOAUTORIZACAO",
						"lkpTDTIPOAUTORIZACAO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA,",
						"          REVERTIDOPOR,",
						"          SK_TD_PARTICIPANTE,",
						"          DT_NASCIMENTO_BENEFICIARIO,",
						"          SK_TD_EVENTO,",
						"          SK_TD_GRAU,",
						"          SK_TD_PLANO_SAUDE,",
						"          SK_TD_TAB_DOMINIO_EVENTO,",
						"          SK_TD_SITUACAO_AUTORIZ_EVENTO,",
						"          SK_TD_TIPO_AUTORIZACAO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"select9, poolTDCARACTERISTICAATENDIMENTO lookup(HD_FINALID_ATEND == CO_PROGRAMA_CASSI",
						"     && HD_CARAT_ATEND == CO_CARATER_ATENDIMENTO",
						"     && HD_REGIME_INT == CO_REGIME_INTERNACAO",
						"     && HD_TP_ATEND == CO_TIPO_ATENDIMENTO",
						"     && HD_TP_INTERN == CO_TIPO_INTERNACAO",
						"     && HD_IND_ACIDENTE == CO_INDICADOR_ACIDENTE",
						"     && HD_TP_CONSULTA == CO_TIPO_CONSULTA,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDCARACTERISTICAATENDIMENTO",
						"lkpTDCARACTERISTICAATENDIMENTO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA,",
						"          REVERTIDOPOR,",
						"          SK_TD_PARTICIPANTE,",
						"          DT_NASCIMENTO_BENEFICIARIO,",
						"          SK_TD_EVENTO,",
						"          SK_TD_GRAU,",
						"          SK_TD_PLANO_SAUDE,",
						"          SK_TD_TAB_DOMINIO_EVENTO,",
						"          SK_TD_SITUACAO_AUTORIZ_EVENTO,",
						"          SK_TD_TIPO_AUTORIZACAO,",
						"          SK_TD_CARACTERISTICA_ATENDIM",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"select10, poolTDTRATAMENTOSAUDE lookup(CO_TP_TRATAMENTO == CO_TIPO_TRATAMENTO",
						"     && CO_OBJ_TRATAMENTO == CO_OBJETIVO_TRATAMENTO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDTRATAMENTOSAUDE",
						"lkpTDTRATAMENTOSAUDE select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA,",
						"          REVERTIDOPOR,",
						"          SK_TD_PARTICIPANTE,",
						"          DT_NASCIMENTO_BENEFICIARIO,",
						"          SK_TD_EVENTO,",
						"          SK_TD_GRAU,",
						"          SK_TD_PLANO_SAUDE,",
						"          SK_TD_TAB_DOMINIO_EVENTO,",
						"          SK_TD_SITUACAO_AUTORIZ_EVENTO,",
						"          SK_TD_TIPO_AUTORIZACAO,",
						"          SK_TD_CARACTERISTICA_ATENDIM,",
						"          SK_TD_TRATAMENTO_SAUDE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"select11, poolTDCBOS lookup(select11@CO_CBOS == poolTDCBOS@CO_CBOS,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDCBOS",
						"lkpTDCBOS select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS = select11@CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA,",
						"          REVERTIDOPOR,",
						"          SK_TD_PARTICIPANTE,",
						"          DT_NASCIMENTO_BENEFICIARIO,",
						"          SK_TD_EVENTO,",
						"          SK_TD_GRAU,",
						"          SK_TD_PLANO_SAUDE,",
						"          SK_TD_TAB_DOMINIO_EVENTO,",
						"          SK_TD_SITUACAO_AUTORIZ_EVENTO,",
						"          SK_TD_TIPO_AUTORIZACAO,",
						"          SK_TD_CARACTERISTICA_ATENDIM,",
						"          SK_TD_TRATAMENTO_SAUDE,",
						"          SK_TD_CBOS",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select12",
						"select12, poolTDCONSELHOMEDICINA lookup(PK_TD_CONSELHO_Prof_Solic == CO_CONSELHO",
						"     && PK_TD_CONSELHO_Uf_Prof_Solic == CO_ESTADO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDCONSELHOMEDICINA",
						"lkpTDCONSELHOMEDICINA select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA,",
						"          REVERTIDOPOR,",
						"          SK_TD_PARTICIPANTE,",
						"          DT_NASCIMENTO_BENEFICIARIO,",
						"          SK_TD_EVENTO,",
						"          SK_TD_GRAU,",
						"          SK_TD_PLANO_SAUDE,",
						"          SK_TD_TAB_DOMINIO_EVENTO,",
						"          SK_TD_SITUACAO_AUTORIZ_EVENTO,",
						"          SK_TD_TIPO_AUTORIZACAO,",
						"          SK_TD_CARACTERISTICA_ATENDIM,",
						"          SK_TD_TRATAMENTO_SAUDE,",
						"          SK_TD_CBOS,",
						"          SK_TD_CONSELHO_MEDICINA",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select13",
						"select13, poolTDPRESTADOREXEC lookup(CO_PREST_EXECUTOR == CO_PRESTADOR,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDPRESTADOREXEC",
						"lkpTDPRESTADOREXEC select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA,",
						"          REVERTIDOPOR,",
						"          SK_TD_PARTICIPANTE,",
						"          DT_NASCIMENTO_BENEFICIARIO,",
						"          SK_TD_EVENTO,",
						"          SK_TD_GRAU,",
						"          SK_TD_PLANO_SAUDE,",
						"          SK_TD_TAB_DOMINIO_EVENTO,",
						"          SK_TD_SITUACAO_AUTORIZ_EVENTO,",
						"          SK_TD_TIPO_AUTORIZACAO,",
						"          SK_TD_CARACTERISTICA_ATENDIM,",
						"          SK_TD_TRATAMENTO_SAUDE,",
						"          SK_TD_CBOS,",
						"          SK_TD_CONSELHO_MEDICINA,",
						"          SK_TD_PRESTADOR_EXECUTANTE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select14",
						"select14, poolTDPRESTADORRECEB lookup(CO_PREST_SOLICITANTE == CO_PRESTADOR,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDPRESTADORRECEB",
						"lkpTDPRESTADORRECEB select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA,",
						"          REVERTIDOPOR,",
						"          SK_TD_PARTICIPANTE,",
						"          DT_NASCIMENTO_BENEFICIARIO,",
						"          SK_TD_EVENTO,",
						"          SK_TD_GRAU,",
						"          SK_TD_PLANO_SAUDE,",
						"          SK_TD_TAB_DOMINIO_EVENTO,",
						"          SK_TD_SITUACAO_AUTORIZ_EVENTO,",
						"          SK_TD_TIPO_AUTORIZACAO,",
						"          SK_TD_CARACTERISTICA_ATENDIM,",
						"          SK_TD_TRATAMENTO_SAUDE,",
						"          SK_TD_CBOS,",
						"          SK_TD_CONSELHO_MEDICINA,",
						"          SK_TD_PRESTADOR_EXECUTANTE,",
						"          SK_TD_PRESTADOR_RECEBEDOR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select15",
						"select15, poolTDPRESTADORFORN lookup(CO_PREST_FORNECEDOR == CO_PRESTADOR,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDPRESTADORFORN",
						"lkpTDPRESTADORFORN select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA,",
						"          REVERTIDOPOR,",
						"          SK_TD_PARTICIPANTE,",
						"          DT_NASCIMENTO_BENEFICIARIO,",
						"          SK_TD_EVENTO,",
						"          SK_TD_GRAU,",
						"          SK_TD_PLANO_SAUDE,",
						"          SK_TD_TAB_DOMINIO_EVENTO,",
						"          SK_TD_SITUACAO_AUTORIZ_EVENTO,",
						"          SK_TD_TIPO_AUTORIZACAO,",
						"          SK_TD_CARACTERISTICA_ATENDIM,",
						"          SK_TD_TRATAMENTO_SAUDE,",
						"          SK_TD_CBOS,",
						"          SK_TD_CONSELHO_MEDICINA,",
						"          SK_TD_PRESTADOR_EXECUTANTE,",
						"          SK_TD_PRESTADOR_RECEBEDOR,",
						"          SK_TD_PRESTADOR_FORNECEDOR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select16",
						"select16, poolTDPRESTADORSOLAES lookup(CO_PREST_SOLICITANTE_AES == CO_PRESTADOR,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDPRESTADORSOLAES",
						"lkpTDPRESTADORSOLAES select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA,",
						"          REVERTIDOPOR,",
						"          SK_TD_PARTICIPANTE,",
						"          DT_NASCIMENTO_BENEFICIARIO,",
						"          SK_TD_EVENTO,",
						"          SK_TD_GRAU,",
						"          SK_TD_PLANO_SAUDE,",
						"          SK_TD_TAB_DOMINIO_EVENTO,",
						"          SK_TD_SITUACAO_AUTORIZ_EVENTO,",
						"          SK_TD_TIPO_AUTORIZACAO,",
						"          SK_TD_CARACTERISTICA_ATENDIM,",
						"          SK_TD_TRATAMENTO_SAUDE,",
						"          SK_TD_CBOS,",
						"          SK_TD_CONSELHO_MEDICINA,",
						"          SK_TD_PRESTADOR_EXECUTANTE,",
						"          SK_TD_PRESTADOR_RECEBEDOR,",
						"          SK_TD_PRESTADOR_FORNECEDOR,",
						"          SK_TD_PRESTADOR_AES",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select17",
						"select17, poolTDPRESTADOREXEAES lookup(CO_PREST_EXECUTOR_AES == CO_PRESTADOR,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDPRESTADOREXEAES",
						"lkpTDPRESTADOREXEAES select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA,",
						"          REVERTIDOPOR,",
						"          SK_TD_PARTICIPANTE,",
						"          DT_NASCIMENTO_BENEFICIARIO,",
						"          SK_TD_EVENTO,",
						"          SK_TD_GRAU,",
						"          SK_TD_PLANO_SAUDE,",
						"          SK_TD_TAB_DOMINIO_EVENTO,",
						"          SK_TD_SITUACAO_AUTORIZ_EVENTO,",
						"          SK_TD_TIPO_AUTORIZACAO,",
						"          SK_TD_CARACTERISTICA_ATENDIM,",
						"          SK_TD_TRATAMENTO_SAUDE,",
						"          SK_TD_CBOS,",
						"          SK_TD_CONSELHO_MEDICINA,",
						"          SK_TD_PRESTADOR_EXECUTANTE,",
						"          SK_TD_PRESTADOR_RECEBEDOR,",
						"          SK_TD_PRESTADOR_FORNECEDOR,",
						"          SK_TD_PRESTADOR_AES,",
						"          SK_TD_PRESTADOR_EXEC_AES",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select18",
						"select18, poolTDUSUARIO lookup(HD_USUARIO == CO_HD_USUARIO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDUSUARIO",
						"lkpTDUSUARIO select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA,",
						"          REVERTIDOPOR,",
						"          SK_TD_PARTICIPANTE,",
						"          DT_NASCIMENTO_BENEFICIARIO,",
						"          SK_TD_EVENTO,",
						"          SK_TD_GRAU,",
						"          SK_TD_PLANO_SAUDE,",
						"          SK_TD_TAB_DOMINIO_EVENTO,",
						"          SK_TD_SITUACAO_AUTORIZ_EVENTO,",
						"          SK_TD_TIPO_AUTORIZACAO,",
						"          SK_TD_CARACTERISTICA_ATENDIM,",
						"          SK_TD_TRATAMENTO_SAUDE,",
						"          SK_TD_CBOS,",
						"          SK_TD_CONSELHO_MEDICINA,",
						"          SK_TD_PRESTADOR_EXECUTANTE,",
						"          SK_TD_PRESTADOR_RECEBEDOR,",
						"          SK_TD_PRESTADOR_FORNECEDOR,",
						"          SK_TD_PRESTADOR_AES,",
						"          SK_TD_PRESTADOR_EXEC_AES,",
						"          SK_TD_USUARIO",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select19",
						"select19, poolTDUSUARIOAEG lookup(HD_USUARIO_GERACAO_AEG == CO_HD_USUARIO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDUSUARIOAEG",
						"lkpTDUSUARIOAEG select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA,",
						"          REVERTIDOPOR,",
						"          SK_TD_PARTICIPANTE,",
						"          DT_NASCIMENTO_BENEFICIARIO,",
						"          SK_TD_EVENTO,",
						"          SK_TD_GRAU,",
						"          SK_TD_PLANO_SAUDE,",
						"          SK_TD_TAB_DOMINIO_EVENTO,",
						"          SK_TD_SITUACAO_AUTORIZ_EVENTO,",
						"          SK_TD_TIPO_AUTORIZACAO,",
						"          SK_TD_CARACTERISTICA_ATENDIM,",
						"          SK_TD_TRATAMENTO_SAUDE,",
						"          SK_TD_CBOS,",
						"          SK_TD_CONSELHO_MEDICINA,",
						"          SK_TD_PRESTADOR_EXECUTANTE,",
						"          SK_TD_PRESTADOR_RECEBEDOR,",
						"          SK_TD_PRESTADOR_FORNECEDOR,",
						"          SK_TD_PRESTADOR_AES,",
						"          SK_TD_PRESTADOR_EXEC_AES,",
						"          SK_TD_USUARIO,",
						"          SK_TD_USUARIO_AEG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select20",
						"select20, poolTDUSUARIOAEN lookup(REVERTIDOPOR == CO_HD_USUARIO,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDUSUARIOAEN",
						"lkpTDUSUARIOAEN select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA,",
						"          REVERTIDOPOR,",
						"          SK_TD_PARTICIPANTE,",
						"          DT_NASCIMENTO_BENEFICIARIO,",
						"          SK_TD_EVENTO,",
						"          SK_TD_GRAU,",
						"          SK_TD_PLANO_SAUDE,",
						"          SK_TD_TAB_DOMINIO_EVENTO,",
						"          SK_TD_SITUACAO_AUTORIZ_EVENTO,",
						"          SK_TD_TIPO_AUTORIZACAO,",
						"          SK_TD_CARACTERISTICA_ATENDIM,",
						"          SK_TD_TRATAMENTO_SAUDE,",
						"          SK_TD_CBOS,",
						"          SK_TD_CONSELHO_MEDICINA,",
						"          SK_TD_PRESTADOR_EXECUTANTE,",
						"          SK_TD_PRESTADOR_RECEBEDOR,",
						"          SK_TD_PRESTADOR_FORNECEDOR,",
						"          SK_TD_PRESTADOR_AES,",
						"          SK_TD_PRESTADOR_EXEC_AES,",
						"          SK_TD_USUARIO,",
						"          SK_TD_USUARIO_AEG,",
						"          SK_TD_USUARIO_AEN",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select21",
						"select21 derive(PK_DT_ATENDIMENTO = substring(toString(DT_ATENDIMENTO_AEG), 1, 10),",
						"          PK_TEMPO_AUTORIZ = substring(toString(DT_AUTORIZACAO_AUT), 1, 10),",
						"          PK_TEMPO_AUT_SOLICT = substring(toString(DT_SOLICITACAO_AUT), 1, 10),",
						"          PK_TEMPO_EVENTO_GERADO = substring(toString(DT_AUTORIZACAO_AEG), 1, 10),",
						"          PK_TEMPO_AES_SOLICIT = substring(toString(DT_SOLICITACAO_AES), 1, 10),",
						"          PK_TEMPO_VALIDADE = substring(toString(DT_VALIDADE_AUT), 1, 10)) ~> derColDATASTDTEMPO",
						"derColDATASTDTEMPO, poolTDTEMPOATENDIMENTO lookup(PK_DT_ATENDIMENTO == PK_GRUPO_HIERARQUIA,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDTEMPOATENDIMENTO",
						"lkpTDTEMPOATENDIMENTO, poolTDTEMPOAUTORIZ lookup(PK_TEMPO_AUTORIZ == poolTDTEMPOAUTORIZ@PK_GRUPO_HIERARQUIA,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTDTEMPOAUTORIZ",
						"lkpTDTEMPOAUTORIZ, poolTEMPOAUTSOLICIT lookup(PK_TEMPO_AUT_SOLICT == poolTEMPOAUTSOLICIT@PK_GRUPO_HIERARQUIA,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTEMPOAUTSOLICIT",
						"lkpTEMPOAUTSOLICIT, poolTEMPOEVENTOGERADO lookup(PK_TEMPO_EVENTO_GERADO == poolTEMPOEVENTOGERADO@PK_GRUPO_HIERARQUIA,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTEMPOEVENTOGERADO",
						"lkpTEMPOEVENTOGERADO, poolTEMPOAESSOLICIT lookup(PK_TEMPO_AES_SOLICIT == poolTEMPOAESSOLICIT@PK_GRUPO_HIERARQUIA,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTEMPOAESSOLICIT",
						"lkpTEMPOAESSOLICIT, poolTEMPOVALIDADE lookup(PK_TEMPO_VALIDADE == poolTEMPOVALIDADE@PK_GRUPO_HIERARQUIA,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkpTEMPOVALIDADE",
						"lkpTEMPOVALIDADE select(mapColumn(",
						"          HD_AUTORIZACAO,",
						"          HD_AUTORIZ_EVENTO_SOLICIT,",
						"          HD_AUTORIZ_EVENTO_GERADO,",
						"          HD_TGE,",
						"          HD_BENEF,",
						"          HD_ESTADO_BENEF,",
						"          HD_ESTADO_PREST_EXEC,",
						"          HD_PREST_SOLICITANTE,",
						"          CO_PREST_SOLICITANTE,",
						"          HD_PREST_EXECUTOR,",
						"          CO_PREST_EXECUTOR,",
						"          HD_PREST_FORNECEDOR,",
						"          CO_PREST_FORNECEDOR,",
						"          HD_TP_AUTORIZ,",
						"          HD_GRAU,",
						"          CO_GRAU,",
						"          CO_TP_TRATAMENTO,",
						"          CO_OBJ_TRATAMENTO,",
						"          HD_REGIME_ATEND,",
						"          HD_FINALID_ATEND,",
						"          HD_CARAT_ATEND,",
						"          HD_REGIME_INT,",
						"          HD_TP_ATEND,",
						"          HD_TP_INTERN,",
						"          HD_IND_ACIDENTE,",
						"          HD_TP_CONSULTA,",
						"          HD_PLANO,",
						"          HD_CONTRATO,",
						"          HD_USUARIO,",
						"          HD_TIS_TAB_PRECO,",
						"          CO_TIS_TAB_PRECO,",
						"          HD_CBOS,",
						"          CO_CBOS,",
						"          CO_SITUACAO_AUT,",
						"          CO_SITUACAO_AES,",
						"          CO_SITUACAO_AEG,",
						"          ST_OPCAO_OPME,",
						"          NU_AUTORIZACAO,",
						"          DT_AUTORIZACAO_AUT,",
						"          DT_SOLICITACAO_AUT,",
						"          DT_AUTORIZACAO_AEG,",
						"          DT_ATENDIMENTO_AEG,",
						"          QTDSOLICITADAORIGINAL,",
						"          QTDAUTORIZADA,",
						"          QT_NEGADA,",
						"          VALORUNITARIOSOLICITADO,",
						"          VALORUNITARIONEGOCIADOOPME,",
						"          VALORUNITARIOCALCULADOOPME,",
						"          VALORUNITARIOAUTORIZADOOPME,",
						"          DT_SOLICITACAO_AES,",
						"          NU_NIVEL_AUTORIZACAO,",
						"          CO_ORIGEM_AUTORIZACAO,",
						"          NO_PROF_SOLICITANTE,",
						"          NU_CRM_PROF_SOLICITANTE_AUT,",
						"          PK_TD_CONSELHO_Prof_Solic,",
						"          PK_TD_CONSELHO_Uf_Prof_Solic,",
						"          HD_PREST_SOLICITANTE_AES,",
						"          CO_PREST_SOLICITANTE_AES,",
						"          DS_ORIGEM_SOLICITACAO,",
						"          DS_INDICACAO_CLINICA,",
						"          DT_VALIDADE_AUT,",
						"          HD_PREST_EXECUTOR_AES,",
						"          CO_PREST_EXECUTOR_AES,",
						"          TS_GERACAO_AEG,",
						"          TS_LIBERACAO_AEG,",
						"          HD_USUARIO_GERACAO_AEG,",
						"          ST_HORARIO_ESPECIAL,",
						"          CO_ST_SOLICIT,",
						"          DT_REF_CARGA,",
						"          CTL_DT_EXTRACAO,",
						"          TS_ATENDIMENTO_AEG,",
						"          TS_AUTORIZACAO_AUT,",
						"          TS_AUTORIZACAO_AEG,",
						"          DT_INICIAL,",
						"          NU_PORTE_ANESTESICO,",
						"          NU_PORTE_SALA,",
						"          VL_US,",
						"          VL_UCO,",
						"          VL_FILME,",
						"          CTL_ORIGEM,",
						"          PERCENTUALAUXILIARANESTESISTA,",
						"          VL_US_ANESTESISTA,",
						"          REGIMEATENDIMENTO,",
						"          CONDICAOATENDIMENTO,",
						"          LOCALATENDIMENTO,",
						"          FINALIDADEATENDIMENTO,",
						"          TIPOAUTORIZACAO,",
						"          TIPOTRATAMENTO,",
						"          OBJETIVOTRATAMENTO,",
						"          ACOMODACAO,",
						"          MOTIVOALTA,",
						"          REVERTIDOPOR,",
						"          SK_TD_PARTICIPANTE,",
						"          DT_NASCIMENTO_BENEFICIARIO,",
						"          SK_TD_EVENTO,",
						"          SK_TD_GRAU,",
						"          SK_TD_PLANO_SAUDE,",
						"          SK_TD_TAB_DOMINIO_EVENTO,",
						"          SK_TD_SITUACAO_AUTORIZ_EVENTO,",
						"          SK_TD_TIPO_AUTORIZACAO,",
						"          SK_TD_CARACTERISTICA_ATENDIM,",
						"          SK_TD_TRATAMENTO_SAUDE,",
						"          SK_TD_CBOS,",
						"          SK_TD_CONSELHO_MEDICINA,",
						"          SK_TD_PRESTADOR_EXECUTANTE,",
						"          SK_TD_PRESTADOR_RECEBEDOR,",
						"          SK_TD_PRESTADOR_FORNECEDOR,",
						"          SK_TD_PRESTADOR_AES,",
						"          SK_TD_PRESTADOR_EXEC_AES,",
						"          SK_TD_USUARIO,",
						"          SK_TD_USUARIO_AEG,",
						"          SK_TD_USUARIO_AEN,",
						"          SK_TD_TEMPO_ATENDIMENTO,",
						"          SK_TD_TEMPO_AUTORIZ,",
						"          SK_TD_TEMPO_AUT_SOLICIT,",
						"          SK_TD_TEMPO_EVENTO_GERADO,",
						"          PK_GRUPO_HIERARQUIA = poolTEMPOEVENTOGERADO@PK_GRUPO_HIERARQUIA,",
						"          SK_TD_TEMPO_AES_SOLICIT,",
						"          SK_TD_TEMPO_VALIDADE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select22",
						"select22 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'testes',",
						"     folderPath: 'parquet',",
						"     partitionFileNames:['VALIDA_AUTORIZACAO'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/wrkcassisynapseworkspace001-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/lnk_synprod')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01 Carga PPTB_OUTLIER_IDATEND_2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "drop table PRODML.PPTB_OUTLIER_IDATEND_2\ngo \n\nIF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'PPTB_OUTLIER_IDATEND_2' AND O.TYPE = 'U' AND S.NAME = 'PROD')\nCREATE TABLE PRODML.PPTB_OUTLIER_IDATEND_2\n\t(\n\t [ANOMESATEND] nvarchar(4000),\n\t [ID_ATEND_BENEF] nvarchar(4000),\n\t [ID_ATEND_PRESTADOR] nvarchar(4000),\n\t [DATAPAGAMENTO] datetime2(7),\n\t [CARTAREMESSA] int,\n\t [TABREGIMEPGTO] int,\n\t [PEG] int,\n\t [SITUACAO] nvarchar(4000),\n\t [CD_PRESTADOR] nvarchar(4000),\n\t [NO_PRESTADOR] nvarchar(4000),\n\t [FISICAJURIDICA] int,\n\t [CD_TIPO_PRESTADOR] int,\n\t [DS_TIPO_PRESTADOR] nvarchar(4000),\n\t [EVENTOIMPORTADO] nvarchar(4000),\n\t [DESCRICAOIMPORTADA] nvarchar(4000),\n\t [DT_ATENDIMENTO] datetime2(7),\n\t [HD_BENEFICIARIO] int,\n\t [MT_BENEF] int,\n\t [SEXO] nvarchar(4000),\n\t [IDADE] int,\n\t [HD_CLASSE_EVENTO] int,\n\t [DS_CLASSE_EVENTO] nvarchar(4000),\n\t [HD_TGE_EVENTO] int,\n\t [ESTRUTURA_EVENTO] nvarchar(4000),\n\t [DS_EVENTO] nvarchar(4000),\n\t [GRAU] int,\n\t [DS_GRAU] nvarchar(4000),\n\t [EVENTO_AUTORIZ] int,\n\t [CBOS_EXECUTANTE] nvarchar(4000),\n\t [CBOS_SOLICITANTE] nvarchar(4000),\n\t [CONSELHOPROFEXECUTANTE] nvarchar(4000),\n\t [CONSELHOPROFEXECUTANTETISS] int,\n\t [CONSELHOPROFSOLICITANTETISS] int,\n\t [NUMEROPROFEXECUTANTE] nvarchar(4000),\n\t [CODIGODESPESA] int,\n\t [VIADEACESSOTISS] numeric(38,18),\n\t [TARGET] nvarchar(4000),\n\t [HDGUIA_GROUP] nvarchar(4000),\n\t [GUIA_GROUP] nvarchar(4000),\n\t [AUTORIZACAO_GROUP] nvarchar(4000),\n\t [CD_TIPO_ATENDIMENTO_GROUP] nvarchar(4000),\n\t [TIPO_ATENDIMENTO_GROUP] nvarchar(4000),\n\t [HD_EVENTO_GROUP] nvarchar(4000),\n\t [REGRA_AUT_GUIA_GROUP] nvarchar(4000),\n\t [MODELO_GUIA_GROUP] nvarchar(4000),\n\t [QTDPAGTO] float,\n\t [QTDGLOSADA] float,\n\t [QTDAPRESENTADA] float,\n\t [VALORAPRESENTADO] float,\n\t [VALORCALCPAGTO] float,\n\t [VALORPAGOORIGINAL] float,\n\t [VALORPAGTO] float,\n\t [VALORGLOSADOORIGINAL] float,\n\t [VALORGLOSADO] float,\n\t [QTDAUTORIZADA] float,\n\t [QTDPAGA] float,\n\t [HD_TGE_EVENTO2] int,\n\t [GRAU2] int,\n\t [QTDPAGTO_mean] float,\n\t [QTDPAGTO_std] float,\n\t [LMSP] float,\n\t [LMSP_EX] float,\n\t [LMSP_99] float,\n\t [LMSP_995] float,\n\t [OUTLIER] int,\n\t [OUTLIER_EX] int,\n\t [OUTLIER_995] int,\n\t [OUTLIER_99] int,\n\t [VLR_CORRETO] float,\n\t [VLR_SAVE] float,\n\t [VLR_CORRETO_EX] float,\n\t [VLR_SAVE_EX] float,\n\t [VLR_CORRETO_99] float,\n\t [VLR_SAVE_99] float,\n\t [VLR_CORRETO_995] float,\n\t [VLR_SAVE_995] float,\n\t [PRESTADOR] nvarchar(4000),\n\t [EVENTO] nvarchar(4000),\n\t [CVIADEACESSOTISS] int\n\t)\nWITH\n\t(\n\tDISTRIBUTION = ROUND_ROBIN,\n\t CLUSTERED COLUMNSTORE INDEX\n\t -- HEAP\n\t)\nGO\n\n--Uncomment the 4 lines below to create a stored procedure for data pipeline orchestration​\n--CREATE PROC bulk_load_PPTB_OUTLIER_IDATEND_2\n--AS\n--BEGIN\nCOPY INTO PRODML.PPTB_OUTLIER_IDATEND_2\n(ANOMESATEND 1, ID_ATEND_BENEF 2, ID_ATEND_PRESTADOR 3, DATAPAGAMENTO 4, CARTAREMESSA 5, TABREGIMEPGTO 6, PEG 7, SITUACAO 8, CD_PRESTADOR 9, NO_PRESTADOR 10, FISICAJURIDICA 11, CD_TIPO_PRESTADOR 12, DS_TIPO_PRESTADOR 13, EVENTOIMPORTADO 14, DESCRICAOIMPORTADA 15, DT_ATENDIMENTO 16, HD_BENEFICIARIO 17, MT_BENEF 18, SEXO 19, IDADE 20, HD_CLASSE_EVENTO 21, DS_CLASSE_EVENTO 22, HD_TGE_EVENTO 23, ESTRUTURA_EVENTO 24, DS_EVENTO 25, GRAU 26, DS_GRAU 27, EVENTO_AUTORIZ 28, CBOS_EXECUTANTE 29, CBOS_SOLICITANTE 30, CONSELHOPROFEXECUTANTE 31, CONSELHOPROFEXECUTANTETISS 32, CONSELHOPROFSOLICITANTETISS 33, NUMEROPROFEXECUTANTE 34, CODIGODESPESA 35, VIADEACESSOTISS 36, TARGET 37, HDGUIA_GROUP 38, GUIA_GROUP 39, AUTORIZACAO_GROUP 40, CD_TIPO_ATENDIMENTO_GROUP 41, TIPO_ATENDIMENTO_GROUP 42, HD_EVENTO_GROUP 43, REGRA_AUT_GUIA_GROUP 44, MODELO_GUIA_GROUP 45, QTDPAGTO 46, QTDGLOSADA 47, QTDAPRESENTADA 48, VALORAPRESENTADO 49, VALORCALCPAGTO 50, VALORPAGOORIGINAL 51, VALORPAGTO 52, VALORGLOSADOORIGINAL 53, VALORGLOSADO 54, QTDAUTORIZADA 55, QTDPAGA 56, HD_TGE_EVENTO2 57, GRAU2 58, QTDPAGTO_mean 59, QTDPAGTO_std 60, LMSP 61, LMSP_EX 62, LMSP_99 63, LMSP_995 64, OUTLIER 65, OUTLIER_EX 66, OUTLIER_995 67, OUTLIER_99 68, VLR_CORRETO 69, VLR_SAVE 70, VLR_CORRETO_EX 71, VLR_SAVE_EX 72, VLR_CORRETO_99 73, VLR_SAVE_99 74, VLR_CORRETO_995 75, VLR_SAVE_995 76, PRESTADOR 77, EVENTO 78, CVIADEACESSOTISS 79)\nFROM 'https://stgcassigsmadatalake02.dfs.core.windows.net/data/raw-data/PPTB_OUTLIER_IDATEND_2'\nWITH\n(\n\tFILE_TYPE = 'PARQUET'\n\t,MAXERRORS = 0\n)\n--END\nGO\n\nSELECT TOP 100 * FROM PRODML.PPTB_OUTLIER_IDATEND_2\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlprod",
						"poolName": "synsqlprod"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AA_TESTES_DUAL_01')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "FATOS/MENSAIS/PROVISAO"
				},
				"content": {
					"query": "--ADD_MONTHS(TO_DATE(TO_CHAR(TO_DATE('#par_DATA_REF#','YYYY-MM-DD'), 'YYYY-MM')||'-01','YYYY-MM-DD'), 1) \n--AND ADD_MONTHS(LAST_DAY(TO_DATE('#par_DATA_REF#','YYYY-MM-DD')), 1)\n\nSELECT \n    SYSDATETIME(),\n    CAST('2022-07-22' AS DATE),\n    CONCAT(FORMAT(CAST('2022-07-22' AS DATE),'yyyy-MM'),'-01'),\n    DATEADD(MONTH, 1, CONCAT(FORMAT(CAST('2022-07-22' AS DATE),'yyyy-MM'),'-01')),\n\n    FORMAT(DATEADD(MONTH, 1, CONCAT(FORMAT(CAST('2022-07-22' AS DATE),'yyyy-MM'),'-01')),'yyyy-MM-dd') AS Prim_Dia_Mes_Seguinte,\n    FORMAT(EOMONTH(DATEADD(MONTH, 1, CAST('2022-07-22' AS DATE))),'yyyy-MM-dd') AS Ultimo_Dia_Mes_Seguinte\n;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CARGA CARACTERISTIA ATENDIMENTO')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "drop table PRODIM.TD_CARACTERISTICA_AUTORIZACAO\ngo \n\nIF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'TD_CARACTERISTICA_AUTORIZACAO' AND O.TYPE = 'U' AND S.NAME = 'PRODIM')\nCREATE TABLE PRODIM.TD_CARACTERISTICA_AUTORIZACAO\n\t(\n\t [SK_TD_CARACTERISTICA_AUTORIZ] bigint,\n\t [CO_HD_REGIME_ATENDIMENTO] bigint,\n\t [CO_REGIME_ATENDIMENTO] bigint,\n\t [DS_REGIME_ATENDIMENTO] nvarchar(4000),\n\t [CO_HD_CONDICAO_ATENDIMENTO] bigint,\n\t [CO_CONDICAO_ATENDIMENTO] bigint,\n\t [DS_CONDICAO_ATENDIMENTO] nvarchar(4000),\n\t [CO_HD_LOCAL_ATENDIMENTO] bigint,\n\t [CO_LOCAL_ATENDIMENTO] bigint,\n\t [DS_LOCAL_ATENDIMENTO] nvarchar(4000),\n\t [CO_HD_FINALIDADE_ATENDIMENTO] bigint,\n\t [CO_FINALIDADE_ATENDIMENTO] bigint,\n\t [DS_FINALIDADE_ATENDIMENTO] nvarchar(4000),\n\t [CO_HD_TIPO_AUTORIZACAO] bigint,\n\t [CO_TIPO_AUTORIZACAO] bigint,\n\t [DS_TIPO_AUTORIZACAO] nvarchar(4000),\n\t [CO_HD_TIPO_TRATAMENTO] bigint,\n\t [CO_TIPO_TRATAMENTO] bigint,\n\t [DS_TIPO_TRATAMENTO] nvarchar(4000),\n\t [CO_HD_OBJETIVO_TRATAMENTO] bigint,\n\t [CO_OBJETIVO_TRATAMENTO] bigint,\n\t [DS_OBJETIVO_TRATAMENTO] nvarchar(4000),\n\t [CO_HD_ACOMODACAO] bigint,\n\t [CO_ACOMODACAO] bigint,\n\t [DS_ACOMODACAO] nvarchar(4000),\n\t [CO_HD_MOTIVO_ALTA] bigint,\n\t [CO_MOTIVO_ALTA] bigint,\n\t [DS_MOTIVO_ALTA] nvarchar(4000),\n\t [PK_GRUPO] bigint,\n\t [DT_INICIO_VIGENCIA] datetime2(7),\n\t [DT_FIM_VIGENCIA] datetime2(7),\n\t [DT_INCLUSAO_REGISTRO] datetime2(7),\n\t [DT_ALTERACAO_REGISTRO] datetime2(7),\n\t [ST_REGISTRO_CORRENTE] nvarchar(4000),\n\t [PK_GRUPO_HIERARQUIA] nvarchar(4000)\n\t)\nWITH\n\t(\n\tDISTRIBUTION = ROUND_ROBIN,\n\t CLUSTERED COLUMNSTORE INDEX\n\t -- HEAP\n\t)\nGO\n\n--Uncomment the 4 lines below to create a stored procedure for data pipeline orchestration​\n--CREATE PROC bulk_load_TD_CARACTERISTICA_AUTORIZACAO\n--AS\n--BEGIN\nCOPY INTO PRODIM.TD_CARACTERISTICA_AUTORIZACAO\n(SK_TD_CARACTERISTICA_AUTORIZ 1, CO_HD_REGIME_ATENDIMENTO 2, CO_REGIME_ATENDIMENTO 3, DS_REGIME_ATENDIMENTO 4, CO_HD_CONDICAO_ATENDIMENTO 5, CO_CONDICAO_ATENDIMENTO 6, DS_CONDICAO_ATENDIMENTO 7, CO_HD_LOCAL_ATENDIMENTO 8, CO_LOCAL_ATENDIMENTO 9, DS_LOCAL_ATENDIMENTO 10, CO_HD_FINALIDADE_ATENDIMENTO 11, CO_FINALIDADE_ATENDIMENTO 12, DS_FINALIDADE_ATENDIMENTO 13, CO_HD_TIPO_AUTORIZACAO 14, CO_TIPO_AUTORIZACAO 15, DS_TIPO_AUTORIZACAO 16, CO_HD_TIPO_TRATAMENTO 17, CO_TIPO_TRATAMENTO 18, DS_TIPO_TRATAMENTO 19, CO_HD_OBJETIVO_TRATAMENTO 20, CO_OBJETIVO_TRATAMENTO 21, DS_OBJETIVO_TRATAMENTO 22, CO_HD_ACOMODACAO 23, CO_ACOMODACAO 24, DS_ACOMODACAO 25, CO_HD_MOTIVO_ALTA 26, CO_MOTIVO_ALTA 27, DS_MOTIVO_ALTA 28, PK_GRUPO 29, DT_INICIO_VIGENCIA 30, DT_FIM_VIGENCIA 31, DT_INCLUSAO_REGISTRO 32, DT_ALTERACAO_REGISTRO 33, ST_REGISTRO_CORRENTE 34, PK_GRUPO_HIERARQUIA 35)\nFROM 'https://stgcassidatalake001.dfs.core.windows.net/gold/DIMENSAO/TD_CARACTERISTICA_AUTORIZACAO1'\nWITH\n(\n\tFILE_TYPE = 'PARQUET'\n\t,MAXERRORS = 0\n)\n--END\nGO\n\nSELECT TOP 100 * FROM PRODIM.TD_CARACTERISTICA_AUTORIZACAO\nGO\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlprod",
						"poolName": "synsqlprod"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PRQ1_AUTORIZACAO')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "FATOS/DIARIAS/AUTORIZACAO"
				},
				"content": {
					"query": "SELECT *\nFROM\n    OPENROWSET(\n        BULK 'https://stgcassidatalake001.blob.core.windows.net/testes/parquet/AUT_TD_PARTICIPANTE',\n        FORMAT = 'PARQUET'\n    ) AS VALIDA_AUTORIZACAO\nWHERE VALIDA_AUTORIZACAO.SK_TD_ESTRUTURA_ORG_SOC is null\n\n/*\n\nVALIDA_AUTORIZACAO\n\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QRY03_MA1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Query Provisão de Guias.\nEtapa Movimento Acerto 1 (MA1)",
				"folder": {
					"name": "FATOS/MENSAIS/PROVISAO"
				},
				"content": {
					"query": "SELECT DISTINCT \n\n   'MA1' AS CTL_ORIGEM_DADOS,\n   SYSDATETIME() AS DT_CARGA,\n   --TO_DATE('#par_DATA_REF#','YYYY-MM-DD') AS DT_REF_CARGA,\n   CAST('2022-07-22' AS DATE) AS DT_REF_CARGA,\n   PEG.HANDLE AS HD_PEG,\n   G.HANDLE AS HD_GUIA,\n   ACE.HANDLE AS HD_GUIA_EVENTOS,\n   FAT.HANDLE AS HD_FATURA,\n   BEN.HANDLE AS HD_BENEF_EVENTO,\n   B1.HANDLE AS HD_BENEF_TITULAR,\n   CON.HANDLE AS HD_CONTRATO,\n   TGE.HANDLE AS HD_TGE,\n   PRE.PRESTADOR AS CO_PRESTADOR,\n   PEG.TABREGIMEPGTO AS CO_REGIME_PAGAMENTO, \n   PEG.PEG AS NU_PEG,\n   G.GUIA AS NU_GUIA,\n   FAT.NUMERO AS NU_FATURA,\n   RP.NUMEROPROTOCOLO AS NU_PROTOCOLO,\n   RP.SITUACAO AS ST_PROTOCOLO,\n   RG.SITUACAO AS ST_GUIA_REV_PAGTO,\n   \n   GE.DATAATENDIMENTO AS DATAATENDIMENTO,\n   RP.DATAAVISO AS DATAAVISO,\n   RP.DATAPEDIDO AS DATA_RECEB_CEPAG_PEDIDO,\n   FAT.DATACONTABIL AS DATACONTABIL,\n   RP.DATAPAGAMENTOACERTO AS DATA_PREVISTA_PAGTO_ACERTO,\n\n   ACE.VALORPGTOACERTO AS VALOR_APRESENTADO,\n   RE.VALORCALCULADO AS VALOR_CALC_PAGTO,\n   --NVL(ACE.VALORPGTOACERTO - ACE.VALORPGTOORIGINAL, FAT.VALOR) AS VALOR_A_PAGAR,\n   ISNULL(ACE.VALORPGTOACERTO - ACE.VALORPGTOORIGINAL, FAT.VALOR) AS VALOR_A_PAGAR,\n   ACE.VALORAPRESENTADOACERTO - ACE.VALORPGTOACERTO AS VALOR_GLOSADO,\n   ACE.VALORAUXILIOBENEFICIARIOACERTO - ACE.VALORAUXILIOBENEFORIGINAL AS VALOR_PAS\n\nFROM PROSTG.SFN_FATURA FAT\n     LEFT JOIN PROSTG.SIS_TIPOFATURAMENTO TPF ON TPF.HANDLE = FAT.TIPOFATURAMENTO\n     JOIN PROSTG.SFN_TIPOFATURA TF ON TF.HANDLE = FAT.TIPOFATURA AND TF.CODIGO IN (410, 411)\n     JOIN PROSTG.SAM_ACERTO_FATURA ACF ON FAT.HANDLE = ACF.FATURAACERTO\n     JOIN PROSTG.SAM_GUIA_EVENTOS_ACERTO ACE ON ACE.HANDLE = ACF.GUIAEVENTOACERTO\n     JOIN PROSTG.SAM_ACERTOLOTE ACL ON ACL.HANDLE = ACE.ACERTOLOTE\n     LEFT JOIN PROSTG.SAM_REVISAOPAGTO RP ON RP.HANDLE = ACL.REVISAOPAGTO\n     LEFT JOIN PROSTG.SAM_TGE TGE ON TGE.HANDLE = ACE.EVENTOACERTO\n     LEFT JOIN PROSTG.SAM_CLASSEEVENTO CL ON CL.HANDLE = TGE.CLASSEEVENTO\n     LEFT JOIN PROSTG.SAM_GUIA_EVENTOS GE ON GE.HANDLE = ACE.GUIAEVENTO\n     LEFT JOIN PROSTG.SAM_GUIA G  ON G.HANDLE = GE.GUIA\n     LEFT JOIN PROSTG.SAM_REVISAOPAGTO_GUIA RG ON RP.HANDLE = RG.REVISAOPAGTO\n     JOIN PROSTG.SAM_REVISAOPAGTO_EVENTO RE ON RG.HANDLE = RE.REVISAOPAGTOGUIA AND RE.GUIAEVENTO = GE.HANDLE\n     LEFT JOIN PROSTG.SAM_PEG PEG  ON PEG.HANDLE = G.PEG\n     LEFT JOIN PROSTG.SAM_PRESTADOR PRE ON PRE.HANDLE = PEG.RECEBEDOR\n     LEFT JOIN PROSTG.SAM_BENEFICIARIO BEN  ON BEN.HANDLE = ISNULL(ACE.BENEFICIARIOACERTO, PEG.BENEFICIARIO)\n     LEFT JOIN PROSTG.SAM_FAMILIA FAM ON FAM.HANDLE = BEN.FAMILIA\n     LEFT JOIN PROSTG.SAM_BENEFICIARIO B1 ON B1.HANDLE = FAM.TITULARRESPONSAVEL\n     LEFT JOIN PROSTG.SAM_CONTRATO CON ON CON.HANDLE = BEN.CONTRATO\n     LEFT JOIN PROSTG.SAM_GRUPOCONTRATO GPL ON CON.GRUPOCONTRATO = GPL.HANDLE\n\n--WHERE FAT.DATACONTABIL BETWEEN ADD_MONTHS(TO_DATE(TO_CHAR(TO_DATE('#par_DATA_REF#','YYYY-MM-DD'), 'YYYY-MM')||'-01','YYYY-MM-DD'), 1) AND ADD_MONTHS(LAST_DAY(TO_DATE('#par_DATA_REF#','YYYY-MM-DD')), 1)\nWHERE FAT.DATACONTABIL BETWEEN FORMAT(DATEADD(MONTH, 1, CONCAT(FORMAT(CAST('2022-07-22' AS DATE),'yyyy-MM'),'-01')),'yyyy-MM-dd') AND FORMAT(EOMONTH(DATEADD(MONTH, 1, CAST('2022-07-22' AS DATE))),'yyyy-MM-dd')\n\n   AND RP.DATAPEDIDO IS NOT NULL\n   --AND RP.DATAPEDIDO <= LAST_DAY(TO_DATE('#par_DATA_REF#','YYYY-MM-DD'))\n   AND RP.DATAPEDIDO <= EOMONTH(CAST('2022-07-22' AS DATE))\n   AND CON.HANDLE IS NOT NULL --Plano/Contrato não nulo\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlprod",
						"poolName": "synsqlprod"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QRY04_MA2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "FATOS/MENSAIS/PROVISAO"
				},
				"content": {
					"query": "SELECT DISTINCT \n\n   'MA2' CTL_ORIGEM_DADOS,\n   SYSDATETIME() AS DT_CARGA,\n   --TO_DATE('#par_DATA_REF#','YYYY-MM-DD') AS DT_REF_CARGA,\n   CAST('2022-07-22' AS DATE) AS DT_REF_CARGA,\n   PEG.HANDLE AS HD_PEG,\n   G.HANDLE AS HD_GUIA,\n   RE.HANDLE AS HD_GUIA_EVENTOS,\n   -1 AS HD_FATURA,\n   BEN.HANDLE AS HD_BENEF_EVENTO,\n   B1.HANDLE AS HD_BENEF_TITULAR,\n   CON.HANDLE AS HD_CONTRATO,\n   TGE.HANDLE AS HD_TGE,\n   PRE.PRESTADOR AS CO_PRESTADOR,\n   PEG.TABREGIMEPGTO AS CO_REGIME_PAGAMENTO, \n   PEG.PEG AS NU_PEG,\n   G.GUIA AS NU_GUIA,\n   -1 AS NU_FATURA,\n   RP.NUMEROPROTOCOLO AS NU_PROTOCOLO,\n   RP.SITUACAO AS ST_PROTOCOLO,\n   RG.SITUACAO AS ST_GUIA_REV_PAGTO,\n\n   RE.DATAATENDIMENTO,\n   RP.DATAAVISO,\n   RP.DATAPEDIDO AS DATA_RECEB_CEPAG_PEDIDO,\n   --TO_DATE('31/12/9999','DD/MM/YYYY') AS DATACONTABIL, --Não se aplica\n   CAST('9999-12-31' AS DATE) AS DATACONTABIL,\n   RP.DATAPAGAMENTOACERTO AS DATA_PREVISTA_PAGTO_ACERTO,\n\n   RE.VALORAPRESENTADO AS VALOR_APRESENTADO,\n   RE.VALORCALCULADO AS VALOR_CALC_PAGTO,\n   RE.VALORRECURSO AS VALOR_A_PAGAR,\n   RE.VALORAPRESENTADO - (CASE WHEN RE.EHESTORNO ='S' THEN -RE.VALORRECURSO ELSE RE.VALORRECURSO END) AS VALOR_GLOSADO,\n   0 AS VALOR_PAS\n\nFROM PROSTG.SAM_REVISAOPAGTO RP\n   JOIN PROSTG.SAM_REVISAOPAGTO_GUIA RG ON RP.HANDLE = RG.REVISAOPAGTO\n   JOIN PROSTG.SAM_REVISAOPAGTO_EVENTO RE ON RE.REVISAOPAGTOGUIA = RG.HANDLE\n   LEFT JOIN PROSTG.SAM_TGE TGE ON TGE.HANDLE = RE.EVENTO\n   LEFT JOIN PROSTG.SAM_CLASSEEVENTO CL ON CL.HANDLE = TGE.CLASSEEVENTO\n   JOIN PROSTG.SAM_GUIA G ON RG.GUIA = G.HANDLE\n   JOIN PROSTG.SAM_PEG PEG ON PEG.HANDLE = G.PEG\n   LEFT JOIN PROSTG.SAM_PRESTADOR PRE ON PRE.HANDLE = PEG.RECEBEDOR\n   JOIN PROSTG.SAM_BENEFICIARIO BEN  ON BEN.HANDLE = ISNULL(G.BENEFICIARIO,PEG.BENEFICIARIO)\n   LEFT JOIN PROSTG.SAM_FAMILIA FAM ON FAM.HANDLE = BEN.FAMILIA\n   LEFT JOIN PROSTG.SAM_BENEFICIARIO B1 ON B1.HANDLE = FAM.TITULARRESPONSAVEL\n   JOIN PROSTG.SAM_CONTRATO CON ON CON.HANDLE = BEN.CONTRATO\n   JOIN PROSTG.SAM_GRUPOCONTRATO GPL ON CON.GRUPOCONTRATO = GPL.HANDLE\n\nWHERE RP.SITUACAO IN ('P','B')\n   AND RP.DATAPEDIDO IS NOT NULL\n   --AND RP.DATAPEDIDO <= LAST_DAY(TO_DATE('#par_DATA_REF#','YYYY-MM-DD'))\n   AND RP.DATAPEDIDO <= EOMONTH(CAST('2022-07-22' AS DATE))\n   AND RE.EHESTORNO = 'N'\n   AND RE.VALORRECURSO > 0\n   AND CON.HANDLE IS NOT NULL --Plano/Contrato não nulo\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlprod",
						"poolName": "synsqlprod"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QRY04_MA2_Result_prqt')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "FATOS/MENSAIS/PROVISAO"
				},
				"content": {
					"query": "SELECT *\nFROM\n    OPENROWSET(\n        BULK 'https://stgcassidatalake001.blob.core.windows.net/testes/provisao/QRY_MA2.parquet',\n        FORMAT = 'PARQUET'\n    ) AS RESULT_QRY_MA_prqt\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QRY1_AUTORIZ')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "FATOS/DIARIAS/AUTORIZACAO"
				},
				"content": {
					"query": "WITH TABTMP AS (SELECT \n                   AU.HANDLE,\n\t\t\t\t   MAX(LG.HANDLE) AS SSMAX \n                FROM PROSTG.SAM_AUTORIZ_LOGSTATUS LG \n\t\t\t\tJOIN PROSTG.SAM_AUTORIZ AU ON LG.AUTORIZACAO = AU.HANDLE\n\t\t\t\t\t\t\t\tGROUP BY AU.HANDLE\n\t\t\t\t)\n\nSELECT DISTINCT\n     AUT.HANDLE AS HD_AUTORIZACAO\n    ,AES.HANDLE AS HD_AUTORIZ_EVENTO_SOLICIT\n    ,AEG.HANDLE AS HD_AUTORIZ_EVENTO_GERADO\n    ,TGE.HANDLE AS HD_TGE \n    ,BEN.HANDLE AS HD_BENEF\n    ,ENDB.ESTADO AS HD_ESTADO_BENEF\n    ,PRE2.ESTADOPAGAMENTO AS HD_ESTADO_PREST_EXEC\n    ,PRE1.HANDLE AS HD_PREST_SOLICITANTE\n    ,PRE1.PRESTADOR AS CO_PREST_SOLICITANTE\n    ,PRE2.HANDLE AS HD_PREST_EXECUTOR\n    ,PRE2.PRESTADOR AS CO_PREST_EXECUTOR\n    ,PFO.HANDLE AS HD_PREST_FORNECEDOR \n    ,PFO.PRESTADOR AS CO_PREST_FORNECEDOR \n    ,TAU.HANDLE AS HD_TP_AUTORIZ\n    ,GR.HANDLE AS HD_GRAU\n    ,GR.GRAU AS CO_GRAU\n    ,TPT.CODIGO AS CO_TP_TRATAMENTO\n    ,OBJ.CODIGO AS CO_OBJ_TRATAMENTO\n    ,TPA.HANDLE as HD_REGIME_ATEND \n    ,FNL.HANDLE AS HD_FINALID_ATEND\n    ,CRT.HANDLE AS HD_CARAT_ATEND\n    ,RGM.HANDLE AS HD_REGIME_INT\n    ,TPA.HANDLE AS HD_TP_ATEND\n    ,TPI.HANDLE AS HD_TP_INTERN\n    ,IND.HANDLE AS HD_IND_ACIDENTE\n    ,TPC.HANDLE AS HD_TP_CONSULTA\n    ,PLA.HANDLE AS HD_PLANO\n    ,CON.HANDLE AS HD_CONTRATO\n    ,GPU.HANDLE AS HD_USUARIO\n    ,TPR.HANDLE AS HD_TIS_TAB_PRECO\n    ,TPR.CODIGO AS CO_TIS_TAB_PRECO\n    ,CBO.HANDLE AS HD_CBOS\n    ,CBO.CODIGO AS CO_CBOS\n    ,TSS.CODIGO AS CO_ST_SOLICIT\n    ,AUT.SITUACAO AS CO_SITUACAO_AUT\n    ,AES.SITUACAO AS CO_SITUACAO_AES\n    ,AEG.SITUACAO AS CO_SITUACAO_AEG\n    ,AES.OPCAOOPME AS ST_OPCAO_OPME \n    ,AUT.AUTORIZACAO AS NU_AUTORIZACAO\n    ,AUT.DATAAUTORIZACAO AS DT_AUTORIZACAO_AUT\n    ,AUT.DATASOLICITACAO AS DT_SOLICITACAO_AUT\n    ,AEG.DATAAUTORIZACAO AS DT_AUTORIZACAO_AEG\n    ,AEG.DATAATENDIMENTO AS DT_ATENDIMENTO_AEG\n    ,AES.QTDSOLICITADAORIGINAL\n    ,AEG.QTDAUTORIZADA\n    ,(AES.QTDSOLICITADAORIGINAL - AEG.QTDAUTORIZADA) AS QT_NEGADA \n    ,AES.VALORUNITARIOSOLICITADO\n    ,AES.VALORUNITARIONEGOCIADOOPME\n    ,AES.VALORUNITARIOCALCULADOOPME\n    ,AES.VALORUNITARIOAUTORIZADOOPME\n    ,AES.DATASOLICITACAO AS DT_SOLICITACAO_AES \n    ,NAU.NIVELAUTORIZACAO AS NU_NIVEL_AUTORIZACAO \n    ,AUT.ORIGEMAUTORIZACAO AS CO_ORIGEM_AUTORIZACAO \n    ,AUT.SOLICITANTENOME AS NO_PROF_SOLICITANTE \n    ,AUT.SOLICITANTECRNUM AS NU_CRM_PROF_SOLICITANTE_AUT \n    ,AUT.CONSELHOPROFSOLICITANTETISS AS PK_TD_CONSELHO_Prof_Solic \n    ,AUT.UFCONSELHOPROFSOLICITANTE AS PK_TD_CONSELHO_Uf_Prof_Solic \n    ,PES.HANDLE AS HD_PREST_SOLICITANTE_AES \n    ,PES.PRESTADOR AS CO_PREST_SOLICITANTE_AES \n    ,AUT.RADIOSOLICITACAO AS DS_ORIGEM_SOLICITACAO\n    ,AUT.INDICACAOCLINICA AS DS_INDICACAO_CLINICA\n    ,AUT.DATAVALIDADE AS DT_VALIDADE_AUT\n    ,PEX.HANDLE AS HD_PREST_EXECUTOR_AES \n    ,PEX.PRESTADOR AS CO_PREST_EXECUTOR_AES \n    ,AEG.DATAHORAGERACAO AS TS_GERACAO_AEG\n    ,AEG.DATAHORALIBERACAO AS TS_LIBERACAO_AEG\n    ,AEG.USUARIOGERACAO AS HD_USUARIO_GERACAO_AEG\n    ,TGE.COMPORTAHE AS ST_HORARIO_ESPECIAL\nFROM PROSTG.SAM_AUTORIZ AUT\nLEFT JOIN PROSTG.SAM_AUTORIZ_EVENTOSOLICIT AES ON AES.AUTORIZACAO = AUT.HANDLE\nLEFT JOIN PROSTG.SAM_AUTORIZ_EVENTOGERADO AEG ON AEG.EVENTOSOLICITADO = AES.HANDLE\nJOIN PROSTG.SAM_TIPOAUTORIZ TAU ON TAU.HANDLE = AUT.TIPOAUTORIZACAO\nLEFT JOIN PROSTG.SAM_REGIMEATENDIMENTO RA ON RA.HANDLE = AUT.REGIMEATENDIMENTO\nLEFT JOIN PROSTG.SAM_LOCALATENDIMENTO LA ON LA.HANDLE = AUT.LOCALATENDIMENTO\nLEFT JOIN PROSTG.SAM_TGE TGE ON TGE.HANDLE = ISNULL(AEG.EVENTOGERADO, AES.EVENTO)\nLEFT JOIN PROSTG.SAM_TGE_NIVELAUTORIZACAO NAU ON NAU.EVENTO = TGE.HANDLE \nLEFT JOIN PROSTG.TIS_TABELAPRECO TPR ON TPR.HANDLE = TGE.TABELADOMINIOTISS\nLEFT JOIN PROSTG.SAM_GRAU GR ON GR.HANDLE = AEG.GRAUGERADO\nLEFT JOIN PROSTG.SAM_TIPOTRATAMENTO TPT ON TPT.HANDLE = TGE.TIPOTRATAMENTO\nLEFT JOIN PROSTG.SAM_OBJTRATAMENTO OBJ ON OBJ.HANDLE = TGE.OBJETIVOTRATAMENTO\nJOIN PROSTG.SAM_BENEFICIARIO BEN ON BEN.HANDLE = AUT.BENEFICIARIO \nLEFT JOIN PROSTG.SAM_PRESTADOR PRE1 ON PRE1.HANDLE = AUT.SOLICITANTE\nLEFT JOIN PROSTG.SAM_PRESTADOR PRE2 ON PRE2.HANDLE = AUT.LOCALEXECUCAO\nLEFT JOIN PROSTG.SAM_PRESTADOR PFO  ON PFO.HANDLE  = AES.FORNECEDOR\nLEFT JOIN PROSTG.SAM_PRESTADOR PES  ON PES.HANDLE  = AES.SOLICITANTE\nLEFT JOIN PROSTG.SAM_PRESTADOR PEX  ON PEX.HANDLE  = AES.EXECUTOR\nLEFT JOIN PROSTG.TIS_CBOS CBO ON CBO.HANDLE = AUT.CBOSPROFSOLICITANTETISS\nLEFT JOIN PROSTG.Z_GRUPOUSUARIOS GPU ON GPU.HANDLE = AUT.USUARIO\nLEFT JOIN PROSTG.SAM_ENDERECO ENDB ON ENDB.HANDLE = BEN.ENDERECORESIDENCIAL\nLEFT JOIN PROSTG.SAM_FINALIDADEATENDIMENTO FNL ON FNL.HANDLE = AUT.FINALIDADEATENDIMENTO\nLEFT JOIN PROSTG.TIS_CARATERATENDIMENTO CRT ON CRT.HANDLE = AUT.CARATERATENDIMENTO\nLEFT JOIN PROSTG.TIS_REGIMEINTERNACAO RGM ON RGM.HANDLE = AUT.REGIMEINTERNACAO\nLEFT JOIN PROSTG.TIS_TIPOATENDIMENTO TPA ON TPA.HANDLE = AUT.TIPOATENDIMENTO\nLEFT JOIN PROSTG.TIS_TIPOINTERNACAO TPI ON TPI.HANDLE = AUT.TIPOINTERNACAOTISS\nLEFT JOIN PROSTG.TIS_INDICADORDEACIDENTE IND ON IND.HANDLE = AUT.INDICADORDEACIDENTE\nLEFT JOIN PROSTG.TIS_TIPOCONSULTA TPC ON TPC.HANDLE = AUT.TIPOCONSULTA\nLEFT JOIN PROSTG.SAM_CONTRATO CON ON CON.HANDLE = BEN.CONTRATO\nJOIN PROSTG.SAM_PLANO PLA ON PLA.HANDLE = CON.PLANO\nLEFT JOIN PROSTG.SAM_AUTORIZ_LOGSTATUS ALG ON ALG.AUTORIZACAO = AUT.HANDLE \n\t    JOIN TABTMP ON SSMAX = ALG.HANDLE\nLEFT JOIN PROSTG.TIS_STATUSSOLICITACAO TSS ON TSS.HANDLE = ALG.STATUS\nWHERE AUT.LOCALATENDIMENTO = 1 \nAND AES.SITUACAO <> 'C' \nAND AUT.SITUACAO NOT IN ('C','F') \nAND SUBSTRING(CAST(ISNULL(ISNULL(AEG.DATAAUTORIZACAO, AES.DATASOLICITACAO ), AUT.DATAAUTORIZACAO) AS VARCHAR),1,10) = '2022-01-01'\nAND NAU.DATAFINAL IS NULL ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlprod",
						"poolName": "synsqlprod"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QRY2_CARACTERISTICAAUTORIZ')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "FATOS/DIARIAS/AUTORIZACAO"
				},
				"content": {
					"query": "SELECT \n\tAUT.HANDLE,\n\tAUT.REGIMEATENDIMENTO,\n\tAUT.CONDICAOATENDIMENTO,\n\tAUT.LOCALATENDIMENTO,\n\tAUT.FINALIDADEATENDIMENTO,\n\tAUT.TIPOAUTORIZACAO,\n\tAUT.TIPOTRATAMENTO,\n\tAUT.OBJETIVOTRATAMENTO,\n\tAUT.ACOMODACAO,\n\tAUT.MOTIVOALTA\n\nFROM PROSTG.SAM_AUTORIZ AUT\nLEFT JOIN PROSTG.SAM_AUTORIZ_EVENTOSOLICIT AES ON AES.AUTORIZACAO = AUT.HANDLE\nLEFT JOIN PROSTG.SAM_AUTORIZ_EVENTOGERADO  AEG ON AEG.EVENTOSOLICITADO = AES.HANDLE\n \nWHERE AUT.LOCALATENDIMENTO = 1 --Rede Credenciada\nAND AES.SITUACAO <> 'C' --Solicitações diferentes de Canceladas\nAND AUT.SITUACAO NOT IN ('C','F') --Autorizações diferentes de Cancelada e Fechada\nAND SUBSTRING(CAST(ISNULL(ISNULL(AEG.DATAAUTORIZACAO, AES.DATASOLICITACAO ), AUT.DATAAUTORIZACAO) AS VARCHAR),1,10) = '2022-01-01'",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlprod",
						"poolName": "synsqlprod"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QRY2_VL_PRESTADORES')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "FATOS/DIARIAS/AUTORIZACAO"
				},
				"content": {
					"query": "SELECT DISTINCT \n     PR.HANDLE AS HD_PRESTADOR\n    ,TGE.HANDLE AS HD_TGE\n    ,CBO.HANDLE AS HD_CBO\n    ,DT.TIPOATENDIMENTO AS HD_REGIME_ATENDIMENTO\n    ,GRA.HANDLE AS HD_GRAU\n    ,DT.DATAINICIAL AS DT_INICIAL\n    ,DT.DATAFINAL AS DT_FINAL\n    ,DT.PORTEANESTESICO AS NU_PORTE_ANESTESICO\n    ,DT.PORTESALA AS NU_PORTE_SALA\n\n    ,(DT.QTDUSHONORARIO*DT.PERCENTUALPGTOUS*VUS.VALORUSHONORARIO)/100     AS VL_US\n    ,(DT.QTDUSCUSTOOPERACIONAL*DT.PERCENTUALPGTOCUSTO*VCO.VALORUSCUSTOOPERACIONAL)/100  AS VL_UCO --Unidade Custo Operacional\n    ,(DT.FATORFILME*DT.PERCENTUALPGTOFILME* VIL.FILMEVALOR)/100    AS VL_FILME\n\nFROM PROSTG.SAM_PRESTADOR                                       PR\n          JOIN PROSTG.SAM_PRECOPRESTADOR_DOTAC                  DT     ON PR.HANDLE  = DT.PRESTADOR\n          JOIN PROSTG.SAM_TGE                                   TGE    ON TGE.HANDLE = DT.EVENTO\n     LEFT JOIN PROSTG.SAM_GRAU                                  GRA    ON TGE.HANDLE = GRA.TERMO\n     LEFT JOIN PROSTG.TIS_CBOS                                  CBO    ON CBO.HANDLE = DT.CBOSTISS       \n     LEFT JOIN PROSTG.TIS_TABELAPRECO                           TD     ON TD.HANDLE = TGE.TABELADOMINIOTISS\n     LEFT JOIN PROSTG.SAM_TABCUSTOOPERAC                        UCO    ON UCO.HANDLE = DT.TABELACUSTOOPERAC \n     LEFT JOIN PROSTG.SAM_TABCUSTOOPERAC_VLR                    VCO    ON UCO.HANDLE = VCO.TABELACUSTOOPERACUS\n     LEFT JOIN PROSTG.SAM_TABUS                                 US     ON US.HANDLE  = DT.TABELAUS\n     LEFT JOIN PROSTG.SAM_TABUS_VLR                             VUS    ON US.HANDLE  = VUS.TABELAUS\n     LEFT JOIN PROSTG.SAM_TABFILME                              FIL    ON DT.TABELAFILME = FIL.HANDLE\n     LEFT JOIN PROSTG.SAM_TABFILME_VLR                          VIL    ON FIL.HANDLE = VIL.TABELAFILME\n\n WHERE TD.CODIGO = 22\n      AND VIL.DATAFINAL IS NULL\n      AND VUS.DATAFINAL IS NULL\n      AND VCO.DATAFINAL IS NULL\n\nAND '2022-01-01' BETWEEN SUBSTRING(CAST(DT.DATAINICIAL AS VARCHAR),1,10) AND SUBSTRING(CAST(ISNULL(DT.DATAFINAL,'9999-12-31') AS VARCHAR),1,10)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlprod",
						"poolName": "synsqlprod"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QRY3_VL_ANESTESIA_PRE')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "FATOS/DIARIAS/AUTORIZACAO"
				},
				"content": {
					"query": "SELECT DISTINCT \n     PR.HANDLE AS HD_PRESTADOR\n    ,DT.PORTEANESTESICO AS NU_PORTE_ANESTESICO -- PAN\n    ,DT.DATAINICIAL AS DT_INICIAL\n    ,DT.DATAFINAL AS DT_FINAL\n    ,DT.PERCENTUALAUXILIARANESTESISTA AS PERCENTUALAUXILIARANESTESISTA\n    ,DT.QTDUSANESTESISTA AS QTDUSANESTESISTA\n    ,DT.PERCENTUALPAGTOUS AS PERCENTUALPAGTOUS\n    ,VUS.VALORUSHONORARIO AS VALORUSHONORARIO\n    ,(DT.QTDUSANESTESISTA*DT.PERCENTUALPAGTOUS*VUS.VALORUSHONORARIO)/100  AS VL_US_ANESTESISTA\n\nFROM PROSTG.SAM_PRESTADOR PR\n         JOIN PROSTG.SAM_PRECOPRESTADOR_AN DT ON PR.HANDLE  = DT.PRESTADOR\n    LEFT JOIN PROSTG.SAM_TABUS US ON US.HANDLE  = DT.TABELAUS\n    LEFT JOIN PROSTG.SAM_TABUS_VLR VUS ON US.HANDLE  = VUS.TABELAUS\n\nWHERE VUS.DATAFINAL IS NULL\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlprod",
						"poolName": "synsqlprod"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QRY5_VL_ESTADOS')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "FATOS/DIARIAS/AUTORIZACAO"
				},
				"content": {
					"query": "SELECT DISTINCT \n     ES.HANDLE AS HD_ESTADO\n    ,TGE.HANDLE AS HD_TGE\n    ,CBO.HANDLE AS HD_CBO\n    ,DT.TIPOATENDIMENTO AS HD_REGIME_ATENDIMENTO\n    ,GRA.HANDLE AS HD_GRAU\n    ,DT.DATAINICIAL AS DT_INICIAL\n    ,DT.DATAFINAL AS DT_FINAL\n    ,DT.PORTEANESTESICO AS NU_PORTE_ANESTESICO\n    ,DT.PORTESALA AS NU_PORTE_SALA\n\n    ,(DT.QTDUSHONORARIO*DT.PERCENTUALPGTOUS*VUS.VALORUSHONORARIO)/100     AS VL_US\n    ,(DT.QTDUSCUSTOOPERACIONAL*DT.PERCENTUALPGTOCUSTO*VCO.VALORUSCUSTOOPERACIONAL)/100  AS VL_UCO --Unidade Custo Operacional\n    ,(DT.FATORFILME*DT.PERCENTUALPGTOFILME*VIL.FILMEVALOR)/100    AS VL_FILME\n\nFROM PROSTG.ESTADOS                                             ES\n          JOIN PROSTG.SAM_PRECOESTADO_DOTAC                     DT     ON ES.HANDLE  = DT.ESTADO\n          JOIN PROSTG.SAM_TGE                                   TGE    ON TGE.HANDLE = DT.EVENTO\n     LEFT JOIN PROSTG.SAM_GRAU                                  GRA    ON TGE.HANDLE = GRA.TERMO\n     LEFT JOIN PROSTG.TIS_CBOS                                  CBO    ON CBO.HANDLE = DT.CBOSTISS       \n     LEFT JOIN PROSTG.TIS_TABELAPRECO                           TD     ON TD.HANDLE = TGE.TABELADOMINIOTISS\n     LEFT JOIN PROSTG.SAM_TABCUSTOOPERAC                        UCO    ON UCO.HANDLE = DT.TABELACUSTOOPERAC \n     LEFT JOIN PROSTG.SAM_TABCUSTOOPERAC_VLR                    VCO    ON UCO.HANDLE = VCO.TABELACUSTOOPERACUS\n     LEFT JOIN PROSTG.SAM_TABUS                                 US     ON US.HANDLE  = DT.TABELAUS\n     LEFT JOIN PROSTG.SAM_TABUS_VLR                             VUS    ON US.HANDLE  = VUS.TABELAUS\n     LEFT JOIN PROSTG.SAM_TABFILME                              FIL    ON DT.TABELAFILME = FIL.HANDLE\n     LEFT JOIN PROSTG.SAM_TABFILME_VLR                          VIL    ON FIL.HANDLE = VIL.TABELAFILME\n\nWHERE TD.CODIGO = 22\n      AND VIL.DATAFINAL IS NULL\n      AND VUS.DATAFINAL IS NULL\n      AND VCO.DATAFINAL IS NULL\n\nAND '2022-01-01' BETWEEN SUBSTRING(CAST(DT.DATAINICIAL AS VARCHAR),1,10) AND SUBSTRING(CAST(ISNULL(DT.DATAFINAL,'9999-12-31') AS VARCHAR),1,10)\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlprod",
						"poolName": "synsqlprod"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QRY6_VL_ANESTESIA_EST')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "FATOS/DIARIAS/AUTORIZACAO"
				},
				"content": {
					"query": "SELECT DISTINCT \n     ES.HANDLE AS HD_ESTADO\n    ,DT.PORTEANESTESICO AS NU_PORTE_ANESTESICO -- PAN\n    ,DT.DATAINICIAL AS DT_INICIAL\n    ,DT.DATAFINAL AS DT_FINAL\n    ,DT.PERCENTUALAUXILIARANESTESISTA\n    ,DT.QTDUSANESTESISTA\n    ,DT.PERCENTUALPAGTOUS\n    ,VUS.VALORUSHONORARIO\n    ,(DT.QTDUSANESTESISTA*DT.PERCENTUALPAGTOUS*VUS.VALORUSHONORARIO)/100  AS VL_US_ANESTESISTA\n\nFROM PROSTG.ESTADOS                ES\n   JOIN PROSTG.SAM_PRECOESTADO_AN  DT     ON ES.HANDLE  = DT.ESTADO\n   LEFT JOIN PROSTG.SAM_TABUS      US     ON US.HANDLE  = DT.TABELAUS\n   LEFT JOIN PROSTG.SAM_TABUS_VLR  VUS    ON US.HANDLE  = VUS.TABELAUS\n\nWHERE VUS.DATAFINAL IS NULL",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlprod",
						"poolName": "synsqlprod"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 10')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'PPTB_OUTLIER_IDATEND_2' AND O.TYPE = 'U' AND S.NAME = 'PRODML')\nCREATE TABLE PRODML.PPTB_OUTLIER_IDATEND_2\n\t(\n\t [HDGUIA_GROUP] nvarchar(4000),\n\t [ANOMESATEND] nvarchar(4000),\n\t [ID_ATEND_BENEF] nvarchar(4000),\n\t [ID_ATEND_PRESTADOR] nvarchar(4000),\n\t [DATAPAGAMENTO] datetime2(7),\n\t [CARTAREMESSA] float,\n\t [TABREGIMEPGTO] numeric(38,18),\n\t [PEG] float,\n\t [SITUACAO] nvarchar(4000),\n\t [CD_PRESTADOR] nvarchar(4000),\n\t [NO_PRESTADOR] nvarchar(4000),\n\t [FISICAJURIDICA] numeric(38,18),\n\t [CD_TIPO_PRESTADOR] numeric(38,18),\n\t [DS_TIPO_PRESTADOR] nvarchar(4000),\n\t [EVENTOIMPORTADO] nvarchar(4000),\n\t [DESCRICAOIMPORTADA] nvarchar(4000),\n\t [DT_ATENDIMENTO] datetime2(7),\n\t [HD_BENEFICIARIO] numeric(38,18),\n\t [MT_BENEF] numeric(38,18),\n\t [SEXO] nvarchar(4000),\n\t [IDADE] bigint,\n\t [HD_CLASSE_EVENTO] numeric(38,18),\n\t [DS_CLASSE_EVENTO] nvarchar(4000),\n\t [HD_TGE_EVENTO] int,\n\t [ESTRUTURA_EVENTO] nvarchar(4000),\n\t [DS_EVENTO] nvarchar(4000),\n\t [GRAU] numeric(38,18),\n\t [DS_GRAU] nvarchar(4000),\n\t [EVENTO_AUTORIZ] int,\n\t [CBOS_EXECUTANTE] nvarchar(4000),\n\t [CBOS_SOLICITANTE] nvarchar(4000),\n\t [CONSELHOPROFEXECUTANTE] nvarchar(4000),\n\t [CONSELHOPROFEXECUTANTETISS] numeric(38,18),\n\t [CONSELHOPROFSOLICITANTETISS] numeric(38,18),\n\t [NUMEROPROFEXECUTANTE] nvarchar(4000),\n\t [CODIGODESPESA] numeric(38,18),\n\t [VIADEACESSOTISS] numeric(38,18),\n\t [TARGET] nvarchar(4000),\n\t [GUIA_GROUP] nvarchar(4000),\n\t [AUTORIZACAO_GROUP] nvarchar(4000),\n\t [CD_TIPO_ATENDIMENTO_GROUP] nvarchar(4000),\n\t [TIPO_ATENDIMENTO_GROUP] nvarchar(4000),\n\t [HD_EVENTO_GROUP] nvarchar(4000),\n\t [REGRA_AUT_GUIA_GROUP] nvarchar(4000),\n\t [MODELO_GUIA_GROUP] nvarchar(4000),\n\t [QTDPAGTO] float,\n\t [QTDGLOSADA] float,\n\t [QTDAPRESENTADA] float,\n\t [VALORAPRESENTADO] float,\n\t [VALORCALCPAGTO] float,\n\t [VALORPAGOORIGINAL] float,\n\t [VALORPAGTO] float,\n\t [VALORGLOSADOORIGINAL] float,\n\t [VALORGLOSADO] float,\n\t [QTDAUTORIZADA] float,\n\t [QTDPAGA] float,\n\t [HD_TGE_EVENTO2] int,\n\t [GRAU2] numeric(38,18),\n\t [QTDPAGTO_mean] float,\n\t [QTDPAGTO_std] float,\n\t [LMSP] float,\n\t [LMSP_EX] float,\n\t [LMSP_99] float,\n\t [LMSP_995] float,\n\t [OUTLIER] int,\n\t [OUTLIER_EX] int,\n\t [OUTLIER_995] int,\n\t [OUTLIER_99] int,\n\t [VLR_CORRETO] float,\n\t [VLR_SAVE] float,\n\t [VLR_CORRETO_EX] float,\n\t [VLR_SAVE_EX] float,\n\t [VLR_CORRETO_99] float,\n\t [VLR_SAVE_99] float,\n\t [VLR_CORRETO_995] float,\n\t [VLR_SAVE_995] float,\n\t [PRESTADOR] nvarchar(4000),\n\t [EVENTO] nvarchar(4000),\n\t [QTD_GUIAS] int,\n\t [FINALIDADE_GROUP] nvarchar(4000)\n\t)\nWITH\n\t(\n\tDISTRIBUTION = ROUND_ROBIN,\n\t CLUSTERED COLUMNSTORE INDEX\n\t -- HEAP\n\t)\nGO\n\n--Uncomment the 4 lines below to create a stored procedure for data pipeline orchestration​\n--CREATE PROC bulk_load_PPTB_OUTLIER_IDATEND_2\n--AS\n--BEGIN\nCOPY INTO PRODML.PPTB_OUTLIER_IDATEND_2\n(HDGUIA_GROUP 1, ANOMESATEND 2, ID_ATEND_BENEF 3, ID_ATEND_PRESTADOR 4, DATAPAGAMENTO 5, CARTAREMESSA 6, TABREGIMEPGTO 7, PEG 8, SITUACAO 9, CD_PRESTADOR 10, NO_PRESTADOR 11, FISICAJURIDICA 12, CD_TIPO_PRESTADOR 13, DS_TIPO_PRESTADOR 14, EVENTOIMPORTADO 15, DESCRICAOIMPORTADA 16, DT_ATENDIMENTO 17, HD_BENEFICIARIO 18, MT_BENEF 19, SEXO 20, IDADE 21, HD_CLASSE_EVENTO 22, DS_CLASSE_EVENTO 23, HD_TGE_EVENTO 24, ESTRUTURA_EVENTO 25, DS_EVENTO 26, GRAU 27, DS_GRAU 28, EVENTO_AUTORIZ 29, CBOS_EXECUTANTE 30, CBOS_SOLICITANTE 31, CONSELHOPROFEXECUTANTE 32, CONSELHOPROFEXECUTANTETISS 33, CONSELHOPROFSOLICITANTETISS 34, NUMEROPROFEXECUTANTE 35, CODIGODESPESA 36, VIADEACESSOTISS 37, TARGET 38, GUIA_GROUP 39, AUTORIZACAO_GROUP 40, CD_TIPO_ATENDIMENTO_GROUP 41, TIPO_ATENDIMENTO_GROUP 42, HD_EVENTO_GROUP 43, REGRA_AUT_GUIA_GROUP 44, MODELO_GUIA_GROUP 45, QTDPAGTO 46, QTDGLOSADA 47, QTDAPRESENTADA 48, VALORAPRESENTADO 49, VALORCALCPAGTO 50, VALORPAGOORIGINAL 51, VALORPAGTO 52, VALORGLOSADOORIGINAL 53, VALORGLOSADO 54, QTDAUTORIZADA 55, QTDPAGA 56, HD_TGE_EVENTO2 57, GRAU2 58, QTDPAGTO_mean 59, QTDPAGTO_std 60, LMSP 61, LMSP_EX 62, LMSP_99 63, LMSP_995 64, OUTLIER 65, OUTLIER_EX 66, OUTLIER_995 67, OUTLIER_99 68, VLR_CORRETO 69, VLR_SAVE 70, VLR_CORRETO_EX 71, VLR_SAVE_EX 72, VLR_CORRETO_99 73, VLR_SAVE_99 74, VLR_CORRETO_995 75, VLR_SAVE_995 76, PRESTADOR 77, EVENTO 78, QTD_GUIAS 79, FINALIDADE_GROUP 80)\nFROM 'https://stgcassigsmadatalake02.dfs.core.windows.net/data/raw-data/PPTB_OUTLIER_IDATEND_2'\nWITH\n(\n\tFILE_TYPE = 'PARQUET'\n\t,MAXERRORS = 0\n)\n--END\nGO\n\nSELECT TOP 100 * FROM PRODML.PPTB_OUTLIER_IDATEND_2\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlprod",
						"poolName": "synsqlprod"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 11')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "drop table PRODIM.TD_CARACTERISTICA_AUTORIZACAO\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'TD_CARACTERISTICA_AUTORIZACAO' AND O.TYPE = 'U' AND S.NAME = 'PRODIM')\nCREATE TABLE PRODIM.TD_CARACTERISTICA_AUTORIZACAO\n\t(\n\t [SK_TD_CARACTERISTICA_AUTORIZ] bigint,\n\t [CO_HD_REGIME_ATENDIMENTO] bigint,\n\t [CO_REGIME_ATENDIMENTO] bigint,\n\t [DS_REGIME_ATENDIMENTO] nvarchar(4000),\n\t [CO_HD_CONDICAO_ATENDIMENTO] bigint,\n\t [CO_CONDICAO_ATENDIMENTO] bigint,\n\t [DS_CONDICAO_ATENDIMENTO] nvarchar(4000),\n\t [CO_HD_LOCAL_ATENDIMENTO] bigint,\n\t [CO_LOCAL_ATENDIMENTO] bigint,\n\t [DS_LOCAL_ATENDIMENTO] nvarchar(4000),\n\t [CO_HD_FINALIDADE_ATENDIMENTO] bigint,\n\t [CO_FINALIDADE_ATENDIMENTO] bigint,\n\t [DS_FINALIDADE_ATENDIMENTO] nvarchar(4000),\n\t [CO_HD_TIPO_AUTORIZACAO] bigint,\n\t [CO_TIPO_AUTORIZACAO] bigint,\n\t [DS_TIPO_AUTORIZACAO] nvarchar(4000),\n\t [CO_HD_TIPO_TRATAMENTO] bigint,\n\t [CO_TIPO_TRATAMENTO] bigint,\n\t [DS_TIPO_TRATAMENTO] nvarchar(4000),\n\t [CO_HD_OBJETIVO_TRATAMENTO] bigint,\n\t [CO_OBJETIVO_TRATAMENTO] bigint,\n\t [DS_OBJETIVO_TRATAMENTO] nvarchar(4000),\n\t [CO_HD_ACOMODACAO] bigint,\n\t [CO_ACOMODACAO] bigint,\n\t [DS_ACOMODACAO] nvarchar(4000),\n\t [CO_HD_MOTIVO_ALTA] bigint,\n\t [CO_MOTIVO_ALTA] bigint,\n\t [DS_MOTIVO_ALTA] nvarchar(4000),\n\t [PK_GRUPO] bigint,\n\t [DT_INICIO_VIGENCIA] datetime2(7),\n\t [DT_FIM_VIGENCIA] datetime2(7),\n\t [DT_INCLUSAO_REGISTRO] datetime2(7),\n\t [DT_ALTERACAO_REGISTRO] datetime2(7),\n\t [ST_REGISTRO_CORRENTE] nvarchar(4000),\n\t [PK_GRUPO_HIERARQUIA] nvarchar(4000)\n\t)\nWITH\n\t(\n\tDISTRIBUTION = ROUND_ROBIN,\n\t CLUSTERED COLUMNSTORE INDEX\n\t -- HEAP\n\t)\nGO\n\n\n--Uncomment the 4 lines below to create a stored procedure for data pipeline orchestration​\n--CREATE PROC bulk_load_TD_CARACTERISTICA_AUTORIZACAO\n--AS\n--BEGIN\nCOPY INTO PRODIM.TD_CARACTERISTICA_AUTORIZACAO\n( cast(SK_TD_CARACTERISTICA_AUTORIZ as bigint) 1\n, CO_HD_REGIME_ATENDIMENTO 2\n, CO_REGIME_ATENDIMENTO 3\n, DS_REGIME_ATENDIMENTO 4\n, CO_HD_CONDICAO_ATENDIMENTO 5\n, CO_CONDICAO_ATENDIMENTO 6\n, DS_CONDICAO_ATENDIMENTO 7\n, CO_HD_LOCAL_ATENDIMENTO 8\n, CO_LOCAL_ATENDIMENTO 9\n, DS_LOCAL_ATENDIMENTO 10\n, CO_HD_FINALIDADE_ATENDIMENTO 11\n, CO_FINALIDADE_ATENDIMENTO 12\n, DS_FINALIDADE_ATENDIMENTO 13\n, CO_HD_TIPO_AUTORIZACAO 14\n, CO_TIPO_AUTORIZACAO 15\n, DS_TIPO_AUTORIZACAO 16\n, CO_HD_TIPO_TRATAMENTO 17\n, CO_TIPO_TRATAMENTO 18\n, DS_TIPO_TRATAMENTO 19\n, CO_HD_OBJETIVO_TRATAMENTO 20\n, CO_OBJETIVO_TRATAMENTO 21\n, DS_OBJETIVO_TRATAMENTO 22\n, CO_HD_ACOMODACAO 23\n, CO_ACOMODACAO 24\n, DS_ACOMODACAO 25\n, CO_HD_MOTIVO_ALTA 26\n, CO_MOTIVO_ALTA 27\n, DS_MOTIVO_ALTA 28\n, PK_GRUPO 29\n, DT_INICIO_VIGENCIA 30\n, DT_FIM_VIGENCIA 31\n, DT_INCLUSAO_REGISTRO 32\n, DT_ALTERACAO_REGISTRO 33\n, ST_REGISTRO_CORRENTE 34\n, PK_GRUPO_HIERARQUIA 35)\nFROM 'https://stgcassidatalake001.dfs.core.windows.net/gold/DIMENSAO/TD_CARACTERISTICA_AUTORIZACAO'\nWITH\n(\n\tFILE_TYPE = 'PARQUET'\n\t,MAXERRORS = 0\n)\n--END\nGO\n\nSELECT TOP 100 * FROM PRODIM.TD_CARACTERISTICA_AUTORIZACAO\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlprod",
						"poolName": "synsqlprod"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 12')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\n\ncreate external table teste02 as \nSELECT \n     cast(SK_TD_CARACTERISTICA_AUTORIZ as bigint) as SK_TD_CARACTERISTICA_AUTORIZ,  \n\t cast(CO_HD_REGIME_ATENDIMENTO as bigint) as CO_HD_REGIME_ATENDIMENTO,\n\t cast(CO_REGIME_ATENDIMENTO as bigint) as CO_REGIME_ATENDIMENTO,\n\t cast(DS_REGIME_ATENDIMENTO as nvarchar(4000)) as DS_REGIME_ATENDIMENTO,\n\t cast(CO_HD_CONDICAO_ATENDIMENTO as bigint) as CO_HD_CONDICAO_ATENDIMENTO,\n\t cast(CO_CONDICAO_ATENDIMENTO as bigint) as CO_CONDICAO_ATENDIMENTO,\n\t cast(DS_CONDICAO_ATENDIMENTO as nvarchar(4000)) as DS_CONDICAO_ATENDIMENTO,\n\t cast(CO_HD_LOCAL_ATENDIMENTO as bigint) as CO_HD_LOCAL_ATENDIMENTO,\n\t cast(CO_LOCAL_ATENDIMENTO as bigint) as CO_LOCAL_ATENDIMENTO,\n\t cast(DS_LOCAL_ATENDIMENTO as nvarchar(4000)) as DS_LOCAL_ATENDIMENTO,\n\t cast(CO_HD_FINALIDADE_ATENDIMENTO as bigint) as CO_HD_FINALIDADE_ATENDIMENTO,\n\t cast(CO_FINALIDADE_ATENDIMENTO as bigint) as CO_FINALIDADE_ATENDIMENTO,\n\t cast(DS_FINALIDADE_ATENDIMENTO as nvarchar(4000)) as DS_FINALIDADE_ATENDIMENTO,\n\t cast(CO_HD_TIPO_AUTORIZACAO as bigint) as CO_HD_TIPO_AUTORIZACAO,\n\t cast(CO_TIPO_AUTORIZACAO as bigint) as CO_TIPO_AUTORIZACAO,\n\t cast(DS_TIPO_AUTORIZACAO as nvarchar(4000)) as DS_TIPO_AUTORIZACAO,\n\t cast(CO_HD_TIPO_TRATAMENTO as bigint) as CO_HD_TIPO_TRATAMENTO,\n\t cast(CO_TIPO_TRATAMENTO as bigint) as CO_TIPO_TRATAMENTO,\n\t cast(DS_TIPO_TRATAMENTO as nvarchar(4000)) as DS_TIPO_TRATAMENTO,\n\t cast(CO_HD_OBJETIVO_TRATAMENTO as bigint) as CO_HD_OBJETIVO_TRATAMENTO,\n\t cast(CO_OBJETIVO_TRATAMENTO as bigint) as CO_OBJETIVO_TRATAMENTO,\n\t cast(DS_OBJETIVO_TRATAMENTO as nvarchar(4000)) as DS_OBJETIVO_TRATAMENTO,\n\t cast(CO_HD_ACOMODACAO as bigint) as CO_HD_ACOMODACAO,\n\t cast(CO_ACOMODACAO as bigint) as CO_ACOMODACAO,\n\t cast(DS_ACOMODACAO as nvarchar(4000)) as DS_ACOMODACAO,\n\t cast(CO_HD_MOTIVO_ALTA as bigint) as CO_HD_MOTIVO_ALTA,\n\t cast(CO_MOTIVO_ALTA as bigint) as CO_MOTIVO_ALTA,\n\t cast(DS_MOTIVO_ALTA as nvarchar(4000)) as DS_MOTIVO_ALTA,\n\t cast(PK_GRUPO as bigint) as PK_GRUPO,\n\t cast(DT_INICIO_VIGENCIA as datetime2(7)) as DT_INICIO_VIGENCIA,\n\t cast(DT_FIM_VIGENCIA as datetime2(7)) as DT_FIM_VIGENCIA,\n\t cast(DT_INCLUSAO_REGISTRO as datetime2(7)) as DT_INCLUSAO_REGISTRO,\n\t cast(DT_ALTERACAO_REGISTRO as datetime2(7)) as DT_ALTERACAO_REGISTRO,\n\t cast(ST_REGISTRO_CORRENTE as nvarchar(4000)) as ST_REGISTRO_CORRENTE,\n\t cast(PK_GRUPO_HIERARQUIA as nvarchar(4000)) PK_GRUPO_HIERARQUIA\n    \nFROM\n    OPENROWSET(\n        BULK 'https://stgcassidatalake001.dfs.core.windows.net/gold/DIMENSAO/TD_CARACTERISTICA_AUTORIZACAO/**',\n        FORMAT = 'PARQUET'\n    ) as TESTE02\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlstage",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 13')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "drop external table dbo.CLI_FAMILIA_ESF\ngo \n\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'raw-data_stgcassidatalake001_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [raw-data_stgcassidatalake001_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://raw-data@stgcassidatalake001.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE PROSTG.CLI_FAMILIA_ESF (\n\t[HANDLE] int,\n\t[Z_GRUPO] int,\n\t[CLINICA] int,\n\t[EQUIPE] int,\n\t[DATAINCLUSAOESF] datetime2(7),\n\t[DATACANCELAMENTOESF] datetime2(7),\n\t[MOTIVOCANCELAMENTOESF] int,\n\t[NOMEFAMILIA] nvarchar(4000),\n\t[CODIGOFAMILIA] int,\n\t[LOTEMIGRACAO] int,\n\t[IDMIGRACAO] int,\n\t[USUARIOINCLUSAO] int,\n\t[DATAHORAINCLUSAO] datetime2(7),\n\t[USUARIOALTERACAO] int,\n\t[DATAHORAALTERACAO] datetime2(7),\n\t[Z_NOMEFAMILIA] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'STAGE/CLI_FAMILIA_ESF/**',\n\tDATA_SOURCE = [raw-data_stgcassidatalake001_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM PROSTG.CLI_FAMILIA_ESF\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlstage",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 14')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [HANDLE]\n,[Z_GRUPO]\n,[CLINICA]\n,[EQUIPE]\n,[DATAINCLUSAOESF]\n,[DATACANCELAMENTOESF]\n,[MOTIVOCANCELAMENTOESF]\n,[NOMEFAMILIA]\n,[CODIGOFAMILIA]\n,[LOTEMIGRACAO]\n,[IDMIGRACAO]\n,[USUARIOINCLUSAO]\n,[DATAHORAINCLUSAO]\n,[USUARIOALTERACAO]\n,[DATAHORAALTERACAO]\n,[Z_NOMEFAMILIA]\n FROM [PROSTG].[CLI_FAMILIA_ESF]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlstage",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 15')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "FATOS/DIARIAS/AUTORIZACAO"
				},
				"content": {
					"query": "SELECT DISTINCT \n   P.CO_HD_BENEFICIARIO AS CO_HD_BENEFICIARIO, \n   TF.SK_TD_ESTRUTURA_ORG_SOC AS SK_TD_ESTRUTURA_ORG_SOC\n\nFROM PRODIM.TF_CADASTRADOS_ESF TF\nINNER JOIN PRODIM.TD_TEMPO TD ON TD.SK_TD_TEMPO = TF.SK_TD_TEMPO_DIA\nINNER JOIN PRODIM.TD_PARTICIPANTE P ON P.SK_TD_PARTICIPANTE = TF.SK_TD_PARTICIPANTE \n\nWHERE TF.ANO_MES_PROCESSAMENTO = '202201'\nORDER BY P.CO_HD_BENEFICIARIO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlprod",
						"poolName": "synsqlprod"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 4')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT SK_TD_CARACTERISTICA_AUTORIZ AS SK_TD_CARACTERISTICA_AUTORIZ\n,CO_HD_REGIME_ATENDIMENTO AS CO_HD_REGIME_ATENDIMENTO\n,CO_HD_CONDICAO_ATENDIMENTO AS CO_HD_CONDICAO_ATENDIMENTO\n,CO_HD_LOCAL_ATENDIMENTO AS CO_HD_LOCAL_ATENDIMENTO\n,CO_HD_FINALIDADE_ATENDIMENTO AS CO_HD_FINALIDADE_ATENDIMENTO\n,CO_HD_TIPO_AUTORIZACAO AS CO_HD_TIPO_AUTORIZACAO\n,CO_HD_TIPO_TRATAMENTO AS CO_HD_TIPO_TRATAMENTO\n,CO_HD_OBJETIVO_TRATAMENTO AS CO_HD_OBJETIVO_TRATAMENTO\n,CO_HD_ACOMODACAO AS CO_HD_ACOMODACAO\n,CO_HD_MOTIVO_ALTA AS CO_HD_MOTIVO_ALTA\nFROM PRODIM.TD_CARACTERISTICA_AUTORIZACAO\nWHERE ST_REGISTRO_CORRENTE = 'S'\nAND CO_HD_REGIME_ATENDIMENTO = 3\nAND CO_HD_CONDICAO_ATENDIMENTO = 1\nAND CO_HD_LOCAL_ATENDIMENTO = 1\nAND CO_HD_FINALIDADE_ATENDIMENTO = 1\nAND CO_HD_TIPO_AUTORIZACAO = 19\nAND CO_HD_TIPO_TRATAMENTO = 1\nAND CO_HD_OBJETIVO_TRATAMENTO = 1\nAND CO_HD_ACOMODACAO = 24\nAND CO_HD_MOTIVO_ALTA = -2",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlprod",
						"poolName": "synsqlprod"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 6')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "drop table PRODIM.TD_CARACTERISTICA_AUTORIZACAO\ngo \n\nIF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'TD_CARACTERISTICA_AUTORIZACAO' AND O.TYPE = 'U' AND S.NAME = 'PRODIM')\nCREATE TABLE PRODIM.TD_CARACTERISTICA_AUTORIZACAO\n\t(\n\t [SK_TD_CARACTERISTICA_AUTORIZ] integer,\n\t [CO_HD_REGIME_ATENDIMENTO] integer,\n\t [CO_REGIME_ATENDIMENTO] integer,\n\t [DS_REGIME_ATENDIMENTO] nvarchar(4000),\n\t [CO_HD_CONDICAO_ATENDIMENTO] integer,\n\t [CO_CONDICAO_ATENDIMENTO] integer,\n\t [DS_CONDICAO_ATENDIMENTO] nvarchar(4000),\n\t [CO_HD_LOCAL_ATENDIMENTO] integer,\n\t [CO_LOCAL_ATENDIMENTO] integer,\n\t [DS_LOCAL_ATENDIMENTO] nvarchar(4000),\n\t [CO_HD_FINALIDADE_ATENDIMENTO] integer,\n\t [CO_FINALIDADE_ATENDIMENTO] integer,\n\t [DS_FINALIDADE_ATENDIMENTO] nvarchar(4000),\n\t [CO_HD_TIPO_AUTORIZACAO] integer,\n\t [CO_TIPO_AUTORIZACAO] integer,\n\t [DS_TIPO_AUTORIZACAO] nvarchar(4000),\n\t [CO_HD_TIPO_TRATAMENTO] integer,\n\t [CO_TIPO_TRATAMENTO] integer,\n\t [DS_TIPO_TRATAMENTO] nvarchar(4000),\n\t [CO_HD_OBJETIVO_TRATAMENTO] integer,\n\t [CO_OBJETIVO_TRATAMENTO] integer,\n\t [DS_OBJETIVO_TRATAMENTO] nvarchar(4000),\n\t [CO_HD_ACOMODACAO] integer,\n\t [CO_ACOMODACAO] integer,\n\t [DS_ACOMODACAO] nvarchar(4000),\n\t [CO_HD_MOTIVO_ALTA] integer,\n\t [CO_MOTIVO_ALTA] integer,\n\t [DS_MOTIVO_ALTA] nvarchar(4000),\n\t [PK_GRUPO] integer,\n\t [DT_INICIO_VIGENCIA] datetime2(7),\n\t [DT_FIM_VIGENCIA] datetime2(7),\n\t [DT_INCLUSAO_REGISTRO] datetime2(7),\n\t [DT_ALTERACAO_REGISTRO] datetime2(7),\n\t [ST_REGISTRO_CORRENTE] nvarchar(4000),\n\t [PK_GRUPO_HIERARQUIA] nvarchar(4000)\n\t)\nWITH\n\t(\n\tDISTRIBUTION = ROUND_ROBIN,\n\t HEAP\n\t -- CLUSTERED COLUMNSTORE INDEX\n\t)\nGO\n\n--Uncomment the 4 lines below to create a stored procedure for data pipeline orchestration​\n--CREATE PROC bulk_load_TD_CARACTERISTICA_AUTORIZACAO\n--AS\n--BEGIN\nCOPY INTO PRODIM.TD_CARACTERISTICA_AUTORIZACAO\n(SK_TD_CARACTERISTICA_AUTORIZ 1, CO_HD_REGIME_ATENDIMENTO 2, CO_REGIME_ATENDIMENTO 3, DS_REGIME_ATENDIMENTO 4, CO_HD_CONDICAO_ATENDIMENTO 5, CO_CONDICAO_ATENDIMENTO 6, DS_CONDICAO_ATENDIMENTO 7, CO_HD_LOCAL_ATENDIMENTO 8, CO_LOCAL_ATENDIMENTO 9, DS_LOCAL_ATENDIMENTO 10, CO_HD_FINALIDADE_ATENDIMENTO 11, CO_FINALIDADE_ATENDIMENTO 12, DS_FINALIDADE_ATENDIMENTO 13, CO_HD_TIPO_AUTORIZACAO 14, CO_TIPO_AUTORIZACAO 15, DS_TIPO_AUTORIZACAO 16, CO_HD_TIPO_TRATAMENTO 17, CO_TIPO_TRATAMENTO 18, DS_TIPO_TRATAMENTO 19, CO_HD_OBJETIVO_TRATAMENTO 20, CO_OBJETIVO_TRATAMENTO 21, DS_OBJETIVO_TRATAMENTO 22, CO_HD_ACOMODACAO 23, CO_ACOMODACAO 24, DS_ACOMODACAO 25, CO_HD_MOTIVO_ALTA 26, CO_MOTIVO_ALTA 27, DS_MOTIVO_ALTA 28, PK_GRUPO 29, DT_INICIO_VIGENCIA 30, DT_FIM_VIGENCIA 31, DT_INCLUSAO_REGISTRO 32, DT_ALTERACAO_REGISTRO 33, ST_REGISTRO_CORRENTE 34, PK_GRUPO_HIERARQUIA 35)\nFROM 'https://stgcassidatalake001.dfs.core.windows.net/gold/FATO/TD_CARACTERISTICA_AUTORIZACAO'\nWITH\n(\n\tFILE_TYPE = 'PARQUET'\n\t,MAXERRORS = 0\n\t,COMPRESSION = 'snappy'\n)\n--END\nGO\n\nSELECT TOP 100 * FROM PRODIM.TD_CARACTERISTICA_AUTORIZACAO\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlprod",
						"poolName": "synsqlprod"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 7')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "drop table PRODIM.TD_CARACTERISTICA_AUTORIZACAO\ngo \nIF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'TD_CARACTERISTICA_AUTORIZACAO' AND O.TYPE = 'U' AND S.NAME = 'PRODIM')\nCREATE TABLE PRODIM.TD_CARACTERISTICA_AUTORIZACAO\n\t(\n\t [SK_TD_CARACTERISTICA_AUTORIZ] numeric(38),\n\t [CO_HD_REGIME_ATENDIMENTO] numeric(38),\n\t [CO_REGIME_ATENDIMENTO] numeric(38),\n\t [DS_REGIME_ATENDIMENTO] nvarchar(4000),\n\t [CO_HD_CONDICAO_ATENDIMENTO] numeric(38),\n\t [CO_CONDICAO_ATENDIMENTO] numeric(38),\n\t [DS_CONDICAO_ATENDIMENTO] nvarchar(4000),\n\t [CO_HD_LOCAL_ATENDIMENTO] numeric(38),\n\t [CO_LOCAL_ATENDIMENTO] numeric(38),\n\t [DS_LOCAL_ATENDIMENTO] nvarchar(4000),\n\t [CO_HD_FINALIDADE_ATENDIMENTO] numeric(38),\n\t [CO_FINALIDADE_ATENDIMENTO] numeric(38),\n\t [DS_FINALIDADE_ATENDIMENTO] nvarchar(4000),\n\t [CO_HD_TIPO_AUTORIZACAO] numeric(38),\n\t [CO_TIPO_AUTORIZACAO] numeric(38),\n\t [DS_TIPO_AUTORIZACAO] nvarchar(4000),\n\t [CO_HD_TIPO_TRATAMENTO] numeric(38),\n\t [CO_TIPO_TRATAMENTO] numeric(38),\n\t [DS_TIPO_TRATAMENTO] nvarchar(4000),\n\t [CO_HD_OBJETIVO_TRATAMENTO] numeric(38),\n\t [CO_OBJETIVO_TRATAMENTO] numeric(38),\n\t [DS_OBJETIVO_TRATAMENTO] nvarchar(4000),\n\t [CO_HD_ACOMODACAO] numeric(38),\n\t [CO_ACOMODACAO] numeric(38),\n\t [DS_ACOMODACAO] nvarchar(4000),\n\t [CO_HD_MOTIVO_ALTA] numeric(38),\n\t [CO_MOTIVO_ALTA] numeric(38),\n\t [DS_MOTIVO_ALTA] nvarchar(4000),\n\t [PK_GRUPO] numeric(38),\n\t [DT_INICIO_VIGENCIA] datetime2(7),\n\t [DT_FIM_VIGENCIA] datetime2(7),\n\t [DT_INCLUSAO_REGISTRO] datetime2(7),\n\t [DT_ALTERACAO_REGISTRO] datetime2(7),\n\t [ST_REGISTRO_CORRENTE] nvarchar(4000),\n\t [PK_GRUPO_HIERARQUIA] nvarchar(4000)\n\t)\nWITH\n\t(\n\tDISTRIBUTION = ROUND_ROBIN,\n\t HEAP\n\t -- CLUSTERED COLUMNSTORE INDEX\n\t)\nGO\n\n--Uncomment the 4 lines below to create a stored procedure for data pipeline orchestration​\n--CREATE PROC bulk_load_TD_CARACTERISTICA_AUTORIZACAO\n--AS\n--BEGIN\nCOPY INTO PRODIM.TD_CARACTERISTICA_AUTORIZACAO\n(SK_TD_CARACTERISTICA_AUTORIZ 1, CO_HD_REGIME_ATENDIMENTO 2, CO_REGIME_ATENDIMENTO 3, DS_REGIME_ATENDIMENTO 4, CO_HD_CONDICAO_ATENDIMENTO 5, CO_CONDICAO_ATENDIMENTO 6, DS_CONDICAO_ATENDIMENTO 7, CO_HD_LOCAL_ATENDIMENTO 8, CO_LOCAL_ATENDIMENTO 9, DS_LOCAL_ATENDIMENTO 10, CO_HD_FINALIDADE_ATENDIMENTO 11, CO_FINALIDADE_ATENDIMENTO 12, DS_FINALIDADE_ATENDIMENTO 13, CO_HD_TIPO_AUTORIZACAO 14, CO_TIPO_AUTORIZACAO 15, DS_TIPO_AUTORIZACAO 16, CO_HD_TIPO_TRATAMENTO 17, CO_TIPO_TRATAMENTO 18, DS_TIPO_TRATAMENTO 19, CO_HD_OBJETIVO_TRATAMENTO 20, CO_OBJETIVO_TRATAMENTO 21, DS_OBJETIVO_TRATAMENTO 22, CO_HD_ACOMODACAO 23, CO_ACOMODACAO 24, DS_ACOMODACAO 25, CO_HD_MOTIVO_ALTA 26, CO_MOTIVO_ALTA 27, DS_MOTIVO_ALTA 28, PK_GRUPO 29, DT_INICIO_VIGENCIA 30, DT_FIM_VIGENCIA 31, DT_INCLUSAO_REGISTRO 32, DT_ALTERACAO_REGISTRO 33, ST_REGISTRO_CORRENTE 34, PK_GRUPO_HIERARQUIA 35)\nFROM 'https://stgcassidatalake001.dfs.core.windows.net/gold/FATO/TD_CARACTERISTICA_AUTORIZACAO'\nWITH\n(\n\tFILE_TYPE = 'PARQUET'\n\t,MAXERRORS = 0\n)\n--END\nGO\n\nSELECT TOP 100 * FROM PRODIM.TD_CARACTERISTICA_AUTORIZACAO\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlprod",
						"poolName": "synsqlprod"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 8')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "drop table PRODML.TB_DIAGNOSE_TERAPIAS_LIMITES_IDATEND\ngo \n\nIF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'TB_DIAGNOSE_TERAPIAS_LIMITES_IDATEND' AND O.TYPE = 'U' AND S.NAME = 'PRODML')\nCREATE TABLE PRODML.TB_DIAGNOSE_TERAPIAS_LIMITES_IDATEND\n\t(\n\t [HD_TGE_EVENTO2] int,\n\t [GRAU2] numeric(38,18),\n\t [count] bigint,\n\t [QTDPAGTO_mean] float,\n\t [QTDPAGTO_std] float,\n\t [QTDPAGTO_min] float,\n\t [QTDPAGTO_25] float,\n\t [QTDPAGTO_50] float,\n\t [QTDPAGTO_75] float,\n\t [QTDPAGTO_99] float,\n\t [QTDPAGTO_995] float,\n\t [QTDPAGTO_max] float,\n\t [LMSP] float,\n\t [LMSP_EX] float,\n\t [LMSP_995] float,\n\t [LMSP_99] float,\n\t [MAIOR99] bit\n\t)\nWITH\n\t(\n\tDISTRIBUTION = ROUND_ROBIN,\n\t CLUSTERED COLUMNSTORE INDEX\n\t -- HEAP\n\t)\nGO\n\n--Uncomment the 4 lines below to create a stored procedure for data pipeline orchestration​\n--CREATE PROC bulk_load_TB_DIAGNOSE_TERAPIAS_LIMITES_IDATEND\n--AS\n--BEGIN\nCOPY INTO PRODML.TB_DIAGNOSE_TERAPIAS_LIMITES_IDATEND\n(HD_TGE_EVENTO2 1, GRAU2 2, count 3, QTDPAGTO_mean 4, QTDPAGTO_std 5, QTDPAGTO_min 6, QTDPAGTO_25 7, QTDPAGTO_50 8, QTDPAGTO_75 9, QTDPAGTO_99 10, QTDPAGTO_995 11, QTDPAGTO_max 12, LMSP 13, LMSP_EX 14, LMSP_995 15, LMSP_99 16, MAIOR99 17)\nFROM 'https://stgcassigsmadatalake02.dfs.core.windows.net/data/raw-data/TB_DIAGNOSE_TERAPIAS_LIMITES_IDATEND'\nWITH\n(\n\tFILE_TYPE = 'PARQUET'\n\t,MAXERRORS = 0\n)\n--END\nGO\n\nSELECT TOP 100 * FROM PRODML.TB_DIAGNOSE_TERAPIAS_LIMITES_IDATEND\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlprod",
						"poolName": "synsqlprod"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 9')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "DROP TABLE [PRODML].[PPTB_OUTLIER_IDATEND_2]\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlprod",
						"poolName": "synsqlprod"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STD_CARACTERISTICA')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'TD_CARACTERISTICA_ATENDIMENTO' AND O.TYPE = 'U' AND S.NAME = 'PRODIM')\nCREATE TABLE PRODIM.TD_CARACTERISTICA_ATENDIMENTO\n\t(\n\tSK_TD_CARACTERISTICA_ATENDIM BIGINT NOT NULL,\n\tCO_REGIME_ATENDIMENTO BIGINT NOT NULL,\n\tDS_REGIME_ATENDIMENTO NVARCHAR(50),\n\tCO_CONDICAO_ATENDIMENTO BIGINT NOT NULL,\n\tDS_CONDICAO_ATENDIMENTO NVARCHAR(50),\n\tCO_LOCAL_ATENDIMENTO BIGINT NOT NULL,\n\tDS_LOCAL_ATENDIMENTO NVARCHAR(50),\n\tCO_FINALIDADE_ATENDIMENTO BIGINT NOT NULL,\n\tDS_FINALIDADE_ATENDIMENTO NVARCHAR(50),\n\tPK_GRUPO BIGINT NOT NULL,\n\tDT_INICIO_VIGENCIA DATETIME2(7)NOT NULL,\n\tDT_FIM_VIGENCIA DATETIME2(7),\n\tDT_INCLUSAO_REGISTRO DATETIME2(7),\n\tDT_ALTERACAO_REGISTRO DATETIME2(7),\n\tST_REGISTRO_CORRENTE NVARCHAR(2) NOT NULL,\n\tPK_GRUPO_HIERARQUIA NVARCHAR(40) NOT NULL,\n\tCO_PROGRAMA_CASSI BIGINT NOT NULL ,\n\tDS_PROGRAMA_CASSI NVARCHAR(50) ,\n\tCO_CARATER_ATENDIMENTO BIGINT NOT NULL ,\n\tDS_CARATER_ATENDIMENTO NVARCHAR(100) ,\n\tCO_REGIME_INTERNACAO BIGINT NOT NULL ,\n\tDS_REGIME_INTERNACAO NVARCHAR(100) ,\n\tCO_TIPO_ATENDIMENTO BIGINT NOT NULL ,\n\tDS_TIPO_ATENDIMENTO NVARCHAR(100) ,\n\tCO_TIPO_INTERNACAO BIGINT NOT NULL ,\n\tDS_TIPO_INTERNACAO NVARCHAR(100) ,\n\tCO_INDICADOR_ACIDENTE BIGINT NOT NULL ,\n\tDS_INDICADOR_ACIDENTE NVARCHAR(100) ,\n\tCO_TIPO_CONSULTA BIGINT NOT NULL ,\n\tDS_TIPO_CONSULTA NVARCHAR(250) \n\t)\nWITH\n\t(\n\tDISTRIBUTION = REPLICATE,\n\tHEAP\n\t)\nGO\n\n--Uncomment the 4 lines below to create a stored procedure for data pipeline orchestration​\n--CREATE PROC bulk_load_TD_CARACTERISTICA_ATENDIMENTO\n--AS\n--BEGIN\nCOPY INTO PRODIM.TD_CARACTERISTICA_ATENDIMENTO\n(SK_TD_CARACTERISTICA_ATENDIM 1, CO_REGIME_ATENDIMENTO 2, DS_REGIME_ATENDIMENTO 3, CO_CONDICAO_ATENDIMENTO 4, DS_CONDICAO_ATENDIMENTO 5, CO_LOCAL_ATENDIMENTO 6, DS_LOCAL_ATENDIMENTO 7, CO_FINALIDADE_ATENDIMENTO 8, DS_FINALIDADE_ATENDIMENTO 9, PK_GRUPO 10, DT_INICIO_VIGENCIA 11, DT_FIM_VIGENCIA 12, DT_INCLUSAO_REGISTRO 13, DT_ALTERACAO_REGISTRO 14, ST_REGISTRO_CORRENTE 15, PK_GRUPO_HIERARQUIA 16, CO_PROGRAMA_CASSI 17, DS_PROGRAMA_CASSI 18, CO_CARATER_ATENDIMENTO 19, DS_CARATER_ATENDIMENTO 20, CO_REGIME_INTERNACAO 21, DS_REGIME_INTERNACAO 22, CO_TIPO_ATENDIMENTO 23, DS_TIPO_ATENDIMENTO 24, CO_TIPO_INTERNACAO 25, DS_TIPO_INTERNACAO 26, CO_INDICADOR_ACIDENTE 27, DS_INDICADOR_ACIDENTE 28, CO_TIPO_CONSULTA 29, DS_TIPO_CONSULTA 30)\nFROM 'https://stgcassidatalake001.dfs.core.windows.net/gold/DIMENSAO/TD_CARACTERISTICA_ATENDIMENTO'\nWITH\n(\n\tFILE_TYPE = 'PARQUET'\n\t,MAXERRORS = 0\n)\n--END\nGO\n\nSELECT TOP 100 * FROM PRODIM.TD_CARACTERISTICA_ATENDIMENTO\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlprod",
						"poolName": "synsqlprod"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TBOUTLIER')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\n\n\nSELECT X.SK_TD_EVENTO, Z.media_qtd_Aut_Orig, x.mediana_qtd_Aut_Orig, X.qrt1_qtd_aut_Orig, X.qrt3_qtd_aut_Orig, X.amp_IntQtr, X.limite_superior_moderado, X.limite_inferior_moderado, X.limite_superior_extremo, X.limite_inferior_extremo\nFROM (\nSELECT distinct SK_TD_EVENTO,\nPERCENTILE_CONT (0.5) WITHIN GROUP (ORDER BY qt_autorizada_ori) OVER(partition by sk_td_evento) as mediana_qtd_Aut_Orig,\nPERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY qt_autorizada_ori) OVER(partition by sk_td_evento) as qrt1_qtd_aut_Orig,\nPERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY qt_autorizada_ori) OVER(partition by sk_td_evento) as qrt3_qtd_aut_Orig,\nPERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY qt_autorizada_ori) OVER(partition by sk_td_evento) - PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY qt_autorizada_ori) OVER(partition by sk_td_evento) as amp_IntQtr,\nPERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY qt_autorizada_ori) OVER(partition by sk_td_evento) +1.5 * PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY qt_autorizada_ori) OVER(partition by sk_td_evento) - PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY qt_autorizada_ori) OVER(partition by sk_td_evento) as limite_superior_moderado,\nPERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY qt_autorizada_ori) OVER(partition by sk_td_evento) -1.5 * PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY qt_autorizada_ori) OVER(partition by sk_td_evento) - PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY qt_autorizada_ori) OVER(partition by sk_td_evento) as limite_inferior_moderado,\nPERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY qt_autorizada_ori) OVER(partition by sk_td_evento) +3 * PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY qt_autorizada_ori) OVER(partition by sk_td_evento) - PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY qt_autorizada_ori) OVER(partition by sk_td_evento) as limite_superior_extremo,\nPERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY qt_autorizada_ori) OVER(partition by sk_td_evento) -3 * PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY qt_autorizada_ori) OVER(partition by sk_td_evento) - PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY qt_autorizada_ori) OVER(partition by sk_td_evento) as limite_inferior_extremo\nFROM [PRODIM].[TF_AUTORIZACAO]\nwhere sk_td_evento = 184381\n) X\n\nINNER JOIN (select SK_TD_EVENTO, avg(QT_AUTORIZADA_ORI) AS media_qtd_Aut_Orig from PRODIM.TF_AUTORIZACAO GROUP by SK_TD_EVENTO) AS Z ON Z.sk_td_evento = X.sk_td_evento\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlprod",
						"poolName": "synsqlprod"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/view tb_outlier_Seanny')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "create view PROVIW.TB_OUTLIER\nAS\nselect\nfav.SK_TD_EVENTO,\navg(fav.QT_AUTORIZADA_ORI)as media_qtd_Aut_Orig, \n--median(fav.QT_AUTORIZADA_ORI) mediana_qtd_Aut_Orig,\nPERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY fav.qt_autorizada_ori) OVER () as qrt1_qtd_aut_Orig,\nPERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY fav.qt_autorizada_ori) OVER () as qrt3_qtd_aut_Orig,\nPERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY fav.qt_autorizada_ori) OVER () - PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY fav.qt_autorizada_ori) OVER () as amp_IntQtr,\nPERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY fav.qt_autorizada_ori) OVER () +1.5 * PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY fav.qt_autorizada_ori) OVER () - PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY fav.qt_autorizada_ori) OVER () as limite_superior_moderado,\nPERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY fav.qt_autorizada_ori) OVER () -1.5 * PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY fav.qt_autorizada_ori) OVER () - PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY fav.qt_autorizada_ori) OVER () as limite_inferior_moderado,\nPERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY fav.qt_autorizada_ori) OVER () +3 * PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY fav.qt_autorizada_ori) OVER () - PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY fav.qt_autorizada_ori) OVER () as limite_superior_extremo,\nPERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY fav.qt_autorizada_ori) OVER () -3 * PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY fav.qt_autorizada_ori) OVER () - PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY fav.qt_autorizada_ori) OVER () as limite_inferior_extremo\n\n\nfrom PRODIM.TF_AUTORIZACAO as fav\nleft join PRODIM.TD_PRESTADOR as pr \non pr.sk_td_prestador = fav.SK_TD_PRESTADOR_EXECUTANTE\n\ngroup by fav.SK_TD_EVENTO, fav.QT_AUTORIZADA_ORI\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "synsqlprod",
						"poolName": "synsqlprod"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NTB_01_TRATAMENTO_TD_CARACTERISTICA_AUTORIZACAO')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "synPoolSpark002",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "0c3a782c-4edd-416b-9f85-0b447b778bdb"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"81ff4dbe-d6da-4a14-b4d2-2bbde0f34a04": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "175.000000000000000000",
												"1": "1.000000000000000000",
												"2": "1.000000000000000000",
												"3": "AMBULATORIAL",
												"4": "1.000000000000000000",
												"5": "1.000000000000000000",
												"6": "ELETIVO",
												"7": "1.000000000000000000",
												"8": "1.000000000000000000",
												"9": "REDE CREDENCIADA",
												"10": "2.000000000000000000",
												"11": "2.000000000000000000",
												"12": "ACIDENTE DO TRABALHO",
												"13": "10.000000000000000000",
												"14": "8.000000000000000000",
												"15": "UNIDADE",
												"16": "2.000000000000000000",
												"17": "2.000000000000000000",
												"18": "CIRÚRGICO",
												"19": "1.000000000000000000",
												"20": "1.000000000000000000",
												"21": "REPARADOR",
												"22": "-2.000000000000000000",
												"23": "-2.000000000000000000",
												"24": "NÃO INFORMADO",
												"25": "-2.000000000000000000",
												"26": "-2.000000000000000000",
												"27": "NÃO INFORMADO",
												"28": "1.000000000000000000",
												"29": "2014-08-25 11:20:56",
												"31": "2014-08-25 11:20:56",
												"33": "S",
												"34": "11121021-2-2"
											},
											{
												"0": "1055.000000000000000000",
												"1": "1.000000000000000000",
												"2": "1.000000000000000000",
												"3": "AMBULATORIAL",
												"4": "1.000000000000000000",
												"5": "1.000000000000000000",
												"6": "ELETIVO",
												"7": "1.000000000000000000",
												"8": "1.000000000000000000",
												"9": "REDE CREDENCIADA",
												"10": "12.000000000000000000",
												"11": "11.000000000000000000",
												"12": "LIMINAR JUDICIAL",
												"13": "16.000000000000000000",
												"14": "20.000000000000000000",
												"15": "SEDE - DIVISÃO DE REGULAÇÃO",
												"16": "2.000000000000000000",
												"17": "2.000000000000000000",
												"18": "CIRÚRGICO",
												"19": "5.000000000000000000",
												"20": "5.000000000000000000",
												"21": "TERAPÊUTICO",
												"22": "1.000000000000000000",
												"23": "1.000000000000000000",
												"24": "APARTAMENTO",
												"25": "-2.000000000000000000",
												"26": "-2.000000000000000000",
												"27": "NÃO INFORMADO",
												"28": "1.000000000000000000",
												"29": "2014-08-25 11:20:59",
												"30": "2015-10-03 19:15:05",
												"31": "2014-08-25 11:20:59",
												"33": "N",
												"34": "1111216251-2"
											},
											{
												"0": "1495.000000000000000000",
												"1": "3.000000000000000000",
												"2": "3.000000000000000000",
												"3": "INTERNAÇÃO HOSPITALAR",
												"4": "1.000000000000000000",
												"5": "1.000000000000000000",
												"6": "ELETIVO",
												"7": "1.000000000000000000",
												"8": "1.000000000000000000",
												"9": "REDE CREDENCIADA",
												"10": "4.000000000000000000",
												"11": "4.000000000000000000",
												"12": "PERIÓDICO",
												"13": "19.000000000000000000",
												"14": "10.000000000000000000",
												"15": "TISS - INTERNAÇÃO",
												"16": "1.000000000000000000",
												"17": "1.000000000000000000",
												"18": "CLÍNICO",
												"19": "1.000000000000000000",
												"20": "1.000000000000000000",
												"21": "REPARADOR",
												"22": "5.000000000000000000",
												"23": "5.000000000000000000",
												"24": "UTI ADULTO GERAL",
												"25": "-2.000000000000000000",
												"26": "-2.000000000000000000",
												"27": "NÃO INFORMADO",
												"28": "3.000000000000000000",
												"29": "2017-03-06 00:00:13",
												"31": "2017-03-06 00:00:13",
												"33": "S",
												"34": "311419115-2"
											},
											{
												"0": "615.000000000000000000",
												"1": "4.000000000000000000",
												"2": "4.000000000000000000",
												"3": "PSIQUIATRIA -HOSPITAL DIA",
												"4": "2.000000000000000000",
												"5": "2.000000000000000000",
												"6": "URGÊNCIA",
												"7": "1.000000000000000000",
												"8": "1.000000000000000000",
												"9": "REDE CREDENCIADA",
												"10": "1.000000000000000000",
												"11": "1.000000000000000000",
												"12": "NORMAL",
												"13": "12.000000000000000000",
												"14": "5.000000000000000000",
												"15": "INTERNAÇÃO",
												"16": "6.000000000000000000",
												"17": "6.000000000000000000",
												"18": "PSIQUIÁTRICO",
												"19": "1.000000000000000000",
												"20": "1.000000000000000000",
												"21": "REPARADOR",
												"22": "1.000000000000000000",
												"23": "1.000000000000000000",
												"24": "APARTAMENTO",
												"25": "-2.000000000000000000",
												"26": "-2.000000000000000000",
												"27": "NÃO INFORMADO",
												"28": "4.000000000000000000",
												"29": "2014-08-25 11:20:59",
												"30": "2019-07-06 00:19:01",
												"31": "2014-08-25 11:20:59",
												"33": "N",
												"34": "421112611-2"
											},
											{
												"0": "1935.000000000000000000",
												"1": "2.000000000000000000",
												"2": "2.000000000000000000",
												"3": "ATENDIMENTO DOMICILIAR",
												"4": "2.000000000000000000",
												"5": "2.000000000000000000",
												"6": "URGÊNCIA",
												"7": "1.000000000000000000",
												"8": "1.000000000000000000",
												"9": "REDE CREDENCIADA",
												"10": "1.000000000000000000",
												"11": "1.000000000000000000",
												"12": "NORMAL",
												"13": "10.000000000000000000",
												"14": "8.000000000000000000",
												"15": "UNIDADE",
												"16": "1.000000000000000000",
												"17": "1.000000000000000000",
												"18": "CLÍNICO",
												"19": "1.000000000000000000",
												"20": "1.000000000000000000",
												"21": "REPARADOR",
												"22": "-2.000000000000000000",
												"23": "-2.000000000000000000",
												"24": "NÃO INFORMADO",
												"25": "-2.000000000000000000",
												"26": "-2.000000000000000000",
												"27": "NÃO INFORMADO",
												"28": "2.000000000000000000",
												"29": "2019-07-06 00:19:02",
												"31": "2014-08-25 11:20:56",
												"33": "S",
												"34": "22111011-2-2"
											},
											{
												"0": "415.000000000000000000",
												"1": "3.000000000000000000",
												"2": "3.000000000000000000",
												"3": "INTERNAÇÃO HOSPITALAR",
												"4": "1.000000000000000000",
												"5": "1.000000000000000000",
												"6": "ELETIVO",
												"7": "1.000000000000000000",
												"8": "1.000000000000000000",
												"9": "REDE CREDENCIADA",
												"10": "1.000000000000000000",
												"11": "1.000000000000000000",
												"12": "NORMAL",
												"13": "10.000000000000000000",
												"14": "8.000000000000000000",
												"15": "UNIDADE",
												"16": "5.000000000000000000",
												"17": "15.000000000000000000",
												"18": "DEPENDÊNCIA QUÍMICA",
												"19": "1.000000000000000000",
												"20": "1.000000000000000000",
												"21": "REPARADOR",
												"22": "-2.000000000000000000",
												"23": "-2.000000000000000000",
												"24": "NÃO INFORMADO",
												"25": "-2.000000000000000000",
												"26": "-2.000000000000000000",
												"27": "NÃO INFORMADO",
												"28": "3.000000000000000000",
												"29": "2014-08-25 11:20:56",
												"31": "2014-08-25 11:20:56",
												"33": "S",
												"34": "31111051-2-2"
											},
											{
												"0": "855.000000000000000000",
												"1": "1.000000000000000000",
												"2": "1.000000000000000000",
												"3": "AMBULATORIAL",
												"4": "4.000000000000000000",
												"5": "3.000000000000000000",
												"6": "EMERGÊNCIA",
												"7": "1.000000000000000000",
												"8": "1.000000000000000000",
												"9": "REDE CREDENCIADA",
												"10": "1.000000000000000000",
												"11": "1.000000000000000000",
												"12": "NORMAL",
												"13": "2.000000000000000000",
												"14": "4.000000000000000000",
												"15": "REMOÇÃO",
												"16": "1.000000000000000000",
												"17": "1.000000000000000000",
												"18": "CLÍNICO",
												"19": "3.000000000000000000",
												"20": "3.000000000000000000",
												"21": "DIAGNÓSTICO",
												"22": "-2.000000000000000000",
												"23": "-2.000000000000000000",
												"24": "NÃO INFORMADO",
												"25": "-2.000000000000000000",
												"26": "-2.000000000000000000",
												"27": "NÃO INFORMADO",
												"28": "1.000000000000000000",
												"29": "2014-08-25 11:20:59",
												"31": "2014-08-25 11:20:59",
												"33": "S",
												"34": "1411213-2-2"
											},
											{
												"0": "1295.000000000000000000",
												"1": "1.000000000000000000",
												"2": "1.000000000000000000",
												"3": "AMBULATORIAL",
												"4": "1.000000000000000000",
												"5": "1.000000000000000000",
												"6": "ELETIVO",
												"7": "2.000000000000000000",
												"8": "2.000000000000000000",
												"9": "LIVRE ESCOLHA",
												"10": "12.000000000000000000",
												"11": "11.000000000000000000",
												"12": "LIMINAR JUDICIAL",
												"13": "47.000000000000000000",
												"14": "30.000000000000000000",
												"15": "LIMINAR JUDICIAL",
												"16": "2.000000000000000000",
												"17": "2.000000000000000000",
												"18": "CIRÚRGICO",
												"19": "3.000000000000000000",
												"20": "3.000000000000000000",
												"21": "DIAGNÓSTICO",
												"22": "-2.000000000000000000",
												"23": "-2.000000000000000000",
												"24": "NÃO INFORMADO",
												"25": "-2.000000000000000000",
												"26": "-2.000000000000000000",
												"27": "NÃO INFORMADO",
												"28": "1.000000000000000000",
												"29": "2016-05-03 10:52:16",
												"31": "2016-05-03 10:52:16",
												"33": "S",
												"34": "112124723-2-2"
											},
											{
												"0": "1735.000000000000000000",
												"1": "2.000000000000000000",
												"2": "2.000000000000000000",
												"3": "ATENDIMENTO DOMICILIAR",
												"4": "1.000000000000000000",
												"5": "1.000000000000000000",
												"6": "ELETIVO",
												"7": "2.000000000000000000",
												"8": "2.000000000000000000",
												"9": "LIVRE ESCOLHA",
												"10": "1.000000000000000000",
												"11": "1.000000000000000000",
												"12": "NORMAL",
												"13": "16.000000000000000000",
												"14": "20.000000000000000000",
												"15": "SEDE",
												"16": "1.000000000000000000",
												"17": "1.000000000000000000",
												"18": "CLÍNICO",
												"19": "5.000000000000000000",
												"20": "5.000000000000000000",
												"21": "TERAPÊUTICO",
												"22": "-2.000000000000000000",
												"23": "-2.000000000000000000",
												"24": "NÃO INFORMADO",
												"25": "-2.000000000000000000",
												"26": "-2.000000000000000000",
												"27": "NÃO INFORMADO",
												"28": "2.000000000000000000",
												"29": "2019-07-06 00:19:00",
												"31": "2014-08-25 11:20:56",
												"33": "S",
												"34": "21211615-2-2"
											},
											{
												"0": "55.000000000000000000",
												"1": "3.000000000000000000",
												"2": "3.000000000000000000",
												"3": "INTERNAÇÃO HOSPITALAR",
												"4": "1.000000000000000000",
												"5": "1.000000000000000000",
												"6": "ELETIVO",
												"7": "1.000000000000000000",
												"8": "1.000000000000000000",
												"9": "REDE CREDENCIADA",
												"10": "1.000000000000000000",
												"11": "1.000000000000000000",
												"12": "NORMAL",
												"13": "19.000000000000000000",
												"14": "10.000000000000000000",
												"15": "TISS - INTERNAÇÃO",
												"16": "6.000000000000000000",
												"17": "6.000000000000000000",
												"18": "PSIQUIÁTRICO",
												"19": "1.000000000000000000",
												"20": "1.000000000000000000",
												"21": "REPARADOR",
												"22": "-2.000000000000000000",
												"23": "-2.000000000000000000",
												"24": "NÃO INFORMADO",
												"25": "-2.000000000000000000",
												"26": "-2.000000000000000000",
												"27": "NÃO INFORMADO",
												"28": "3.000000000000000000",
												"29": "2014-08-25 11:20:56",
												"31": "2014-08-25 11:20:56",
												"33": "S",
												"34": "31111961-2-2"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "SK_TD_CARACTERISTICA_AUTORIZ",
												"type": "decimal"
											},
											{
												"key": "1",
												"name": "CO_HD_REGIME_ATENDIMENTO",
												"type": "decimal"
											},
											{
												"key": "2",
												"name": "CO_REGIME_ATENDIMENTO",
												"type": "decimal"
											},
											{
												"key": "3",
												"name": "DS_REGIME_ATENDIMENTO",
												"type": "string"
											},
											{
												"key": "4",
												"name": "CO_HD_CONDICAO_ATENDIMENTO",
												"type": "decimal"
											},
											{
												"key": "5",
												"name": "CO_CONDICAO_ATENDIMENTO",
												"type": "decimal"
											},
											{
												"key": "6",
												"name": "DS_CONDICAO_ATENDIMENTO",
												"type": "string"
											},
											{
												"key": "7",
												"name": "CO_HD_LOCAL_ATENDIMENTO",
												"type": "decimal"
											},
											{
												"key": "8",
												"name": "CO_LOCAL_ATENDIMENTO",
												"type": "decimal"
											},
											{
												"key": "9",
												"name": "DS_LOCAL_ATENDIMENTO",
												"type": "string"
											},
											{
												"key": "10",
												"name": "CO_HD_FINALIDADE_ATENDIMENTO",
												"type": "decimal"
											},
											{
												"key": "11",
												"name": "CO_FINALIDADE_ATENDIMENTO",
												"type": "decimal"
											},
											{
												"key": "12",
												"name": "DS_FINALIDADE_ATENDIMENTO",
												"type": "string"
											},
											{
												"key": "13",
												"name": "CO_HD_TIPO_AUTORIZACAO",
												"type": "decimal"
											},
											{
												"key": "14",
												"name": "CO_TIPO_AUTORIZACAO",
												"type": "decimal"
											},
											{
												"key": "15",
												"name": "DS_TIPO_AUTORIZACAO",
												"type": "string"
											},
											{
												"key": "16",
												"name": "CO_HD_TIPO_TRATAMENTO",
												"type": "decimal"
											},
											{
												"key": "17",
												"name": "CO_TIPO_TRATAMENTO",
												"type": "decimal"
											},
											{
												"key": "18",
												"name": "DS_TIPO_TRATAMENTO",
												"type": "string"
											},
											{
												"key": "19",
												"name": "CO_HD_OBJETIVO_TRATAMENTO",
												"type": "decimal"
											},
											{
												"key": "20",
												"name": "CO_OBJETIVO_TRATAMENTO",
												"type": "decimal"
											},
											{
												"key": "21",
												"name": "DS_OBJETIVO_TRATAMENTO",
												"type": "string"
											},
											{
												"key": "22",
												"name": "CO_HD_ACOMODACAO",
												"type": "decimal"
											},
											{
												"key": "23",
												"name": "CO_ACOMODACAO",
												"type": "decimal"
											},
											{
												"key": "24",
												"name": "DS_ACOMODACAO",
												"type": "string"
											},
											{
												"key": "25",
												"name": "CO_HD_MOTIVO_ALTA",
												"type": "decimal"
											},
											{
												"key": "26",
												"name": "CO_MOTIVO_ALTA",
												"type": "decimal"
											},
											{
												"key": "27",
												"name": "DS_MOTIVO_ALTA",
												"type": "string"
											},
											{
												"key": "28",
												"name": "PK_GRUPO",
												"type": "decimal"
											},
											{
												"key": "29",
												"name": "DT_INICIO_VIGENCIA",
												"type": "timestamp"
											},
											{
												"key": "30",
												"name": "DT_FIM_VIGENCIA",
												"type": "timestamp"
											},
											{
												"key": "31",
												"name": "DT_INCLUSAO_REGISTRO",
												"type": "timestamp"
											},
											{
												"key": "32",
												"name": "DT_ALTERACAO_REGISTRO",
												"type": "timestamp"
											},
											{
												"key": "33",
												"name": "ST_REGISTRO_CORRENTE",
												"type": "string"
											},
											{
												"key": "34",
												"name": "PK_GRUPO_HIERARQUIA",
												"type": "string"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"4ac4f9a2-59fa-4a5e-980c-759c4e742814": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "174",
												"1": "3",
												"2": "3",
												"3": "INTERNAÇÃO HOSPITALAR",
												"4": "4",
												"5": "3",
												"6": "EMERGÊNCIA",
												"7": "1",
												"8": "1",
												"9": "REDE CREDENCIADA",
												"10": "1",
												"11": "1",
												"12": "NORMAL",
												"13": "19",
												"14": "10",
												"15": "TISS - INTERNAÇÃO",
												"16": "2",
												"17": "2",
												"18": "CIRÚRGICO",
												"19": "1",
												"20": "1",
												"21": "REPARADOR",
												"22": "1",
												"23": "1",
												"24": "APARTAMENTO",
												"25": "-2",
												"26": "-2",
												"27": "NÃO INFORMADO",
												"28": "3",
												"29": "2014-08-25 11:20:56",
												"31": "2014-08-25 11:20:56",
												"33": "S",
												"34": "341119211-2"
											},
											{
												"0": "1054",
												"1": "1",
												"2": "1",
												"3": "AMBULATORIAL",
												"4": "1",
												"5": "1",
												"6": "ELETIVO",
												"7": "1",
												"8": "1",
												"9": "REDE CREDENCIADA",
												"10": "1",
												"11": "1",
												"12": "NORMAL",
												"13": "67",
												"14": "300",
												"15": "ADMISSIONAL",
												"16": "1",
												"17": "1",
												"18": "CLÍNICO",
												"19": "3",
												"20": "3",
												"21": "DIAGNÓSTICO",
												"22": "-2",
												"23": "-2",
												"24": "NÃO INFORMADO",
												"25": "-2",
												"26": "-2",
												"27": "NÃO INFORMADO",
												"28": "1",
												"29": "2014-08-25 11:20:59",
												"31": "2014-08-25 11:20:59",
												"33": "S",
												"34": "11116713-2-2"
											},
											{
												"0": "1494",
												"1": "3",
												"2": "3",
												"3": "INTERNAÇÃO HOSPITALAR",
												"4": "1",
												"5": "1",
												"6": "ELETIVO",
												"7": "1",
												"8": "1",
												"9": "REDE CREDENCIADA",
												"10": "1",
												"11": "1",
												"12": "NORMAL",
												"13": "20",
												"14": "11",
												"15": "TISS - SP/SADT",
												"16": "1",
												"17": "1",
												"18": "CLÍNICO",
												"19": "3",
												"20": "3",
												"21": "DIAGNÓSTICO",
												"22": "7",
												"23": "7",
												"24": "UTI NEONATAL",
												"25": "-2",
												"26": "-2",
												"27": "NÃO INFORMADO",
												"28": "3",
												"29": "2017-03-06 00:00:13",
												"31": "2017-03-06 00:00:13",
												"33": "S",
												"34": "311120137-2"
											},
											{
												"0": "614",
												"1": "1",
												"2": "1",
												"3": "AMBULATORIAL",
												"4": "1",
												"5": "1",
												"6": "ELETIVO",
												"7": "1",
												"8": "1",
												"9": "REDE CREDENCIADA",
												"10": "9",
												"11": "9",
												"12": "PERÍCIA",
												"13": "20",
												"14": "11",
												"15": "TISS - SP/SADT",
												"16": "2",
												"17": "2",
												"18": "CIRÚRGICO",
												"19": "5",
												"20": "5",
												"21": "TERAPÊUTICO",
												"22": "-2",
												"23": "-2",
												"24": "NÃO INFORMADO",
												"25": "-2",
												"26": "-2",
												"27": "NÃO INFORMADO",
												"28": "1",
												"29": "2014-08-25 11:20:59",
												"30": "2017-03-17 00:12:57",
												"31": "2014-08-25 11:20:59",
												"33": "N",
												"34": "11192025-2-2"
											},
											{
												"0": "1934",
												"1": "4",
												"2": "4",
												"3": "INTERNAÇÃO PSIQUIÁTRICA",
												"4": "1",
												"5": "1",
												"6": "ELETIVO",
												"7": "1",
												"8": "1",
												"9": "REDE CREDENCIADA",
												"10": "1",
												"11": "1",
												"12": "NORMAL",
												"13": "19",
												"14": "10",
												"15": "TISS - INTERNAÇÃO",
												"16": "1",
												"17": "1",
												"18": "CLÍNICO",
												"19": "1",
												"20": "1",
												"21": "REPARADOR",
												"22": "44",
												"23": "44",
												"24": "APARTAMENTO SIMPLES DE PSIQUIATRIA",
												"25": "-2",
												"26": "-2",
												"27": "NÃO INFORMADO",
												"28": "4",
												"29": "2019-07-06 00:19:02",
												"31": "2016-09-03 08:27:40",
												"33": "S",
												"34": "4111191144-2"
											},
											{
												"0": "294",
												"1": "1",
												"2": "1",
												"3": "AMBULATORIAL",
												"4": "1",
												"5": "1",
												"6": "ELETIVO",
												"7": "1",
												"8": "1",
												"9": "REDE CREDENCIADA",
												"10": "1",
												"11": "1",
												"12": "NORMAL",
												"13": "10",
												"14": "8",
												"15": "UNIDADE",
												"16": "2",
												"17": "2",
												"18": "CIRÚRGICO",
												"19": "1",
												"20": "1",
												"21": "REPARADOR",
												"22": "1",
												"23": "1",
												"24": "APARTAMENTO",
												"25": "-2",
												"26": "-2",
												"27": "NÃO INFORMADO",
												"28": "1",
												"29": "2014-08-25 11:20:56",
												"31": "2014-08-25 11:20:56",
												"33": "S",
												"34": "111110211-2"
											},
											{
												"0": "734",
												"1": "1",
												"2": "1",
												"3": "AMBULATORIAL",
												"4": "4",
												"5": "3",
												"6": "EMERGÊNCIA",
												"7": "1",
												"8": "1",
												"9": "REDE CREDENCIADA",
												"10": "1",
												"11": "1",
												"12": "NORMAL",
												"13": "4",
												"14": "1",
												"15": "AMBULATORIAL",
												"16": "2",
												"17": "2",
												"18": "CIRÚRGICO",
												"19": "3",
												"20": "3",
												"21": "DIAGNÓSTICO",
												"22": "-2",
												"23": "-2",
												"24": "NÃO INFORMADO",
												"25": "-2",
												"26": "-2",
												"27": "NÃO INFORMADO",
												"28": "1",
												"29": "2014-08-25 11:20:59",
												"31": "2014-08-25 11:20:59",
												"33": "S",
												"34": "1411423-2-2"
											},
											{
												"0": "1174",
												"1": "3",
												"2": "3",
												"3": "INTERNAÇÃO HOSPITALAR",
												"4": "1",
												"5": "1",
												"6": "ELETIVO",
												"7": "1",
												"8": "1",
												"9": "REDE CREDENCIADA",
												"10": "1",
												"11": "1",
												"12": "NORMAL",
												"13": "16",
												"14": "20",
												"15": "SEDE",
												"16": "2",
												"17": "2",
												"18": "CIRÚRGICO",
												"19": "1",
												"20": "1",
												"21": "REPARADOR",
												"22": "1",
												"23": "1",
												"24": "APARTAMENTO",
												"25": "-2",
												"26": "-2",
												"27": "NÃO INFORMADO",
												"28": "3",
												"29": "2015-10-03 19:15:03",
												"31": "2014-08-25 11:20:56",
												"33": "S",
												"34": "311116211-2"
											},
											{
												"0": "1614",
												"1": "3",
												"2": "3",
												"3": "INTERNAÇÃO HOSPITALAR",
												"4": "1",
												"5": "1",
												"6": "ELETIVO",
												"7": "1",
												"8": "1",
												"9": "REDE CREDENCIADA",
												"10": "1",
												"11": "1",
												"12": "NORMAL",
												"13": "19",
												"14": "10",
												"15": "TISS - INTERNAÇÃO",
												"16": "1",
												"17": "1",
												"18": "CLÍNICO",
												"19": "1",
												"20": "1",
												"21": "REPARADOR",
												"22": "13",
												"23": "13",
												"24": "HOSPITAL DIA",
												"25": "-2",
												"26": "-2",
												"27": "NÃO INFORMADO",
												"28": "3",
												"29": "2018-10-03 14:08:28",
												"31": "2018-10-03 14:08:28",
												"33": "S",
												"34": "3111191113-2"
											},
											{
												"0": "2054",
												"1": "4",
												"2": "4",
												"3": "INTERNAÇÃO PSIQUIÁTRICA",
												"4": "1",
												"5": "1",
												"6": "ELETIVO",
												"7": "1",
												"8": "1",
												"9": "REDE CREDENCIADA",
												"10": "12",
												"11": "11",
												"12": "LIMINAR JUDICIAL",
												"13": "68",
												"14": "31",
												"15": "LIMINAR JUDICIAL - INTERNAÇÃO",
												"16": "-2",
												"17": "-2",
												"18": "NÃO INFORMADO",
												"19": "-2",
												"20": "-2",
												"21": "NÃO INFORMADO",
												"22": "43",
												"23": "43",
												"24": "APARTAMENTO STANDARD",
												"25": "-2",
												"26": "-2",
												"27": "NÃO INFORMADO",
												"28": "4",
												"29": "2019-11-08 01:33:28",
												"31": "2019-11-08 01:33:28",
												"33": "S",
												"34": "4111268-2-243-2"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "SK_TD_CARACTERISTICA_AUTORIZ",
												"type": "int"
											},
											{
												"key": "1",
												"name": "CO_HD_REGIME_ATENDIMENTO",
												"type": "int"
											},
											{
												"key": "2",
												"name": "CO_REGIME_ATENDIMENTO",
												"type": "int"
											},
											{
												"key": "3",
												"name": "DS_REGIME_ATENDIMENTO",
												"type": "string"
											},
											{
												"key": "4",
												"name": "CO_HD_CONDICAO_ATENDIMENTO",
												"type": "int"
											},
											{
												"key": "5",
												"name": "CO_CONDICAO_ATENDIMENTO",
												"type": "int"
											},
											{
												"key": "6",
												"name": "DS_CONDICAO_ATENDIMENTO",
												"type": "string"
											},
											{
												"key": "7",
												"name": "CO_HD_LOCAL_ATENDIMENTO",
												"type": "int"
											},
											{
												"key": "8",
												"name": "CO_LOCAL_ATENDIMENTO",
												"type": "int"
											},
											{
												"key": "9",
												"name": "DS_LOCAL_ATENDIMENTO",
												"type": "string"
											},
											{
												"key": "10",
												"name": "CO_HD_FINALIDADE_ATENDIMENTO",
												"type": "int"
											},
											{
												"key": "11",
												"name": "CO_FINALIDADE_ATENDIMENTO",
												"type": "int"
											},
											{
												"key": "12",
												"name": "DS_FINALIDADE_ATENDIMENTO",
												"type": "string"
											},
											{
												"key": "13",
												"name": "CO_HD_TIPO_AUTORIZACAO",
												"type": "int"
											},
											{
												"key": "14",
												"name": "CO_TIPO_AUTORIZACAO",
												"type": "int"
											},
											{
												"key": "15",
												"name": "DS_TIPO_AUTORIZACAO",
												"type": "string"
											},
											{
												"key": "16",
												"name": "CO_HD_TIPO_TRATAMENTO",
												"type": "int"
											},
											{
												"key": "17",
												"name": "CO_TIPO_TRATAMENTO",
												"type": "int"
											},
											{
												"key": "18",
												"name": "DS_TIPO_TRATAMENTO",
												"type": "string"
											},
											{
												"key": "19",
												"name": "CO_HD_OBJETIVO_TRATAMENTO",
												"type": "int"
											},
											{
												"key": "20",
												"name": "CO_OBJETIVO_TRATAMENTO",
												"type": "int"
											},
											{
												"key": "21",
												"name": "DS_OBJETIVO_TRATAMENTO",
												"type": "string"
											},
											{
												"key": "22",
												"name": "CO_HD_ACOMODACAO",
												"type": "int"
											},
											{
												"key": "23",
												"name": "CO_ACOMODACAO",
												"type": "int"
											},
											{
												"key": "24",
												"name": "DS_ACOMODACAO",
												"type": "string"
											},
											{
												"key": "25",
												"name": "CO_HD_MOTIVO_ALTA",
												"type": "int"
											},
											{
												"key": "26",
												"name": "CO_MOTIVO_ALTA",
												"type": "int"
											},
											{
												"key": "27",
												"name": "DS_MOTIVO_ALTA",
												"type": "string"
											},
											{
												"key": "28",
												"name": "PK_GRUPO",
												"type": "int"
											},
											{
												"key": "29",
												"name": "DT_INICIO_VIGENCIA",
												"type": "timestamp"
											},
											{
												"key": "30",
												"name": "DT_FIM_VIGENCIA",
												"type": "timestamp"
											},
											{
												"key": "31",
												"name": "DT_INCLUSAO_REGISTRO",
												"type": "timestamp"
											},
											{
												"key": "32",
												"name": "DT_ALTERACAO_REGISTRO",
												"type": "timestamp"
											},
											{
												"key": "33",
												"name": "ST_REGISTRO_CORRENTE",
												"type": "string"
											},
											{
												"key": "34",
												"name": "PK_GRUPO_HIERARQUIA",
												"type": "string"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b117ec79-27e8-4aea-a6e3-782ae30883bd/resourceGroups/rg-data-plataform/providers/Microsoft.Synapse/workspaces/wrkcassisynapseworkspace001/bigDataPools/synPoolSpark002",
						"name": "synPoolSpark002",
						"type": "Spark",
						"endpoint": "https://wrkcassisynapseworkspace001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synPoolSpark002",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## 1. **Tratamento dos dados da tabela TD_CARACTERISTICA_AUTORIZACAO**\n",
							"#### Caregando e importando.\n",
							"\n",
							"gold/DIMENSAO"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import os\n",
							"from pyspark.sql.types import * \n",
							"import pyspark.sql.functions as f \n",
							"\n",
							"spark.conf.set(\"spark.sql.legacy.parquet.datetimeRebaseModeInRead\", \"CORRECTED\")\n",
							"spark.conf.set(\"spark.sql.legacy.parquet.datetimeRebaseModeInWrite\", \"CORRECTED\")\n",
							"spark.conf.set(\"spark.sql.legacy.parquet.int96RebaseModeInWrite\",\"CORRECTED\")\n",
							"spark.conf.set(\"spark.sql.legacy.parquet.int96RebaseModeInRead\",\"CORRECTED\")\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df =  spark.read.load('abfss://gold@stgcassidatalake001.dfs.core.windows.net/DIMENSAO/TD_CARACTERISTICA_AUTORIZACAO/', format='parquet')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(df.limit(10))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 51
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.printSchema()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dfnew = df.withColumn('SK_TD_CARACTERISTICA_AUTORIZ', df.SK_TD_CARACTERISTICA_AUTORIZ.cast('int')) \\\n",
							".withColumn('CO_HD_REGIME_ATENDIMENTO', df.CO_HD_REGIME_ATENDIMENTO.cast('int')) \\\n",
							".withColumn('CO_REGIME_ATENDIMENTO', df.CO_REGIME_ATENDIMENTO.cast('int')) \\\n",
							".withColumn('CO_HD_CONDICAO_ATENDIMENTO', df.CO_HD_CONDICAO_ATENDIMENTO.cast('int')) \\\n",
							".withColumn('CO_CONDICAO_ATENDIMENTO', df.CO_CONDICAO_ATENDIMENTO.cast('int')) \\\n",
							".withColumn('CO_HD_LOCAL_ATENDIMENTO', df.CO_HD_LOCAL_ATENDIMENTO.cast('int')) \\\n",
							".withColumn('CO_LOCAL_ATENDIMENTO', df.CO_LOCAL_ATENDIMENTO.cast('int')) \\\n",
							".withColumn('CO_HD_FINALIDADE_ATENDIMENTO', df.CO_HD_FINALIDADE_ATENDIMENTO.cast('int')) \\\n",
							".withColumn('CO_FINALIDADE_ATENDIMENTO', df.CO_FINALIDADE_ATENDIMENTO.cast('int')) \\\n",
							".withColumn('CO_HD_TIPO_AUTORIZACAO', df.CO_HD_TIPO_AUTORIZACAO.cast('int')) \\\n",
							".withColumn('CO_TIPO_AUTORIZACAO', df.CO_TIPO_AUTORIZACAO.cast('int')) \\\n",
							".withColumn('CO_HD_TIPO_TRATAMENTO', df.CO_HD_TIPO_TRATAMENTO.cast('int')) \\\n",
							".withColumn('CO_TIPO_TRATAMENTO', df.CO_TIPO_TRATAMENTO.cast('int')) \\\n",
							".withColumn('CO_HD_OBJETIVO_TRATAMENTO', df.CO_HD_OBJETIVO_TRATAMENTO.cast('int')) \\\n",
							".withColumn('CO_OBJETIVO_TRATAMENTO', df.CO_OBJETIVO_TRATAMENTO.cast('int')) \\\n",
							".withColumn('CO_HD_ACOMODACAO', df.CO_HD_ACOMODACAO.cast('int')) \\\n",
							".withColumn('CO_ACOMODACAO', df.CO_ACOMODACAO.cast('int')) \\\n",
							".withColumn('CO_HD_MOTIVO_ALTA', df.CO_HD_MOTIVO_ALTA.cast('int')) \\\n",
							".withColumn('CO_MOTIVO_ALTA', df.CO_MOTIVO_ALTA.cast('int')) \\\n",
							".withColumn('PK_GRUPO', df.PK_GRUPO.cast('int'))          "
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dfnew.printSchema()\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(dfnew.limit(10))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dfnew.write.parquet('abfss://gold@stgcassidatalake001.dfs.core.windows.net/DIMENSAO/TD_CARACTERISTICA_AUTORIZACAO1/')\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 73
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NTB_AUTORIZACAO_2022_08_02')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Fluxo FATO Autorização",
				"folder": {
					"name": "AUTORIZACAO - 02082022"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "synPoolSpark002",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "112g",
					"driverCores": 16,
					"executorMemory": "112g",
					"executorCores": 16,
					"numExecutors": 4,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "4",
						"spark.dynamicAllocation.maxExecutors": "4",
						"spark.autotune.trackingId": "5f25e371-78a3-4c57-b9fd-53211b9ad1c8"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"46056e3b-def7-465e-a9a1-ade3d4bf5ded": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "144334482.000000000000000000",
												"1": "322440144.000000000000000000",
												"2": "354233584.000000000000000000",
												"3": "19136.000000000000000000",
												"4": "2063616.000000000000000000",
												"5": "5.000000000000000000",
												"6": "16.000000000000000000",
												"9": "3054532.000000000000000000",
												"10": "94445992",
												"13": "47.000000000000000000",
												"14": "3933.000000000000000000",
												"15": "251.000000000000000000",
												"18": "5.000000000000000000",
												"19": "12.000000000000000000",
												"20": "3.000000000000000000",
												"22": "5.000000000000000000",
												"24": "6.000000000000000000",
												"26": "1.000000000000000000",
												"27": "2.000000000000000000",
												"28": "50771.000000000000000000",
												"29": "89.000000000000000000",
												"30": "22",
												"31": "694.000000000000000000",
												"32": "225270",
												"33": "1",
												"34": "A",
												"35": "A",
												"36": "L",
												"38": "2110645810.000000000000000000",
												"39": "2021-12-07 15:50:54",
												"41": "2022-01-01 00:00:00",
												"42": "2022-01-01 00:00:00",
												"44": "100.0",
												"50": "2022-01-01 00:00:00",
												"51": "20.000000000000000000",
												"52": "1",
												"54": "61007",
												"56": "5.000000000000000000",
												"59": "T",
												"61": "2023-02-02 00:00:00",
												"62": "3054532.000000000000000000",
												"63": "94445992",
												"64": "2021-12-07 15:50:54",
												"65": "2021-12-07 15:50:54",
												"66": "50771.000000000000000000",
												"67": "S"
											},
											{
												"0": "144334482.000000000000000000",
												"1": "322440145.000000000000000000",
												"2": "354233585.000000000000000000",
												"3": "314239.000000000000000000",
												"4": "2063616.000000000000000000",
												"5": "5.000000000000000000",
												"6": "16.000000000000000000",
												"9": "3054532.000000000000000000",
												"10": "94445992",
												"13": "47.000000000000000000",
												"14": "3933.000000000000000000",
												"15": "251.000000000000000000",
												"18": "5.000000000000000000",
												"19": "12.000000000000000000",
												"20": "3.000000000000000000",
												"22": "5.000000000000000000",
												"24": "6.000000000000000000",
												"26": "1.000000000000000000",
												"27": "2.000000000000000000",
												"28": "50771.000000000000000000",
												"29": "89.000000000000000000",
												"30": "22",
												"31": "694.000000000000000000",
												"32": "225270",
												"33": "1",
												"34": "A",
												"35": "A",
												"36": "L",
												"38": "2110645810.000000000000000000",
												"39": "2021-12-07 15:50:54",
												"41": "2022-01-01 00:00:00",
												"42": "2022-01-01 00:00:00",
												"44": "100.0",
												"50": "2022-01-01 00:00:00",
												"51": "20.000000000000000000",
												"52": "1",
												"54": "61007",
												"56": "5.000000000000000000",
												"59": "T",
												"61": "2023-02-02 00:00:00",
												"62": "3054532.000000000000000000",
												"63": "94445992",
												"64": "2021-12-07 15:50:54",
												"65": "2021-12-07 15:50:54",
												"66": "50771.000000000000000000",
												"67": "N"
											},
											{
												"0": "144384561.000000000000000000",
												"1": "322556602.000000000000000000",
												"2": "354357858.000000000000000000",
												"3": "1467519.000000000000000000",
												"4": "3387380.000000000000000000",
												"5": "17.000000000000000000",
												"9": "769681.000000000000000000",
												"10": "769681",
												"13": "47.000000000000000000",
												"14": "34.000000000000000000",
												"15": "81.000000000000000000",
												"18": "3.000000000000000000",
												"19": "12.000000000000000000",
												"20": "3.000000000000000000",
												"22": "3.000000000000000000",
												"24": "6.000000000000000000",
												"26": "1.000000000000000000",
												"27": "2.000000000000000000",
												"28": "92778.000000000000000000",
												"29": "89.000000000000000000",
												"30": "22",
												"33": "1",
												"34": "A",
												"35": "A",
												"36": "L",
												"38": "2110696300.000000000000000000",
												"39": "2021-12-09 18:04:15",
												"41": "2022-01-01 00:00:00",
												"42": "2022-01-01 00:00:00",
												"44": "144.0",
												"50": "2022-01-01 00:00:00",
												"51": "10.000000000000000000",
												"52": "1",
												"57": "769681.000000000000000000",
												"58": "769681",
												"59": "T",
												"61": "2022-12-04 00:00:00",
												"62": "769681.000000000000000000",
												"63": "769681",
												"64": "2021-12-09 18:04:15",
												"65": "2021-12-09 18:04:16",
												"66": "92778.000000000000000000",
												"67": "N"
											},
											{
												"0": "144384561.000000000000000000",
												"1": "322556603.000000000000000000",
												"2": "354357859.000000000000000000",
												"3": "5605.000000000000000000",
												"4": "3387380.000000000000000000",
												"5": "17.000000000000000000",
												"9": "769681.000000000000000000",
												"10": "769681",
												"13": "47.000000000000000000",
												"14": "34.000000000000000000",
												"15": "81.000000000000000000",
												"18": "3.000000000000000000",
												"19": "12.000000000000000000",
												"20": "3.000000000000000000",
												"22": "3.000000000000000000",
												"24": "6.000000000000000000",
												"26": "1.000000000000000000",
												"27": "2.000000000000000000",
												"28": "92778.000000000000000000",
												"29": "89.000000000000000000",
												"30": "22",
												"33": "1",
												"34": "A",
												"35": "A",
												"36": "L",
												"38": "2110696300.000000000000000000",
												"39": "2021-12-09 18:04:15",
												"41": "2022-01-01 00:00:00",
												"42": "2022-01-01 00:00:00",
												"44": "72.0",
												"50": "2022-01-01 00:00:00",
												"51": "10.000000000000000000",
												"52": "1",
												"57": "769681.000000000000000000",
												"58": "769681",
												"59": "T",
												"61": "2022-12-04 00:00:00",
												"62": "769681.000000000000000000",
												"63": "769681",
												"64": "2021-12-09 18:04:16",
												"65": "2021-12-09 18:04:16",
												"66": "92778.000000000000000000",
												"67": "N"
											},
											{
												"0": "144384561.000000000000000000",
												"1": "322556604.000000000000000000",
												"2": "354357860.000000000000000000",
												"3": "5590.000000000000000000",
												"4": "3387380.000000000000000000",
												"5": "17.000000000000000000",
												"9": "769681.000000000000000000",
												"10": "769681",
												"13": "47.000000000000000000",
												"14": "34.000000000000000000",
												"15": "81.000000000000000000",
												"18": "3.000000000000000000",
												"19": "12.000000000000000000",
												"20": "3.000000000000000000",
												"22": "3.000000000000000000",
												"24": "6.000000000000000000",
												"26": "1.000000000000000000",
												"27": "2.000000000000000000",
												"28": "92778.000000000000000000",
												"29": "89.000000000000000000",
												"30": "22",
												"33": "1",
												"34": "A",
												"35": "A",
												"36": "L",
												"38": "2110696300.000000000000000000",
												"39": "2021-12-09 18:04:15",
												"41": "2022-01-01 00:00:00",
												"42": "2022-01-01 00:00:00",
												"44": "72.0",
												"50": "2022-01-01 00:00:00",
												"51": "10.000000000000000000",
												"52": "1",
												"57": "769681.000000000000000000",
												"58": "769681",
												"59": "T",
												"61": "2022-12-04 00:00:00",
												"62": "769681.000000000000000000",
												"63": "769681",
												"64": "2021-12-09 18:04:16",
												"65": "2021-12-09 18:04:16",
												"66": "92778.000000000000000000",
												"67": "N"
											},
											{
												"0": "144388508.000000000000000000",
												"1": "322564703.000000000000000000",
												"2": "354368060.000000000000000000",
												"3": "17256.000000000000000000",
												"4": "1936787.000000000000000000",
												"5": "26.000000000000000000",
												"9": "769681.000000000000000000",
												"10": "769681",
												"13": "47.000000000000000000",
												"14": "24.000000000000000000",
												"15": "89.000000000000000000",
												"18": "6.000000000000000000",
												"19": "12.000000000000000000",
												"20": "3.000000000000000000",
												"21": "3.000000000000000000",
												"22": "6.000000000000000000",
												"24": "6.000000000000000000",
												"26": "1.000000000000000000",
												"27": "2.000000000000000000",
												"28": "60313.000000000000000000",
												"29": "89.000000000000000000",
												"30": "22",
												"33": "1",
												"34": "A",
												"35": "A",
												"36": "L",
												"38": "2110700411.000000000000000000",
												"39": "2021-12-10 14:24:24",
												"41": "2022-01-01 00:00:00",
												"42": "2022-01-01 00:00:00",
												"44": "98.0",
												"50": "2022-01-01 00:00:00",
												"51": "10.000000000000000000",
												"52": "1",
												"57": "769681.000000000000000000",
												"58": "769681",
												"59": "T",
												"61": "2022-12-05 00:00:00",
												"62": "769681.000000000000000000",
												"63": "769681",
												"64": "2021-12-10 14:24:24",
												"65": "2021-12-10 14:24:24",
												"66": "60313.000000000000000000",
												"67": "N"
											},
											{
												"0": "144759051.000000000000000000",
												"1": "323492758.000000000000000000",
												"2": "355328305.000000000000000000",
												"3": "14541.000000000000000000",
												"4": "1686065.000000000000000000",
												"5": "26.000000000000000000",
												"9": "769681.000000000000000000",
												"10": "769681",
												"13": "47.000000000000000000",
												"14": "4032.000000000000000000",
												"15": "84.000000000000000000",
												"18": "6.000000000000000000",
												"19": "12.000000000000000000",
												"20": "3.000000000000000000",
												"22": "6.000000000000000000",
												"24": "6.000000000000000000",
												"26": "1.000000000000000000",
												"27": "4.000000000000000000",
												"28": "60313.000000000000000000",
												"29": "89.000000000000000000",
												"30": "22",
												"33": "1",
												"34": "A",
												"35": "A",
												"36": "L",
												"38": "2111072421.000000000000000000",
												"39": "2021-12-21 11:03:46",
												"41": "2022-01-01 00:00:00",
												"42": "2022-01-01 00:00:00",
												"44": "180.0",
												"50": "2022-01-01 00:00:00",
												"51": "10.000000000000000000",
												"52": "1",
												"57": "769681.000000000000000000",
												"58": "769681",
												"59": "T",
												"61": "2022-12-16 00:00:00",
												"62": "769681.000000000000000000",
												"63": "769681",
												"64": "2021-12-21 11:03:46",
												"65": "2021-12-21 11:03:46",
												"66": "60313.000000000000000000",
												"67": "S"
											},
											{
												"0": "144759795.000000000000000000",
												"1": "323494413.000000000000000000",
												"2": "355330052.000000000000000000",
												"3": "14542.000000000000000000",
												"4": "1652934.000000000000000000",
												"5": "26.000000000000000000",
												"9": "769681.000000000000000000",
												"10": "769681",
												"13": "47.000000000000000000",
												"14": "4032.000000000000000000",
												"15": "84.000000000000000000",
												"18": "6.000000000000000000",
												"19": "12.000000000000000000",
												"20": "3.000000000000000000",
												"22": "6.000000000000000000",
												"24": "6.000000000000000000",
												"26": "4.000000000000000000",
												"27": "24.000000000000000000",
												"28": "60313.000000000000000000",
												"29": "89.000000000000000000",
												"30": "22",
												"33": "1",
												"34": "A",
												"35": "A",
												"36": "L",
												"38": "2111073169.000000000000000000",
												"39": "2021-12-21 11:18:12",
												"41": "2022-01-01 00:00:00",
												"42": "2022-01-01 00:00:00",
												"44": "180.0",
												"50": "2022-01-01 00:00:00",
												"51": "10.000000000000000000",
												"52": "1",
												"57": "769681.000000000000000000",
												"58": "769681",
												"59": "T",
												"61": "2022-12-16 00:00:00",
												"62": "769681.000000000000000000",
												"63": "769681",
												"64": "2021-12-21 11:18:12",
												"65": "2021-12-21 11:18:13",
												"66": "60313.000000000000000000",
												"67": "S"
											},
											{
												"0": "144760588.000000000000000000",
												"1": "323496100.000000000000000000",
												"2": "355331823.000000000000000000",
												"3": "17256.000000000000000000",
												"4": "1061349.000000000000000000",
												"5": "26.000000000000000000",
												"9": "769681.000000000000000000",
												"10": "769681",
												"13": "47.000000000000000000",
												"14": "24.000000000000000000",
												"15": "89.000000000000000000",
												"18": "6.000000000000000000",
												"19": "12.000000000000000000",
												"20": "3.000000000000000000",
												"22": "6.000000000000000000",
												"24": "6.000000000000000000",
												"26": "4.000000000000000000",
												"27": "24.000000000000000000",
												"28": "60313.000000000000000000",
												"29": "89.000000000000000000",
												"30": "22",
												"33": "1",
												"34": "A",
												"35": "A",
												"36": "L",
												"38": "2111073972.000000000000000000",
												"39": "2021-12-21 11:33:51",
												"41": "2022-01-01 00:00:00",
												"42": "2022-01-01 00:00:00",
												"44": "1.0",
												"50": "2022-01-01 00:00:00",
												"51": "10.000000000000000000",
												"52": "1",
												"57": "769681.000000000000000000",
												"58": "769681",
												"59": "T",
												"61": "2022-12-16 00:00:00",
												"62": "769681.000000000000000000",
												"63": "769681",
												"64": "2021-12-21 11:33:51",
												"65": "2021-12-21 11:33:51",
												"66": "60313.000000000000000000",
												"67": "N"
											},
											{
												"0": "144874488.000000000000000000",
												"1": "323763031.000000000000000000",
												"2": "355612523.000000000000000000",
												"3": "20079.000000000000000000",
												"4": "536473.000000000000000000",
												"5": "20.000000000000000000",
												"6": "20.000000000000000000",
												"9": "2334268.000000000000000000",
												"10": "2059154",
												"13": "47.000000000000000000",
												"14": "218.000000000000000000",
												"15": "11.000000000000000000",
												"18": "6.000000000000000000",
												"19": "12.000000000000000000",
												"20": "3.000000000000000000",
												"21": "3.000000000000000000",
												"22": "6.000000000000000000",
												"24": "6.000000000000000000",
												"26": "1.000000000000000000",
												"27": "4.000000000000000000",
												"28": "11168.000000000000000000",
												"29": "89.000000000000000000",
												"30": "22",
												"33": "1",
												"34": "A",
												"35": "A",
												"36": "L",
												"38": "2111188546.000000000000000000",
												"39": "2021-12-27 16:16:13",
												"41": "2022-01-01 00:00:00",
												"42": "2022-01-01 00:00:00",
												"44": "1.0",
												"50": "2022-01-01 00:00:00",
												"51": "10.000000000000000000",
												"52": "1",
												"57": "2334268.000000000000000000",
												"58": "2059154",
												"59": "T",
												"61": "2022-12-22 00:00:00",
												"62": "2334268.000000000000000000",
												"63": "2059154",
												"64": "2021-12-27 16:16:14",
												"65": "2021-12-27 16:16:14",
												"66": "11168.000000000000000000",
												"67": "S"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "HD_AUTORIZACAO",
												"type": "decimal"
											},
											{
												"key": "1",
												"name": "HD_AUTORIZ_EVENTO_SOLICIT",
												"type": "decimal"
											},
											{
												"key": "2",
												"name": "HD_AUTORIZ_EVENTO_GERADO",
												"type": "decimal"
											},
											{
												"key": "3",
												"name": "HD_TGE",
												"type": "decimal"
											},
											{
												"key": "4",
												"name": "HD_BENEF",
												"type": "decimal"
											},
											{
												"key": "5",
												"name": "HD_ESTADO_BENEF",
												"type": "decimal"
											},
											{
												"key": "6",
												"name": "HD_ESTADO_PREST_EXEC",
												"type": "decimal"
											},
											{
												"key": "7",
												"name": "HD_PREST_SOLICITANTE",
												"type": "decimal"
											},
											{
												"key": "8",
												"name": "CO_PREST_SOLICITANTE",
												"type": "string"
											},
											{
												"key": "9",
												"name": "HD_PREST_EXECUTOR",
												"type": "decimal"
											},
											{
												"key": "10",
												"name": "CO_PREST_EXECUTOR",
												"type": "string"
											},
											{
												"key": "11",
												"name": "HD_PREST_FORNECEDOR",
												"type": "decimal"
											},
											{
												"key": "12",
												"name": "CO_PREST_FORNECEDOR",
												"type": "string"
											},
											{
												"key": "13",
												"name": "HD_TP_AUTORIZ",
												"type": "decimal"
											},
											{
												"key": "14",
												"name": "HD_GRAU",
												"type": "decimal"
											},
											{
												"key": "15",
												"name": "CO_GRAU",
												"type": "decimal"
											},
											{
												"key": "16",
												"name": "CO_TP_TRATAMENTO",
												"type": "decimal"
											},
											{
												"key": "17",
												"name": "CO_OBJ_TRATAMENTO",
												"type": "decimal"
											},
											{
												"key": "18",
												"name": "HD_REGIME_ATEND",
												"type": "decimal"
											},
											{
												"key": "19",
												"name": "HD_FINALID_ATEND",
												"type": "decimal"
											},
											{
												"key": "20",
												"name": "HD_CARAT_ATEND",
												"type": "decimal"
											},
											{
												"key": "21",
												"name": "HD_REGIME_INT",
												"type": "decimal"
											},
											{
												"key": "22",
												"name": "HD_TP_ATEND",
												"type": "decimal"
											},
											{
												"key": "23",
												"name": "HD_TP_INTERN",
												"type": "decimal"
											},
											{
												"key": "24",
												"name": "HD_IND_ACIDENTE",
												"type": "decimal"
											},
											{
												"key": "25",
												"name": "HD_TP_CONSULTA",
												"type": "decimal"
											},
											{
												"key": "26",
												"name": "HD_PLANO",
												"type": "decimal"
											},
											{
												"key": "27",
												"name": "HD_CONTRATO",
												"type": "decimal"
											},
											{
												"key": "28",
												"name": "HD_USUARIO",
												"type": "decimal"
											},
											{
												"key": "29",
												"name": "HD_TIS_TAB_PRECO",
												"type": "decimal"
											},
											{
												"key": "30",
												"name": "CO_TIS_TAB_PRECO",
												"type": "string"
											},
											{
												"key": "31",
												"name": "HD_CBOS",
												"type": "decimal"
											},
											{
												"key": "32",
												"name": "CO_CBOS",
												"type": "string"
											},
											{
												"key": "33",
												"name": "CO_ST_SOLICIT",
												"type": "string"
											},
											{
												"key": "34",
												"name": "CO_SITUACAO_AUT",
												"type": "string"
											},
											{
												"key": "35",
												"name": "CO_SITUACAO_AES",
												"type": "string"
											},
											{
												"key": "36",
												"name": "CO_SITUACAO_AEG",
												"type": "string"
											},
											{
												"key": "37",
												"name": "ST_OPCAO_OPME",
												"type": "decimal"
											},
											{
												"key": "38",
												"name": "NU_AUTORIZACAO",
												"type": "decimal"
											},
											{
												"key": "39",
												"name": "DT_AUTORIZACAO_AUT",
												"type": "timestamp"
											},
											{
												"key": "40",
												"name": "DT_SOLICITACAO_AUT",
												"type": "timestamp"
											},
											{
												"key": "41",
												"name": "DT_AUTORIZACAO_AEG",
												"type": "timestamp"
											},
											{
												"key": "42",
												"name": "DT_ATENDIMENTO_AEG",
												"type": "timestamp"
											},
											{
												"key": "43",
												"name": "QTDSOLICITADAORIGINAL",
												"type": "double"
											},
											{
												"key": "44",
												"name": "QTDAUTORIZADA",
												"type": "double"
											},
											{
												"key": "45",
												"name": "QT_NEGADA",
												"type": "double"
											},
											{
												"key": "46",
												"name": "VALORUNITARIOSOLICITADO",
												"type": "double"
											},
											{
												"key": "47",
												"name": "VALORUNITARIONEGOCIADOOPME",
												"type": "double"
											},
											{
												"key": "48",
												"name": "VALORUNITARIOCALCULADOOPME",
												"type": "double"
											},
											{
												"key": "49",
												"name": "VALORUNITARIOAUTORIZADOOPME",
												"type": "double"
											},
											{
												"key": "50",
												"name": "DT_SOLICITACAO_AES",
												"type": "timestamp"
											},
											{
												"key": "51",
												"name": "NU_NIVEL_AUTORIZACAO",
												"type": "decimal"
											},
											{
												"key": "52",
												"name": "CO_ORIGEM_AUTORIZACAO",
												"type": "string"
											},
											{
												"key": "53",
												"name": "NO_PROF_SOLICITANTE",
												"type": "string"
											},
											{
												"key": "54",
												"name": "NU_CRM_PROF_SOLICITANTE_AUT",
												"type": "string"
											},
											{
												"key": "55",
												"name": "PK_TD_CONSELHO_Prof_Solic",
												"type": "decimal"
											},
											{
												"key": "56",
												"name": "PK_TD_CONSELHO_Uf_Prof_Solic",
												"type": "decimal"
											},
											{
												"key": "57",
												"name": "HD_PREST_SOLICITANTE_AES",
												"type": "decimal"
											},
											{
												"key": "58",
												"name": "CO_PREST_SOLICITANTE_AES",
												"type": "string"
											},
											{
												"key": "59",
												"name": "DS_ORIGEM_SOLICITACAO",
												"type": "string"
											},
											{
												"key": "60",
												"name": "DS_INDICACAO_CLINICA",
												"type": "string"
											},
											{
												"key": "61",
												"name": "DT_VALIDADE_AUT",
												"type": "timestamp"
											},
											{
												"key": "62",
												"name": "HD_PREST_EXECUTOR_AES",
												"type": "decimal"
											},
											{
												"key": "63",
												"name": "CO_PREST_EXECUTOR_AES",
												"type": "string"
											},
											{
												"key": "64",
												"name": "TS_GERACAO_AEG",
												"type": "timestamp"
											},
											{
												"key": "65",
												"name": "TS_LIBERACAO_AEG",
												"type": "timestamp"
											},
											{
												"key": "66",
												"name": "HD_USUARIO_GERACAO_AEG",
												"type": "decimal"
											},
											{
												"key": "67",
												"name": "ST_HORARIO_ESPECIAL",
												"type": "string"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b117ec79-27e8-4aea-a6e3-782ae30883bd/resourceGroups/rg-data-plataform/providers/Microsoft.Synapse/workspaces/wrkcassisynapseworkspace001/bigDataPools/synPoolSpark002",
						"name": "synPoolSpark002",
						"type": "Spark",
						"endpoint": "https://wrkcassisynapseworkspace001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synPoolSpark002",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 10,
						"cores": 16,
						"memory": 112,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"## IMPORTAÇÃO DAS LIBRARYS\n",
							"import os\n",
							"from pyspark.sql.types import * \n",
							"from pyspark.sql.functions import *\n",
							"spark.conf.set(\"spark.sql.legacy.parquet.datetimeRebaseModeInRead\", \"CORRECTED\")\n",
							"spark.conf.set(\"spark.sql.legacy.parquet.datetimeRebaseModeInWrite\", \"CORRECTED\")\n",
							"spark.conf.set(\"spark.sql.legacy.parquet.int96RebaseModeInWrite\",\"CORRECTED\")\n",
							"spark.conf.set(\"spark.sql.legacy.parquet.int96RebaseModeInRead\",\"CORRECTED\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"###  Carrega as tabela do lake\n",
							"#  \n",
							"#  SAM_AUTORIZ_EVENTOSOLICIT , SAM_AUTORIZ_EVENTOGERADO , SAM_AUTORIZ               , SAM_TIPOAUTORIZ        , SAM_REGIMEATENDIMENTO\n",
							"#  SAM_LOCALATENDIMENTO      , SAM_TGE                  , SAM_TGE_NIVELAUTORIZACAO  , TIS_TABELAPRECO        , SAM_GRAU\n",
							"#  SAM_TIPOTRATAMENTO        , SAM_OBJTRATAMENTO        , SAM_BENEFICIARIO          , SAM_PRESTADOR          , TIS_CBOS \n",
							"#  Z_GRUPOUSUARIOS           , SAM_ENDERECO             , SAM_FINALIDADEATENDIMENTO , TIS_CARATERATENDIMENTO , TIS_REGIMEINTERNACAO\n",
							"#  TIS_TIPOATENDIMENTO       , TIS_TIPOINTERNACAO       , TIS_INDICADORDEACIDENTE   , TIS_TIPOCONSULTA       , SAM_CONTRATO\n",
							"#  SAM_PLANO                 , SAM_AUTORIZ_LOGSTATUS    , TIS_STATUSSOLICITACAO     , SAM_AUTORIZ_LOGSTATUS  , SAM_AUTORIZ_EVENTONEGACAO \n",
							"#  SAM_TABFILME_VLR          , SAM_PRECOPRESTADOR_AN    , ESTADOS                   , MUNICIPIOS             , TIS_TABELAPRECO\n",
							"#  SAM_TABCUSTOOPERAC        , SAM_TABCUSTOOPERAC_VLR   , SAM_TABUS                 , SAM_TABUS_VLR          , SAM_TABFILME\n",
							"#  SAM_PRECOESTADO_DOTAC     , SAM_PRECOESTADO_AN \n",
							"\n",
							"\n",
							"df_sa_eventosolicit        = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_AUTORIZ_EVENTOSOLICIT/', format='parquet')\n",
							"df_sa_eventogerado         = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_AUTORIZ_EVENTOGERADO/', format='parquet')\n",
							"df_sa                      = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_AUTORIZ/', format='parquet')\n",
							"df_s_tipoautoriz           = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_TIPOAUTORIZ/', format='parquet')\n",
							"df_s_regimeatendimento     = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_REGIMEATENDIMENTO/', format='parquet')\n",
							"\n",
							"df_s_localatedimento       = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_LOCALATENDIMENTO/', format='parquet')\n",
							"df_s_tge                   = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_TGE/', format='parquet')\n",
							"df_s_tgenivelautorizacao   = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_TGE_NIVELAUTORIZACAO/', format='parquet')\n",
							"df_t_tabelapreco           = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/TIS_TABELAPRECO', format='parquet')\n",
							"df_s_grau                  = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_GRAU/', format='parquet')\n",
							"\n",
							"df_s_tipotratamento        = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_TIPOTRATAMENTO/', format='parquet')\n",
							"df_s_objtratamento         = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_OBJTRATAMENTO/', format='parquet')\n",
							"df_s_beneficiario          = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_BENEFICIARIO/', format='parquet')\n",
							"df_s_prestador             = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_PRESTADOR/', format='parquet')\n",
							"df_t_cbos                  = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/TIS_CBOS', format='parquet')\n",
							"\n",
							"df_z_grupousuarios         = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/Z_GRUPOUSUARIOS/', format='parquet')\n",
							"df_s_endereco              = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_ENDERECO/', format='parquet')\n",
							"df_s_finalidadeatenimento  = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_FINALIDADEATENDIMENTO/', format='parquet')\n",
							"df_t_carateratendimento    = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/TIS_CARATERATENDIMENTO/', format='parquet')\n",
							"df_t_regimeinternacao      = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/TIS_REGIMEINTERNACAO/', format='parquet')\n",
							"\n",
							"df_t_tipoatendimento       = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/TIS_TIPOATENDIMENTO/', format='parquet')\n",
							"df_t_tipointernacao        = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/TIS_TIPOINTERNACAO/', format='parquet')\n",
							"df_t_indicadoracidente     = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/TIS_INDICADORDEACIDENTE/', format='parquet')\n",
							"df_t_tipoconsulta          = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/TIS_TIPOCONSULTA/', format='parquet')\n",
							"df_s_contrato              = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_CONTRATO/', format='parquet')\n",
							"\n",
							"df_s_plano                 = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_PLANO/', format='parquet')\n",
							"df_s_autoriz_logstatus     = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_AUTORIZ_LOGSTATUS/', format='parquet')\n",
							"df_t_statussolicitacao     = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/TIS_STATUSSOLICITACAO/', format='parquet')\n",
							"df_s_autoriz_eventonegacao = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_AUTORIZ_EVENTONEGACAO/', format='parquet')\n",
							"df_s_tabfilme_vlr          = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_TABFILME_VLR/', format='parquet')\n",
							"\n",
							"df_s_prestador_an          = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_PRECOPRESTADOR_AN/', format='parquet')\n",
							"df_estados                 = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/ESTADOS/', format='parquet')\n",
							"df_municipios              = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/MUNICIPIOS/', format='parquet')\n",
							"df_t_tabelapreco           = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/TIS_TABELAPRECO/', format='parquet')\n",
							"df_s_tabcustooperac        = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_TABCUSTOOPERAC/', format='parquet')\n",
							"\n",
							"df_s_tabcustooperac_vlr    = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_TABCUSTOOPERAC_VLR/', format='parquet')\n",
							"df_s_tabus                 = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_TABUS/', format='parquet')\n",
							"df_s_tabus_vlr             = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_TABUS_VLR/', format='parquet')\n",
							"df_s_tabfilme              = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_TABFILME/', format='parquet')\n",
							"df_s_precoestado_dotac     = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_PRECOESTADO_DOTAC/', format='parquet')\n",
							"df_s_preestado_an          = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_PRECOESTADO_AN/', format='parquet')\n",
							"\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Criação das TEMPVIEWS\n",
							"##\n",
							"df_sa_eventosolicit.createOrReplaceTempView(\"SAM_AUTORIZ_EVENTOSOLICIT\")       \n",
							"df_sa_eventogerado.createOrReplaceTempView(\"SAM_AUTORIZ_EVENTOGERADO\")        \n",
							"df_sa.createOrReplaceTempView(\"SAM_AUTORIZ\")                     \n",
							"df_s_tipoautoriz.createOrReplaceTempView(\"SAM_TIPOAUTORIZ\")          \n",
							"df_s_regimeatendimento.createOrReplaceTempView(\"SAM_REGIMEATENDIMENTO\") \n",
							"df_s_localatedimento.createOrReplaceTempView(\"SAM_LOCALATENDIMENTO\")      \n",
							"df_s_tge.createOrReplaceTempView(\"SAM_TGE\")                  \n",
							"df_s_tgenivelautorizacao.createOrReplaceTempView(\"SAM_TGE_NIVELAUTORIZACAO\")  \n",
							"df_t_tabelapreco.createOrReplaceTempView(\"TIS_TABELAPRECO\")          \n",
							"df_s_grau.createOrReplaceTempView(\"SAM_GRAU\")    \n",
							"df_s_tipotratamento.createOrReplaceTempView(\"SAM_TIPOTRATAMENTO\")       \n",
							"df_s_objtratamento.createOrReplaceTempView(\"SAM_OBJTRATAMENTO\")        \n",
							"df_s_beneficiario.createOrReplaceTempView(\"SAM_BENEFICIARIO\")         \n",
							"df_s_prestador.createOrReplaceTempView(\"SAM_PRESTADOR\")            \n",
							"df_t_cbos.createOrReplaceTempView(\"TIS_CBOS\")  \n",
							"df_z_grupousuarios.createOrReplaceTempView(\"Z_GRUPOUSUARIOS\")        \n",
							"df_s_endereco.createOrReplaceTempView(\"SAM_ENDERECO\")             \n",
							"df_s_finalidadeatenimento.createOrReplaceTempView(\"SAM_FINALIDADEATENDIMENTO\") \n",
							"df_t_carateratendimento.createOrReplaceTempView(\"TIS_CARATERATENDIMENTO\")   \n",
							"df_t_regimeinternacao.createOrReplaceTempView(\"TIS_REGIMEINTERNACAO\")    \n",
							"df_t_tipoatendimento.createOrReplaceTempView(\"TIS_TIPOATENDIMENTO\")      \n",
							"df_t_tipointernacao.createOrReplaceTempView(\"TIS_TIPOINTERNACAO\")       \n",
							"df_t_indicadoracidente.createOrReplaceTempView(\"TIS_INDICADORDEACIDENTE\")    \n",
							"df_t_tipoconsulta.createOrReplaceTempView(\"TIS_TIPOCONSULTA\")         \n",
							"df_s_contrato.createOrReplaceTempView(\"SAM_CONTRATO\")   \n",
							"df_s_plano.createOrReplaceTempView(\"SAM_PLANO\")                \n",
							"df_s_autoriz_logstatus.createOrReplaceTempView(\"SAM_AUTORIZ_LOGSTATUS\")    \n",
							"df_t_statussolicitacao.createOrReplaceTempView(\"TIS_STATUSSOLICITACAO\")    \n",
							"df_s_autoriz_eventonegacao.createOrReplaceTempView(\"SAM_AUTORIZ_EVENTONEGACAO\")          \n",
							"df_s_tabfilme_vlr.createOrReplaceTempView(\"SAM_TABFILME_VLR\")\n",
							"df_s_prestador_an.createOrReplaceTempView(\"SAM_PRECOPRESTADOR_AN\")         \n",
							"df_estados.createOrReplaceTempView(\"ESTADOS\")         \n",
							"df_municipios.createOrReplaceTempView(\"MUNICIPIOS\")       \n",
							"df_s_tabcustooperac.createOrReplaceTempView(\"SAM_TABCUSTOOPERAC\")            \n",
							"df_s_tabcustooperac_vlr.createOrReplaceTempView(\"SAM_TABCUSTOOPERAC_VLR\")   \n",
							"df_s_tabus.createOrReplaceTempView(\"SAM_TABUS\")                \n",
							"df_s_tabus_vlr.createOrReplaceTempView(\"SAM_TABUS_VLR\")            \n",
							"df_s_tabfilme.createOrReplaceTempView(\"SAM_TABFILME\")             \n",
							"df_s_precoestado_dotac.createOrReplaceTempView(\"SAM_PRECOESTADO_DOTAC\")    \n",
							"df_s_preestado_an.createOrReplaceTempView(\"SAM_PRECOESTADO_AN\")\n",
							"## Subquery\n",
							"df_tab_tmp = spark.sql('''\n",
							"SELECT AU.HANDLE, MAX(LG.HANDLE) AS SSMAX \n",
							"  FROM SAM_AUTORIZ_LOGSTATUS LG \n",
							"  JOIN SAM_AUTORIZ AU ON LG.AUTORIZACAO = AU.HANDLE\n",
							" GROUP BY AU.HANDLE\n",
							"''')\n",
							"df_tab_tmp.cache()\n",
							"df_tab_tmp.createOrReplaceTempView(\"TABTMP\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Execução da query principal HD_AUTORIZACAO,HD_AUTORIZ_EVENTO_SOLICIT,HD_AUTORIZ_EVENTO_GERADO,HD_TGE,HD_BENEF\n",
							"df_result = spark.sql(\"\"\"  \n",
							"SELECT DISTINCT\n",
							"     AUT.HANDLE AS HD_AUTORIZACAO\n",
							"    ,AES.HANDLE AS HD_AUTORIZ_EVENTO_SOLICIT\n",
							"    ,AEG.HANDLE AS HD_AUTORIZ_EVENTO_GERADO\n",
							"    ,TGE.HANDLE AS HD_TGE \n",
							"    ,BEN.HANDLE AS HD_BENEF\n",
							"    ,ENDB.ESTADO AS HD_ESTADO_BENEF\n",
							"    ,PRE2.ESTADOPAGAMENTO AS HD_ESTADO_PREST_EXEC\n",
							"    ,PRE1.HANDLE AS HD_PREST_SOLICITANTE\n",
							"    ,PRE1.PRESTADOR AS CO_PREST_SOLICITANTE\n",
							"    ,PRE2.HANDLE AS HD_PREST_EXECUTOR\n",
							"    ,PRE2.PRESTADOR AS CO_PREST_EXECUTOR\n",
							"    ,PFO.HANDLE AS HD_PREST_FORNECEDOR \n",
							"    ,PFO.PRESTADOR AS CO_PREST_FORNECEDOR \n",
							"    ,TAU.HANDLE AS HD_TP_AUTORIZ\n",
							"    ,GR.HANDLE AS HD_GRAU\n",
							"    ,GR.GRAU AS CO_GRAU\n",
							"    ,TPT.CODIGO AS CO_TP_TRATAMENTO\n",
							"    ,OBJ.CODIGO AS CO_OBJ_TRATAMENTO\n",
							"    ,TPA.HANDLE as HD_REGIME_ATEND \n",
							"    ,FNL.HANDLE AS HD_FINALID_ATEND\n",
							"    ,CRT.HANDLE AS HD_CARAT_ATEND\n",
							"    ,RGM.HANDLE AS HD_REGIME_INT\n",
							"    ,TPA.HANDLE AS HD_TP_ATEND\n",
							"    ,TPI.HANDLE AS HD_TP_INTERN\n",
							"    ,IND.HANDLE AS HD_IND_ACIDENTE\n",
							"    ,TPC.HANDLE AS HD_TP_CONSULTA\n",
							"    ,PLA.HANDLE AS HD_PLANO\n",
							"    ,CON.HANDLE AS HD_CONTRATO\n",
							"    ,GPU.HANDLE AS HD_USUARIO\n",
							"    ,TPR.HANDLE AS HD_TIS_TAB_PRECO\n",
							"    ,TPR.CODIGO AS CO_TIS_TAB_PRECO\n",
							"    ,CBO.HANDLE AS HD_CBOS\n",
							"    ,CBO.CODIGO AS CO_CBOS\n",
							"    ,TSS.CODIGO AS CO_ST_SOLICIT\n",
							"    ,AUT.SITUACAO AS CO_SITUACAO_AUT\n",
							"    ,AES.SITUACAO AS CO_SITUACAO_AES\n",
							"    ,AEG.SITUACAO AS CO_SITUACAO_AEG\n",
							"    ,AES.OPCAOOPME AS ST_OPCAO_OPME \n",
							"    ,AUT.AUTORIZACAO AS NU_AUTORIZACAO\n",
							"    ,AUT.DATAAUTORIZACAO AS DT_AUTORIZACAO_AUT\n",
							"    ,AUT.DATASOLICITACAO AS DT_SOLICITACAO_AUT\n",
							"    ,AEG.DATAAUTORIZACAO AS DT_AUTORIZACAO_AEG\n",
							"    ,AEG.DATAATENDIMENTO AS DT_ATENDIMENTO_AEG\n",
							"    ,AES.QTDSOLICITADAORIGINAL\n",
							"    ,AEG.QTDAUTORIZADA\n",
							"    ,(AES.QTDSOLICITADAORIGINAL - AEG.QTDAUTORIZADA) AS QT_NEGADA \n",
							"    ,AES.VALORUNITARIOSOLICITADO\n",
							"    ,AES.VALORUNITARIONEGOCIADOOPME\n",
							"    ,AES.VALORUNITARIOCALCULADOOPME\n",
							"    ,AES.VALORUNITARIOAUTORIZADOOPME\n",
							"    ,AES.DATASOLICITACAO AS DT_SOLICITACAO_AES \n",
							"    ,NAU.NIVELAUTORIZACAO AS NU_NIVEL_AUTORIZACAO \n",
							"    ,AUT.ORIGEMAUTORIZACAO AS CO_ORIGEM_AUTORIZACAO \n",
							"    ,AUT.SOLICITANTENOME AS NO_PROF_SOLICITANTE \n",
							"    ,AUT.SOLICITANTECRNUM AS NU_CRM_PROF_SOLICITANTE_AUT \n",
							"    ,AUT.CONSELHOPROFSOLICITANTETISS AS PK_TD_CONSELHO_Prof_Solic \n",
							"    ,AUT.UFCONSELHOPROFSOLICITANTE AS PK_TD_CONSELHO_Uf_Prof_Solic \n",
							"    ,PES.HANDLE AS HD_PREST_SOLICITANTE_AES \n",
							"    ,PES.PRESTADOR AS CO_PREST_SOLICITANTE_AES \n",
							"    ,AUT.RADIOSOLICITACAO AS DS_ORIGEM_SOLICITACAO\n",
							"    ,AUT.INDICACAOCLINICA AS DS_INDICACAO_CLINICA\n",
							"    ,AUT.DATAVALIDADE AS DT_VALIDADE_AUT\n",
							"    ,PEX.HANDLE AS HD_PREST_EXECUTOR_AES \n",
							"    ,PEX.PRESTADOR AS CO_PREST_EXECUTOR_AES \n",
							"    ,AEG.DATAHORAGERACAO AS TS_GERACAO_AEG\n",
							"    ,AEG.DATAHORALIBERACAO AS TS_LIBERACAO_AEG\n",
							"    ,AEG.USUARIOGERACAO AS HD_USUARIO_GERACAO_AEG\n",
							"    ,TGE.COMPORTAHE AS ST_HORARIO_ESPECIAL\n",
							"FROM SAM_AUTORIZ AUT\n",
							"LEFT JOIN SAM_AUTORIZ_EVENTOSOLICIT AES ON AES.AUTORIZACAO = AUT.HANDLE\n",
							"LEFT JOIN SAM_AUTORIZ_EVENTOGERADO AEG ON AEG.EVENTOSOLICITADO = AES.HANDLE\n",
							"JOIN SAM_TIPOAUTORIZ TAU ON TAU.HANDLE = AUT.TIPOAUTORIZACAO\n",
							"LEFT JOIN SAM_REGIMEATENDIMENTO RA ON RA.HANDLE = AUT.REGIMEATENDIMENTO\n",
							"LEFT JOIN SAM_LOCALATENDIMENTO LA ON LA.HANDLE = AUT.LOCALATENDIMENTO\n",
							"LEFT JOIN SAM_TGE TGE ON TGE.HANDLE = nvl(AEG.EVENTOGERADO, AES.EVENTO)\n",
							"LEFT JOIN SAM_TGE_NIVELAUTORIZACAO NAU ON NAU.EVENTO = TGE.HANDLE \n",
							"LEFT JOIN TIS_TABELAPRECO TPR ON TPR.HANDLE = TGE.TABELADOMINIOTISS\n",
							"LEFT JOIN SAM_GRAU GR ON GR.HANDLE = AEG.GRAUGERADO\n",
							"LEFT JOIN SAM_TIPOTRATAMENTO TPT ON TPT.HANDLE = TGE.TIPOTRATAMENTO\n",
							"LEFT JOIN SAM_OBJTRATAMENTO OBJ ON OBJ.HANDLE = TGE.OBJETIVOTRATAMENTO\n",
							"JOIN SAM_BENEFICIARIO BEN ON BEN.HANDLE = AUT.BENEFICIARIO \n",
							"LEFT JOIN SAM_PRESTADOR PRE1 ON PRE1.HANDLE = AUT.SOLICITANTE\n",
							"LEFT JOIN SAM_PRESTADOR PRE2 ON PRE2.HANDLE = AUT.LOCALEXECUCAO\n",
							"LEFT JOIN SAM_PRESTADOR PFO  ON PFO.HANDLE  = AES.FORNECEDOR\n",
							"LEFT JOIN SAM_PRESTADOR PES  ON PES.HANDLE  = AES.SOLICITANTE\n",
							"LEFT JOIN SAM_PRESTADOR PEX  ON PEX.HANDLE  = AES.EXECUTOR\n",
							"LEFT JOIN TIS_CBOS CBO ON CBO.HANDLE = AUT.CBOSPROFSOLICITANTETISS\n",
							"LEFT JOIN Z_GRUPOUSUARIOS GPU ON GPU.HANDLE = AUT.USUARIO\n",
							"LEFT JOIN SAM_ENDERECO ENDB ON ENDB.HANDLE = BEN.ENDERECORESIDENCIAL\n",
							"LEFT JOIN SAM_FINALIDADEATENDIMENTO FNL ON FNL.HANDLE = AUT.FINALIDADEATENDIMENTO\n",
							"LEFT JOIN TIS_CARATERATENDIMENTO CRT ON CRT.HANDLE = AUT.CARATERATENDIMENTO\n",
							"LEFT JOIN TIS_REGIMEINTERNACAO RGM ON RGM.HANDLE = AUT.REGIMEINTERNACAO\n",
							"LEFT JOIN TIS_TIPOATENDIMENTO TPA ON TPA.HANDLE = AUT.TIPOATENDIMENTO\n",
							"LEFT JOIN TIS_TIPOINTERNACAO TPI ON TPI.HANDLE = AUT.TIPOINTERNACAOTISS\n",
							"LEFT JOIN TIS_INDICADORDEACIDENTE IND ON IND.HANDLE = AUT.INDICADORDEACIDENTE\n",
							"LEFT JOIN TIS_TIPOCONSULTA TPC ON TPC.HANDLE = AUT.TIPOCONSULTA\n",
							"LEFT JOIN SAM_CONTRATO CON ON CON.HANDLE = BEN.CONTRATO\n",
							"JOIN SAM_PLANO PLA ON PLA.HANDLE = CON.PLANO\n",
							"LEFT JOIN SAM_AUTORIZ_LOGSTATUS ALG ON ALG.AUTORIZACAO = AUT.HANDLE \n",
							"\t    JOIN TABTMP ON SSMAX = ALG.HANDLE\n",
							"LEFT JOIN TIS_STATUSSOLICITACAO TSS ON TSS.HANDLE = ALG.STATUS\n",
							"WHERE AUT.LOCALATENDIMENTO = 1 \n",
							"AND AES.SITUACAO <> 'C' \n",
							"AND AUT.SITUACAO NOT IN ('C','F') \n",
							"AND nvl(nvl(AEG.DATAAUTORIZACAO,AES.DATASOLICITACAO),AUT.DATAAUTORIZACAO) = date_format('2022-01-01','yyyy-MM-dd')\n",
							"AND NAU.DATAFINAL IS NULL   \n",
							"ORDER BY HD_AUTORIZACAO,HD_AUTORIZ_EVENTO_SOLICIT,HD_AUTORIZ_EVENTO_GERADO,HD_TGE,HD_BENEF asc \n",
							"\"\"\")\n",
							"df_result.cache()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(df_result.limit(10))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Carrega query de caracteristica autorizacao \n",
							"df_lk_caracautoriz = spark.sql(\"\"\"\n",
							"SELECT DISTINCT\n",
							"\tAUT.HANDLE HANDLE,\n",
							"\tAUT.REGIMEATENDIMENTO REGIMEATENDIMENTO,\n",
							"\tAUT.CONDICAOATENDIMENTO CONDICAOATENDIMENTO,\n",
							"\tAUT.LOCALATENDIMENTO LOCALATENDIMENTO,\n",
							"\tAUT.FINALIDADEATENDIMENTO FINALIDADEATENDIMENTO,\n",
							"\tAUT.TIPOAUTORIZACAO TIPOAUTORIZACAO,\n",
							"\tAUT.TIPOTRATAMENTO TIPOTRATAMENTO,\n",
							"\tAUT.OBJETIVOTRATAMENTO OBJETIVOTRATAMENTO,\n",
							"\tAUT.ACOMODACAO ACOMODACAO,\n",
							"\tAUT.MOTIVOALTA MOTIVOALTA\n",
							"\n",
							"FROM SAM_AUTORIZ AUT\n",
							"LEFT JOIN SAM_AUTORIZ_EVENTOSOLICIT AES ON AES.AUTORIZACAO = AUT.HANDLE\n",
							"LEFT JOIN SAM_AUTORIZ_EVENTOGERADO  AEG ON AEG.EVENTOSOLICITADO = AES.HANDLE\n",
							" \n",
							"WHERE AUT.LOCALATENDIMENTO = 1 --Rede Credenciada\n",
							"AND AES.SITUACAO <> 'C' --Solicitações diferentes de Canceladas\n",
							"AND AUT.SITUACAO NOT IN ('C','F') --Autorizações diferentes de Cancelada e Fechada\n",
							"AND NVL(NVL(AEG.DATAAUTORIZACAO, AES.DATASOLICITACAO ), AUT.DATAAUTORIZACAO) = date_format('2022-01-01','yyyy-MM-dd') \n",
							"ORDER BY AUT.HANDLE\n",
							"\"\"\")\n",
							"df_lk_caracautoriz.cache()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"#display(df_lk_caracautoriz.limit(10))\n",
							"df_lk_caracautoriz.printSchema()\n",
							"rdd_lk = df_lk_caracautoriz.collect()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def lkpHandle (pHandle):\n",
							"    #print (df_lk_caracautoriz.select('HANDLE').where(col('HANDLE') == pHandle))\n",
							"    print(dfTMP.count())\n",
							"    #print(dfTMP.select(col('HANDLE')).limit(1)).show()\n",
							"    #print( dfTMP['HANDLE'] )\n",
							"\n",
							"   \n",
							"        \n",
							"lkpHandle(144334482)\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Criando o DF vazio para receber os valores do lookup. abs\n",
							"dftmp = df_result.limit(0)\n",
							"dftmp = dftmp.withColumn(\"HANDLE\", lit(None).cast(\"decimal(38,18)\") )\n",
							"dftmp = dftmp.withColumn(\"REGIMEATENDIMENTO\", lit(None).cast(\"decimal(38,18)\") )\n",
							"dftmp = dftmp.withColumn(\"CONDICAOATENDIMENTO\", lit(None).cast(\"decimal(38,18)\") )\n",
							"dftmp = dftmp.withColumn(\"LOCALATENDIMENTO\", lit(None).cast(\"decimal(38,18)\") )\n",
							"dftmp = dftmp.withColumn(\"FINALIDADEATENDIMENTO\", lit(None).cast(\"decimal(38,18)\") )\n",
							"dftmp = dftmp.withColumn(\"TIPOAUTORIZACAO\", lit(None).cast(\"decimal(38,18)\") )\n",
							"dftmp = dftmp.withColumn(\"TIPOTRATAMENTO\", lit(None).cast(\"decimal(38,18)\") )\n",
							"dftmp = dftmp.withColumn(\"OBJETIVOTRATAMENTO\", lit(None).cast(\"decimal(38,18)\") )\n",
							"dftmp = dftmp.withColumn(\"ACOMODACAO\", lit(None).cast(\"decimal(38,18)\") )\n",
							"dftmp = dftmp.withColumn(\"MOTIVOALTA\", lit(None).cast(\"decimal(38,18)\") )"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 60
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"#dftmp = df_result\n",
							"#display(dftmp.limit(10))\n",
							"\n",
							"\n",
							"#display(df_lk_caracautoriz.select(col('HANDLE')).limit(5))\n",
							"#dftmp.withColumn(\"HANDLE\", df_lk_caracautoriz.select(col(HANDLE)).where(col('HANDLE') == 144334482).limit(1) )\n",
							"\n",
							"#df_lk = df_lk_caracautoriz\n",
							"#display(df_lk_caracautoriz.select(col('HANDLE')).where(col('HANDLE') == 144334482).limit(1))\n",
							"\n",
							"dftmp2 = dftmp.withColumn('HANDLE1', df_lk.select(col('HANDLE')).where(col('HANDLE') == dftmp['HD_AUTORIZACAO']).limit(1).cast('int')  )\n",
							"\n",
							"\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 104
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dftmp2 = dftmp.withColumn('HANDLE', df_lk_caracautoriz.select(col('HANDLE')).where(col('HANDLE') == dftmp['HD_AUTORIZACAO']).limit(1).cast('int') )"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 103
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"####  Tratativa \n",
							"##    Dados da autorizacao na query principal (df_result)\n",
							"##    Dados da caracteristica autorizacao estão na (df_lk_caracautoriz)\n",
							"\n",
							"for row in df_result.rdd.collect():\n",
							"    dftmp['HD_AUTORIZACAO']\n",
							"    dftmp['HD_AUTORIZ_EVENTO_SOLICIT\n",
							"    dftmp['HD_AUTORIZ_EVENTO_GERADO\n",
							"    dftmp['HD_TGE \n",
							"    dftmp['HD_BENEF\n",
							"    dftmp['HD_ESTADO_BENEF\n",
							"    dftmp['HD_ESTADO_PREST_EXEC\n",
							"    dftmp['HD_PREST_SOLICITANTE\n",
							"    dftmp['CO_PREST_SOLICITANTE\n",
							"    dftmp['HD_PREST_EXECUTOR\n",
							"    dftmp['CO_PREST_EXECUTOR\n",
							"    dftmp['HD_PREST_FORNECEDOR \n",
							"    dftmp['CO_PREST_FORNECEDOR \n",
							"    dftmp['HD_TP_AUTORIZ\n",
							"    dftmp['HD_GRAU\n",
							"    dftmp['CO_GRAU\n",
							"    dftmp['CO_TP_TRATAMENTO\n",
							"    dftmp['CO_OBJ_TRATAMENTO\n",
							"    dftmp['HD_REGIME_ATEND \n",
							"    dftmp['HD_FINALID_ATEND\n",
							"    dftmp['HD_CARAT_ATEND\n",
							"    dftmp['HD_REGIME_INT\n",
							"    dftmp['HD_TP_ATEND\n",
							"    dftmp['HD_TP_INTERN\n",
							"    dftmp['HD_IND_ACIDENTE\n",
							"    dftmp['HD_TP_CONSULTA\n",
							"    dftmp['HD_PLANO\n",
							"    dftmp['HD_CONTRATO\n",
							"    dftmp['HD_USUARIO\n",
							"    dftmp['HD_TIS_TAB_PRECO\n",
							"    dftmp['CO_TIS_TAB_PRECO\n",
							"    dftmp['HD_CBOS\n",
							"    dftmp['CO_CBOS\n",
							"    dftmp['CO_ST_SOLICIT\n",
							"    dftmp['CO_SITUACAO_AUT\n",
							"    dftmp['CO_SITUACAO_AES\n",
							"    dftmp['CO_SITUACAO_AEG\n",
							"    dftmp['ST_OPCAO_OPME \n",
							"    dftmp['NU_AUTORIZACAO\n",
							"    dftmp['DT_AUTORIZACAO_AUT\n",
							"    dftmp['DT_SOLICITACAO_AUT\n",
							"    dftmp['DT_AUTORIZACAO_AEG\n",
							"    dftmp['DT_ATENDIMENTO_AEG\n",
							"    dftmp['QTDSOLICITADAORIGINAL\n",
							"    dftmp['QTDAUTORIZADA\n",
							"    dftmp['QT_NEGADA \n",
							"    dftmp['VALORUNITARIOSOLICITADO\n",
							"    dftmp['VALORUNITARIONEGOCIADOOPME\n",
							"    dftmp['VALORUNITARIOCALCULADOOPME\n",
							"    dftmp['VALORUNITARIOAUTORIZADOOPME\n",
							"    dftmp['DT_SOLICITACAO_AES \n",
							"    dftmp['NU_NIVEL_AUTORIZACAO \n",
							"    dftmp['CO_ORIGEM_AUTORIZACAO \n",
							"    dftmp['NO_PROF_SOLICITANTE \n",
							"    dftmp['NU_CRM_PROF_SOLICITANTE_AUT \n",
							"    dftmp['PK_TD_CONSELHO_Prof_Solic \n",
							"    dftmp['PK_TD_CONSELHO_Uf_Prof_Solic \n",
							"    dftmp['HD_PREST_SOLICITANTE_AES \n",
							"    dftmp['CO_PREST_SOLICITANTE_AES \n",
							"    dftmp['DS_ORIGEM_SOLICITACAO\n",
							"    dftmp['DS_INDICACAO_CLINICA\n",
							"    dftmp['DT_VALIDADE_AUT\n",
							"    dftmp['HD_PREST_EXECUTOR_AES \n",
							"    dftmp['CO_PREST_EXECUTOR_AES \n",
							"    dftmp['TS_GERACAO_AEG\n",
							"    dftmp['TS_LIBERACAO_AEG\n",
							"    dftmp['HD_USUARIO_GERACAO_AEG\n",
							"    dftmp['ST_HORARIO_ESPECIAL\n",
							"    dfcheck = df_lk_caracautoriz.where(col('HANDLE') == row['HD_AUTORIZACAO'])\n",
							"    dftmp = row\n",
							"    \n",
							"    \n",
							"    break\n",
							"\n",
							"\n",
							"\n",
							"# -------------------------------\n",
							"# --> SE TIVER ALGUMA COISA\n",
							"#     agregar os resultados da primeira linha do lookup com o DF_RESULT\n",
							"#\n",
							"# --> SE NAO TIVER\n",
							"#.    Colocar campos como null    \n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 73
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 74
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\n",
							"df_teste = df_teste.withColumn(\"HANDLE\", lit(None).cast(\"decimal(38,18)\") )\n",
							"df_teste = df_teste.withColumn(\"REGIMEATENDIMENTO\", lit(None).cast(\"decimal(38,18)\") )\n",
							"df_teste = df_teste.withColumn(\"CONDICAOATENDIMENTO\", lit(None).cast(\"decimal(38,18)\") )\n",
							"df_teste = df_teste.withColumn(\"LOCALATENDIMENTO\", lit(None).cast(\"decimal(38,18)\") )\n",
							"df_teste = df_teste.withColumn(\"FINALIDADEATENDIMENTO\", lit(None).cast(\"decimal(38,18)\") )\n",
							"df_teste = df_teste.withColumn(\"TIPOAUTORIZACAO\", lit(None).cast(\"decimal(38,18)\") )\n",
							"df_teste = df_teste.withColumn(\"TIPOTRATAMENTO\", lit(None).cast(\"decimal(38,18)\") )\n",
							"df_teste = df_teste.withColumn(\"OBJETIVOTRATAMENTO\", lit(None).cast(\"decimal(38,18)\") )\n",
							"df_teste = df_teste.withColumn(\"ACOMODACAO\", lit(None).cast(\"decimal(38,18)\") )\n",
							"df_teste = df_teste.withColumn(\"MOTIVOALTA\", lit(None).cast(\"decimal(38,18)\") )\n",
							"\n",
							"df_teste.printSchema()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 59
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\n",
							"#df_result.printSchema()\n",
							"#df_teste = df_result.limit(0) \n",
							"\n",
							"\n",
							"# |-- HANDLE: decimal(38,18) (nullable = true)\n",
							"# |-- REGIMEATENDIMENTO: decimal(38,18) (nullable = true)\n",
							"# |-- CONDICAOATENDIMENTO: decimal(38,18) (nullable = true)\n",
							"# |-- LOCALATENDIMENTO: decimal(38,18) (nullable = true)\n",
							"# |-- FINALIDADEATENDIMENTO: decimal(38,18) (nullable = true)\n",
							"# |-- TIPOAUTORIZACAO: decimal(38,18) (nullable = true)\n",
							"# |-- TIPOTRATAMENTO: decimal(38,18) (nullable = true)\n",
							"# |-- OBJETIVOTRATAMENTO: decimal(38,18) (nullable = true)\n",
							"# |-- ACOMODACAO: decimal(38,18) (nullable = true)\n",
							"# |-- MOTIVOALTA: decimal(38,18) (nullable = true)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\n",
							"df_teste.printSchema()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 48
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## TESTE DAS QUERYS\n",
							"#### Query 01"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql \n",
							"SELECT DISTINCT\n",
							"     AUT.HANDLE AS HD_AUTORIZACAO\n",
							"    ,AES.HANDLE AS HD_AUTORIZ_EVENTO_SOLICIT\n",
							"    ,AEG.HANDLE AS HD_AUTORIZ_EVENTO_GERADO\n",
							"    ,TGE.HANDLE AS HD_TGE \n",
							"    ,BEN.HANDLE AS HD_BENEF\n",
							"    ,ENDB.ESTADO AS HD_ESTADO_BENEF\n",
							"    ,PRE2.ESTADOPAGAMENTO AS HD_ESTADO_PREST_EXEC\n",
							"    ,PRE1.HANDLE AS HD_PREST_SOLICITANTE\n",
							"    ,PRE1.PRESTADOR AS CO_PREST_SOLICITANTE\n",
							"    ,PRE2.HANDLE AS HD_PREST_EXECUTOR\n",
							"    ,PRE2.PRESTADOR AS CO_PREST_EXECUTOR\n",
							"    ,PFO.HANDLE AS HD_PREST_FORNECEDOR \n",
							"    ,PFO.PRESTADOR AS CO_PREST_FORNECEDOR \n",
							"    ,TAU.HANDLE AS HD_TP_AUTORIZ\n",
							"    ,GR.HANDLE AS HD_GRAU\n",
							"    ,GR.GRAU AS CO_GRAU\n",
							"    ,TPT.CODIGO AS CO_TP_TRATAMENTO\n",
							"    ,OBJ.CODIGO AS CO_OBJ_TRATAMENTO\n",
							"    ,TPA.HANDLE as HD_REGIME_ATEND \n",
							"    ,FNL.HANDLE AS HD_FINALID_ATEND\n",
							"    ,CRT.HANDLE AS HD_CARAT_ATEND\n",
							"    ,RGM.HANDLE AS HD_REGIME_INT\n",
							"    ,TPA.HANDLE AS HD_TP_ATEND\n",
							"    ,TPI.HANDLE AS HD_TP_INTERN\n",
							"    ,IND.HANDLE AS HD_IND_ACIDENTE\n",
							"    ,TPC.HANDLE AS HD_TP_CONSULTA\n",
							"    ,PLA.HANDLE AS HD_PLANO\n",
							"    ,CON.HANDLE AS HD_CONTRATO\n",
							"    ,GPU.HANDLE AS HD_USUARIO\n",
							"    ,TPR.HANDLE AS HD_TIS_TAB_PRECO\n",
							"    ,TPR.CODIGO AS CO_TIS_TAB_PRECO\n",
							"    ,CBO.HANDLE AS HD_CBOS\n",
							"    ,CBO.CODIGO AS CO_CBOS\n",
							"    ,TSS.CODIGO AS CO_ST_SOLICIT\n",
							"    ,AUT.SITUACAO AS CO_SITUACAO_AUT\n",
							"    ,AES.SITUACAO AS CO_SITUACAO_AES\n",
							"    ,AEG.SITUACAO AS CO_SITUACAO_AEG\n",
							"    ,AES.OPCAOOPME AS ST_OPCAO_OPME \n",
							"    ,AUT.AUTORIZACAO AS NU_AUTORIZACAO\n",
							"    ,AUT.DATAAUTORIZACAO AS DT_AUTORIZACAO_AUT\n",
							"    ,AUT.DATASOLICITACAO AS DT_SOLICITACAO_AUT\n",
							"    ,AEG.DATAAUTORIZACAO AS DT_AUTORIZACAO_AEG\n",
							"    ,AEG.DATAATENDIMENTO AS DT_ATENDIMENTO_AEG\n",
							"    ,AES.QTDSOLICITADAORIGINAL\n",
							"    ,AEG.QTDAUTORIZADA\n",
							"    ,(AES.QTDSOLICITADAORIGINAL - AEG.QTDAUTORIZADA) AS QT_NEGADA \n",
							"    ,AES.VALORUNITARIOSOLICITADO\n",
							"    ,AES.VALORUNITARIONEGOCIADOOPME\n",
							"    ,AES.VALORUNITARIOCALCULADOOPME\n",
							"    ,AES.VALORUNITARIOAUTORIZADOOPME\n",
							"    ,AES.DATASOLICITACAO AS DT_SOLICITACAO_AES \n",
							"    ,NAU.NIVELAUTORIZACAO AS NU_NIVEL_AUTORIZACAO \n",
							"    ,AUT.ORIGEMAUTORIZACAO AS CO_ORIGEM_AUTORIZACAO \n",
							"    ,AUT.SOLICITANTENOME AS NO_PROF_SOLICITANTE \n",
							"    ,AUT.SOLICITANTECRNUM AS NU_CRM_PROF_SOLICITANTE_AUT \n",
							"    ,AUT.CONSELHOPROFSOLICITANTETISS AS PK_TD_CONSELHO_Prof_Solic \n",
							"    ,AUT.UFCONSELHOPROFSOLICITANTE AS PK_TD_CONSELHO_Uf_Prof_Solic \n",
							"    ,PES.HANDLE AS HD_PREST_SOLICITANTE_AES \n",
							"    ,PES.PRESTADOR AS CO_PREST_SOLICITANTE_AES \n",
							"    ,AUT.RADIOSOLICITACAO AS DS_ORIGEM_SOLICITACAO\n",
							"    ,AUT.INDICACAOCLINICA AS DS_INDICACAO_CLINICA\n",
							"    ,AUT.DATAVALIDADE AS DT_VALIDADE_AUT\n",
							"    ,PEX.HANDLE AS HD_PREST_EXECUTOR_AES \n",
							"    ,PEX.PRESTADOR AS CO_PREST_EXECUTOR_AES \n",
							"    ,AEG.DATAHORAGERACAO AS TS_GERACAO_AEG\n",
							"    ,AEG.DATAHORALIBERACAO AS TS_LIBERACAO_AEG\n",
							"    ,AEG.USUARIOGERACAO AS HD_USUARIO_GERACAO_AEG\n",
							"    ,TGE.COMPORTAHE AS ST_HORARIO_ESPECIAL\n",
							"FROM SAM_AUTORIZ AUT\n",
							"LEFT JOIN SAM_AUTORIZ_EVENTOSOLICIT AES ON AES.AUTORIZACAO = AUT.HANDLE\n",
							"LEFT JOIN SAM_AUTORIZ_EVENTOGERADO AEG ON AEG.EVENTOSOLICITADO = AES.HANDLE\n",
							"JOIN SAM_TIPOAUTORIZ TAU ON TAU.HANDLE = AUT.TIPOAUTORIZACAO\n",
							"LEFT JOIN SAM_REGIMEATENDIMENTO RA ON RA.HANDLE = AUT.REGIMEATENDIMENTO\n",
							"LEFT JOIN SAM_LOCALATENDIMENTO LA ON LA.HANDLE = AUT.LOCALATENDIMENTO\n",
							"LEFT JOIN SAM_TGE TGE ON TGE.HANDLE = nvl(AEG.EVENTOGERADO, AES.EVENTO)\n",
							"LEFT JOIN SAM_TGE_NIVELAUTORIZACAO NAU ON NAU.EVENTO = TGE.HANDLE \n",
							"LEFT JOIN TIS_TABELAPRECO TPR ON TPR.HANDLE = TGE.TABELADOMINIOTISS\n",
							"LEFT JOIN SAM_GRAU GR ON GR.HANDLE = AEG.GRAUGERADO\n",
							"LEFT JOIN SAM_TIPOTRATAMENTO TPT ON TPT.HANDLE = TGE.TIPOTRATAMENTO\n",
							"LEFT JOIN SAM_OBJTRATAMENTO OBJ ON OBJ.HANDLE = TGE.OBJETIVOTRATAMENTO\n",
							"JOIN SAM_BENEFICIARIO BEN ON BEN.HANDLE = AUT.BENEFICIARIO \n",
							"LEFT JOIN SAM_PRESTADOR PRE1 ON PRE1.HANDLE = AUT.SOLICITANTE\n",
							"LEFT JOIN SAM_PRESTADOR PRE2 ON PRE2.HANDLE = AUT.LOCALEXECUCAO\n",
							"LEFT JOIN SAM_PRESTADOR PFO  ON PFO.HANDLE  = AES.FORNECEDOR\n",
							"LEFT JOIN SAM_PRESTADOR PES  ON PES.HANDLE  = AES.SOLICITANTE\n",
							"LEFT JOIN SAM_PRESTADOR PEX  ON PEX.HANDLE  = AES.EXECUTOR\n",
							"LEFT JOIN TIS_CBOS CBO ON CBO.HANDLE = AUT.CBOSPROFSOLICITANTETISS\n",
							"LEFT JOIN Z_GRUPOUSUARIOS GPU ON GPU.HANDLE = AUT.USUARIO\n",
							"LEFT JOIN SAM_ENDERECO ENDB ON ENDB.HANDLE = BEN.ENDERECORESIDENCIAL\n",
							"LEFT JOIN SAM_FINALIDADEATENDIMENTO FNL ON FNL.HANDLE = AUT.FINALIDADEATENDIMENTO\n",
							"LEFT JOIN TIS_CARATERATENDIMENTO CRT ON CRT.HANDLE = AUT.CARATERATENDIMENTO\n",
							"LEFT JOIN TIS_REGIMEINTERNACAO RGM ON RGM.HANDLE = AUT.REGIMEINTERNACAO\n",
							"LEFT JOIN TIS_TIPOATENDIMENTO TPA ON TPA.HANDLE = AUT.TIPOATENDIMENTO\n",
							"LEFT JOIN TIS_TIPOINTERNACAO TPI ON TPI.HANDLE = AUT.TIPOINTERNACAOTISS\n",
							"LEFT JOIN TIS_INDICADORDEACIDENTE IND ON IND.HANDLE = AUT.INDICADORDEACIDENTE\n",
							"LEFT JOIN TIS_TIPOCONSULTA TPC ON TPC.HANDLE = AUT.TIPOCONSULTA\n",
							"LEFT JOIN SAM_CONTRATO CON ON CON.HANDLE = BEN.CONTRATO\n",
							"JOIN SAM_PLANO PLA ON PLA.HANDLE = CON.PLANO\n",
							"LEFT JOIN SAM_AUTORIZ_LOGSTATUS ALG ON ALG.AUTORIZACAO = AUT.HANDLE \n",
							"\t    JOIN TABTMP ON SSMAX = ALG.HANDLE\n",
							"LEFT JOIN TIS_STATUSSOLICITACAO TSS ON TSS.HANDLE = ALG.STATUS\n",
							"WHERE AUT.LOCALATENDIMENTO = 1 \n",
							"AND AES.SITUACAO <> 'C' \n",
							"AND AUT.SITUACAO NOT IN ('C','F') \n",
							"AND nvl(nvl(AEG.DATAAUTORIZACAO,AES.DATASOLICITACAO),AUT.DATAAUTORIZACAO) = date_format('2022-01-01','yyyy-MM-dd')\n",
							"AND NAU.DATAFINAL IS NULL \n",
							"\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							}
						},
						"source": [
							"%%sql\n",
							"SELECT \n",
							"\tAUT.HANDLE,\n",
							"\tAUT.REGIMEATENDIMENTO,\n",
							"\tAUT.CONDICAOATENDIMENTO,\n",
							"\tAUT.LOCALATENDIMENTO,\n",
							"\tAUT.FINALIDADEATENDIMENTO,\n",
							"\tAUT.TIPOAUTORIZACAO,\n",
							"\tAUT.TIPOTRATAMENTO,\n",
							"\tAUT.OBJETIVOTRATAMENTO,\n",
							"\tAUT.ACOMODACAO,\n",
							"\tAUT.MOTIVOALTA\n",
							"\n",
							"FROM SAM_AUTORIZ AUT\n",
							"LEFT JOIN SAM_AUTORIZ_EVENTOSOLICIT AES ON AES.AUTORIZACAO = AUT.HANDLE\n",
							"LEFT JOIN SAM_AUTORIZ_EVENTOGERADO  AEG ON AEG.EVENTOSOLICITADO = AES.HANDLE\n",
							" \n",
							"WHERE AUT.LOCALATENDIMENTO = 1 --Rede Credenciada\n",
							"AND AES.SITUACAO <> 'C' --Solicitações diferentes de Canceladas\n",
							"AND AUT.SITUACAO NOT IN ('C','F') --Autorizações diferentes de Cancelada e Fechada\n",
							"AND NVL(NVL(AEG.DATAAUTORIZACAO, AES.DATASOLICITACAO ), AUT.DATAAUTORIZACAO) = date_format('2022-01-01','yyyy-MM-dd') \n",
							"\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/testeNotebookWelker')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "synPoolSpark001",
					"type": "BigDataPoolReference"
				},
				"targetSparkConfiguration": {
					"referenceName": "sparkConfiguration1",
					"type": "SparkConfigurationReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "0d603a83-5751-4d41-9a5d-05f0f8427195"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"15b4693c-b263-4fa2-bd9c-e59cb3320747": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "147268329.000000000000000000",
												"1": "1.000000000000000000",
												"2": "1.000000000000000000",
												"3": "1.000000000000000000",
												"4": "12.000000000000000000",
												"5": "47.000000000000000000",
												"6": "1.000000000000000000",
												"7": "3.000000000000000000",
												"10": "2022-03-10 00:00:00",
												"11": "2022-03-10 00:00:00",
												"12": "2022-03-10 08:52:26"
											},
											{
												"0": "147283779.000000000000000000",
												"1": "1.000000000000000000",
												"2": "1.000000000000000000",
												"3": "1.000000000000000000",
												"4": "12.000000000000000000",
												"5": "47.000000000000000000",
												"6": "1.000000000000000000",
												"7": "3.000000000000000000",
												"10": "2022-03-10 00:00:00",
												"11": "2022-03-10 00:00:00",
												"12": "2022-03-10 12:07:04"
											},
											{
												"0": "147282762.000000000000000000",
												"1": "1.000000000000000000",
												"2": "1.000000000000000000",
												"3": "1.000000000000000000",
												"4": "12.000000000000000000",
												"5": "47.000000000000000000",
												"6": "1.000000000000000000",
												"7": "3.000000000000000000",
												"10": "2022-03-10 00:00:00",
												"11": "2022-03-10 00:00:00",
												"12": "2022-03-10 11:44:02"
											},
											{
												"0": "147282428.000000000000000000",
												"1": "3.000000000000000000",
												"2": "1.000000000000000000",
												"3": "1.000000000000000000",
												"4": "12.000000000000000000",
												"5": "68.000000000000000000",
												"6": "1.000000000000000000",
												"7": "1.000000000000000000",
												"10": "2022-03-10 00:00:00",
												"11": "2022-03-10 00:00:00",
												"12": "2022-03-10 11:37:23"
											},
											{
												"0": "147254085.000000000000000000",
												"1": "1.000000000000000000",
												"2": "1.000000000000000000",
												"3": "1.000000000000000000",
												"4": "12.000000000000000000",
												"5": "47.000000000000000000",
												"6": "1.000000000000000000",
												"7": "3.000000000000000000",
												"10": "2022-03-10 00:00:00",
												"11": "2022-03-10 00:00:00",
												"12": "2022-03-09 17:07:56"
											},
											{
												"0": "147798020.000000000000000000",
												"1": "1.000000000000000000",
												"2": "1.000000000000000000",
												"3": "1.000000000000000000",
												"4": "12.000000000000000000",
												"5": "47.000000000000000000",
												"6": "1.000000000000000000",
												"7": "3.000000000000000000",
												"10": "2022-03-10 00:00:00",
												"11": "2022-03-10 00:00:00",
												"12": "2022-03-24 15:54:59"
											},
											{
												"0": "148396091.000000000000000000",
												"1": "1.000000000000000000",
												"2": "1.000000000000000000",
												"3": "1.000000000000000000",
												"4": "12.000000000000000000",
												"5": "47.000000000000000000",
												"6": "1.000000000000000000",
												"7": "3.000000000000000000",
												"10": "2022-03-10 00:00:00",
												"11": "2022-03-10 00:00:00",
												"12": "2022-04-11 14:20:31"
											},
											{
												"0": "147278282.000000000000000000",
												"1": "1.000000000000000000",
												"2": "1.000000000000000000",
												"3": "1.000000000000000000",
												"4": "12.000000000000000000",
												"5": "47.000000000000000000",
												"6": "1.000000000000000000",
												"7": "3.000000000000000000",
												"10": "2022-03-10 00:00:00",
												"11": "2022-03-10 00:00:00",
												"12": "2022-03-10 10:37:49"
											},
											{
												"0": "147272898.000000000000000000",
												"1": "1.000000000000000000",
												"2": "1.000000000000000000",
												"3": "1.000000000000000000",
												"4": "12.000000000000000000",
												"5": "47.000000000000000000",
												"6": "1.000000000000000000",
												"7": "3.000000000000000000",
												"10": "2022-03-10 00:00:00",
												"11": "2022-03-10 00:00:00",
												"12": "2022-03-10 09:38:52"
											},
											{
												"0": "147293618.000000000000000000",
												"1": "2.000000000000000000",
												"2": "1.000000000000000000",
												"3": "1.000000000000000000",
												"4": "12.000000000000000000",
												"5": "47.000000000000000000",
												"6": "1.000000000000000000",
												"7": "3.000000000000000000",
												"10": "2022-03-10 00:00:00",
												"11": "2022-03-10 00:00:00",
												"12": "2022-03-10 15:17:49"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "handle",
												"type": "decimal"
											},
											{
												"key": "1",
												"name": "regimeatendimento",
												"type": "decimal"
											},
											{
												"key": "2",
												"name": "condicaoatendimento",
												"type": "decimal"
											},
											{
												"key": "3",
												"name": "localatendimento",
												"type": "decimal"
											},
											{
												"key": "4",
												"name": "finalidadeatendimento",
												"type": "decimal"
											},
											{
												"key": "5",
												"name": "tipoautorizacao",
												"type": "decimal"
											},
											{
												"key": "6",
												"name": "tipotratamento",
												"type": "decimal"
											},
											{
												"key": "7",
												"name": "objetivotratamento",
												"type": "decimal"
											},
											{
												"key": "8",
												"name": "acomodacao",
												"type": "decimal"
											},
											{
												"key": "9",
												"name": "motivoalta",
												"type": "decimal"
											},
											{
												"key": "10",
												"name": "dataautorizacao",
												"type": "timestamp"
											},
											{
												"key": "11",
												"name": "datasolicitacao",
												"type": "timestamp"
											},
											{
												"key": "12",
												"name": "dataautorizacao",
												"type": "timestamp"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"95d9420e-b1fd-44f5-abe4-c727e2a038cc": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "358482",
												"1": "68742730320",
												"2": "8/9/2022 9:26:05 PM",
												"3": {
													"x-opt-enqueued-time": {
														"member0": 1660080365687
													}
												},
												"5": "MjAyMi0wOC0wOSAxODoxNjowMy4wMzkwMDAwMDAwMDAsMCxJLE5PVCBTRVQgICAsXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sNDc5MTI3LFxOLDQ3OTEyNyw0LDAzMDAwNjg1NDYwMDAwLE4sOTkxOTc4MjMyLHplemVtYXJpbm9AZ21haWwuY29tLFxOLFxOLDAsTiw1MjMzLFxOLFMsXE4sXE4sTiwwLDMwLDQ3OTEyNywxOTczLTA3LTA1VDAwOjAwOjAwLjAwMDAwMDAwMDAwMCxcTixcTiw0NSxNQVJJQSBKT1NFIERFIENBU1RSTyBNQVJJTk8sMDEwMDA5MDU3NzEwMTAwOSxcTixcTiwwNSwwMDY4NTQ2MDAsTixOLDE5NzMtMDctMDVUMDA6MDA6MDAuMDAwMDAwMDAwMDAwLDE3NyxQLDI0LFMsNDc5MTI3LDUxMDk0MjgsNTEwOTQyNyxTLDM3NDkwMDUsXE4sXE4sMjUsXE4sTiwxOTczLTA3LTA1VDAwOjAwOjAwLjAwMDAwMDAwMDAwMCxOLDAxMDAwOTA1NzcxMDEwMDksTixcTiwxLFxOLFxOLFxOLFMsUyxcTixcTiw3OCwxOTczLTA3LTA1VDAwOjAwOjAwLjAwMDAwMDAwMDAwMCwxLDIsXE4sXE4sXE4sMDA2ODU0NjAwMDAsXE4sXE4sTixOLE4sMTAwMDQ3NTQ1NyxcTixcTiwxLDEsMSwxLDAzMDAwNjg1NDYwMDAwMzAsTiwwLDEsXE4sXE4sNSxOLE4sXE4sXE4sMjAyMC0xMS0wM1QwMDowMDowMC4wMDAwMDAwMDAwMDAsTixcTixcTixcTixcTixcTixcTixcTixcTixcTixcTixcTixOLE4sMjAxMC0wOS0zMFQwMDowMDowMC4wMDAwMDAwMDAwMDAsXE4sTUFSSUEgSk9TRSBERSBDQVNUUk8gTUFSSU5PLE1BUklBIEpPU0UgREUgQ0FTVFJPIE1BUklOTyxNQVJJQSBKT1NFIERFIENBU1RSTyBNQVJJTk8sXE4sUywxNjQwOTM4MTgsTixTLDQwLFxOLFxOLFxOLFxOLE4sXE4sXE4sXE4sXE4sTixOLE4sXE4sXE4sTixcTiwwLDE5OTYtMTAtMjlUMDA6MDA6MDAuMDAwMDAwMDAwMDAwLCAgLCAgICAgICAgLCAgLFxOLFxOLFxOLFxOLFxOLE4sTixQUFBJLFBBU1MsMSwxOTk2LTEwLTI5VDAwOjAwOjAwLjAwMDAwMDAwMDAwMCwyMDA4OTQ0MDIsMC4wLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLDIxLE4sXE4sXE4sMSxcTixcTiwgLCAsMjcsMjAyMS0wMS0yOVQxMDozNjoyNS4wMDAwMDAwMDAwMDAsNDA0NDgsMjAyMi0wNC0xOVQwODowMDo0Mi4wMDAwMDAwMDAwMDAsXE4="
											},
											{
												"0": "358483",
												"1": "68742795136",
												"2": "8/9/2022 9:26:05 PM",
												"3": {
													"x-opt-enqueued-time": {
														"member0": 1660080365687
													}
												},
												"5": "MjAyMi0wOC0wOSAxODoxNjowMy4wMzkwMDAwMDAwMDAsMCxJLE5PVCBTRVQgICAsXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sNDc5MTI4LFxOLDQ3OTEyNyw0LDAzMDAwNjg1NDYwMDAxLE4sXE4sXE4sXE4sXE4sMSxOLFxOLFxOLE4sXE4sXE4sTiwwLFxOLDQ3OTEyOCwxOTgwLTAxLTAxVDAwOjAwOjAwLjAwMDAwMDAwMDAwMCwyMDAzLTA3LTMwVDAwOjAwOjAwLjAwMDAwMDAwMDAwMCwxMyw4ODgsQ0FNSUxBIEJJQU5DQSBERSBDLk1BUklOTywwMTAxMDU2OTg3OTgxMDA4LFxOLFxOLDAxLFxOLE4sTiwxOTgwLTAxLTAxVDAwOjAwOjAwLjAwMDAwMDAwMDAwMCwxNzcsUCwyNCxTLDQ3OTEyNyw0NzkxMjcsNDc5MTI3LFxOLFxOLFxOLFxOLDI1LFxOLE4sMTk4MC0wMS0wMVQwMDowMDowMC4wMDAwMDAwMDAwMDAsTiwwMTAxOTk5OTk5OTkxMDA0LE4sXE4sMSxcTixcTixcTixTLFMsXE4sXE4sNzgsMTk4MC0wMS0wMVQwMDowMDowMC4wMDAwMDAwMDAwMDAsMSwxLFxOLFxOLFxOLDAwNjg1NDYwMDAxLFxOLFxOLE4sTixOLDEwMDA0NzU0NTgsXE4sXE4sMSwxLDEsMSwwMTAxOTk5OTk5OTkxMDA0LE4sXE4sMzAsXE4sXE4sNSxOLE4sXE4sXE4sXE4sTixcTixcTixcTixcTixcTixcTixcTixcTixcTixcTixcTixOLE4sXE4sXE4sQ0FNSUxBIEJJQU5DQSBERSBDIE1BUklOTyxDQU1JTEEgQklBTkNBIERFIEMgTUFSSU5PLENBTUlMQSBCSUFOQ0EgREUgQyBNQVJJTk8sXE4sTixcTixTLFMsXE4sXE4sXE4sXE4sXE4sTixcTixcTixcTixcTixOLE4sTixcTixcTixOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLDAsXE4sTixOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLDAwMDIsXE4sMSxcTixcTixcTixcTixTLFxOLFxOLDMsXE4sXE4sXE4sXE4sMjcsMjAyMS0wMS0yOVQxMDozNjoyNS4wMDAwMDAwMDAwMDAsNDA0NDgsXE4sXE4="
											},
											{
												"0": "358484",
												"1": "68742795192",
												"2": "8/9/2022 9:26:05 PM",
												"3": {
													"x-opt-enqueued-time": {
														"member0": 1660080365687
													}
												},
												"5": "MjAyMi0wOC0wOSAxODoxNjowMy4wMzkwMDAwMDAwMDAsMCxJLE5PVCBTRVQgICAsXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sNDc5MTMwLFxOLDQ3OTEyNyw0LDAzMDAwNjg1NDYwMDAzLE4sMDAxMTkxOTc4MjMyLE1BSk9NQVJJTk9ASE9UTUFJTC5DT00sXE4sXE4sMyxOLDQ3NDQsXE4sTixcTixcTixOLDAsMDMsNDc5MTMwLDE5ODYtMTAtMDFUMDA6MDA6MDAuMDAwMDAwMDAwMDAwLDIwMTAtMDgtMjdUMDA6MDA6MDAuMDAwMDAwMDAwMDAwLDEzLDg4OCxBTkEgQ0FST0xJTkEgREUgQ0FTVFJPIE1BUklOTywwMTAzMDkwNTc3MTIxMDA0LFxOLFxOLDAyLFxOLE4sTiwxOTg2LTEwLTAxVDAwOjAwOjAwLjAwMDAwMDAwMDAwMCwxNzcsUCwyNCxTLDQ3OTEyNyw0NzkxMjcsNDc5MTI3LFxOLFxOLDIwMTAtMDgtMzFUMDA6MDA6MDAuMDAwMDAwMDAwMDAwLFxOLDI1LFxOLE4sMTk4Ni0xMC0wMVQwMDowMDowMC4wMDAwMDAwMDAwMDAsTiwwMTAzMDkwNTc3MTIxMDA0LE4sXE4sMSxcTixcTixcTixTLFMsXE4sXE4sNzgsMTk4Ni0xMC0wMVQwMDowMDowMC4wMDAwMDAwMDAwMDAsMSwyLFxOLFxOLFxOLDAwNjg1NDYwMDAzLFxOLFxOLE4sTixOLDEwMDA0NzU0NjAsXE4sXE4sMSwxLDEsMSwwMzAwMDY4NTQ2MDAwMzAzLE4sMywzMCxcTixcTiw1LE4sTixcTixcTixcTixOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLE4sTixcTixcTixBTkEgQ0FST0xJTkEgQ0FTVFJPIE1BUklOTyxBTkEgQ0FST0xJTkEgQ0FTVFJPIE1BUklOTyxBTkEgQ0FST0xJTkEgREUgQ0FTVFJPIE1BUklOTyxcTixOLDE2NDA5MzgxOSxOLFMsMjEsXE4sXE4sXE4sXE4sTixcTixcTixcTixcTixOLE4sTixcTixcTixOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLDAsXE4sTixOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLDAwMDIsXE4sMSxcTixcTixcTixcTixTLFxOLFxOLDMsXE4sXE4sXE4sXE4sMjcsMjAyMS0wMS0yOVQxMDozNjoyNS4wMDAwMDAwMDAwMDAsNDA0NDgsXE4sXE4="
											},
											{
												"0": "358485",
												"1": "68742795248",
												"2": "8/9/2022 9:26:05 PM",
												"3": {
													"x-opt-enqueued-time": {
														"member0": 1660080365687
													}
												},
												"5": "MjAyMi0wOC0wOSAxODoxNjowMy4wMzkwMDAwMDAwMDAsMCxJLE5PVCBTRVQgICAsXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sNDc5MTM0LFxOLDQ3OTEzMyw0LDAzMDAwNjg1NDYwMTAxLE4sXE4sXE4sXE4sXE4sMSxOLFxOLFxOLE4sXE4sXE4sTiwwLFxOLDQ3OTEzNCwxOTgwLTA1LTAxVDAwOjAwOjAwLjAwMDAwMDAwMDAwMCwyMDA0LTA0LTIwVDAwOjAwOjAwLjAwMDAwMDAwMDAwMCwxMyw4ODgsREVMUEhPIEZVWklNT1RPIEpVTklPUiwwMTAxMDc0MjExMzQxMDA2LFxOLFxOLDAxLFxOLE4sTiwxOTgwLTA1LTAxVDAwOjAwOjAwLjAwMDAwMDAwMDAwMCwxNzcsUCwxNyxTLDQ3OTEzMyw0NzkxMzMsNDc5MTMzLFxOLFxOLFxOLFxOLDE2LFxOLE4sMTk4MC0wNS0wMVQwMDowMDowMC4wMDAwMDAwMDAwMDAsTiwwMTAxOTk5OTk5OTkxMDA0LE4sXE4sMSxcTixcTixcTixTLFMsXE4sXE4sNzgsMTk4MC0wNS0wMVQwMDowMDowMC4wMDAwMDAwMDAwMDAsMSwxLFxOLFxOLFxOLDAwNjg1NDYwMTAxLFxOLFxOLE4sTixOLDEwMDA0NzU0NjIsXE4sXE4sMSwxLDEsMSwwMTAxOTk5OTk5OTkxMDA0LE4sXE4sMyxcTixcTiw1LE4sTixcTixcTixcTixOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLE4sTixcTixcTixERUxQSE8gRlVaSU1PVE8gSlVOSU9SLERFTFBITyBGVVpJTU9UTyBKVU5JT1IsREVMUEhPIEZVWklNT1RPIEpVTklPUixcTixOLFxOLFMsUyxcTixcTixcTixcTixcTixOLFxOLFxOLFxOLFxOLE4sTixOLFxOLFxOLE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sMCxcTixOLE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sMDAwMixcTiwxLFxOLFxOLFxOLFxOLFMsXE4sXE4sMyxcTixcTixcTixcTiwyNywyMDIxLTAxLTI5VDEwOjM2OjI1LjAwMDAwMDAwMDAwMCw0MDQ0OCxcTixcTg=="
											},
											{
												"0": "358486",
												"1": "68742795304",
												"2": "8/9/2022 9:26:05 PM",
												"3": {
													"x-opt-enqueued-time": {
														"member0": 1660080365687
													}
												},
												"5": "MjAyMi0wOC0wOSAxODoxNjowMy4wMzkwMDAwMDAwMDAsMCxJLE5PVCBTRVQgICAsXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sNDc4OTMwLFxOLDQ3ODkzMCwyLDAwMzAwNjg1NDI3NzAwLE4sMDAwMDAwMDAsXE4sXE4sXE4sMCxOLFxOLFxOLFMsXE4sXE4sTiwwLFxOLDQ3ODkzMCwxOTgwLTEwLTMxVDAwOjAwOjAwLjAwMDAwMDAwMDAwMCwxOTk3LTAxLTMxVDAwOjAwOjAwLjAwMDAwMDAwMDAwMCw1MCwxLE1BUklBIEpPU0UgTE9VUkVJUk8sMDEwMDAyNDA5OTQ1MTAwNixcTixcTiwwMSwwMDY4NTQyNzcsTixOLDE5ODAtMTAtMzFUMDA6MDA6MDAuMDAwMDAwMDAwMDAwLDE4NSxQLDI0LFMsNDc4OTMwLDQ3ODkzMCw0Nzg5MzAsTiwwLFxOLFxOLDI1LFxOLE4sMTk4MC0xMC0zMVQwMDowMDowMC4wMDAwMDAwMDAwMDAsTiwwMTAwOTk5OTk5OTkxMDA1LE4sXE4sMSxcTixcTixcTixTLFMsXE4sXE4sNzgsMTk4MC0xMC0zMVQwMDowMDowMC4wMDAwMDAwMDAwMDAsMSwyLFxOLFxOLFxOLDAwNjg1NDI3NzAwLFxOLFxOLE4sTixOLDEwMDA0NzUyNjIsXE4sXE4sMSwxLDEsMSwwMTAwOTk5OTk5OTkxMDA1LE4sXE4sMSxcTixcTiw1LE4sTixcTixcTixcTixOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLE4sTixcTixcTixNQVJJQSBKT1NFIExPVVJFSVJPLE1BUklBIEpPU0UgTE9VUkVJUk8sTUFSSUEgSk9TRSBMT1VSRUlSTyxcTixOLFxOLFMsUyxcTixcTixcTixcTixcTixOLFxOLDE5OTUtMDgtMDFUMDA6MDA6MDAuMDAwMDAwMDAwMDAwLFxOLFxOLE4sTixOLFxOLFxOLE4sXE4sMCwxOTk1LTA4LTAxVDAwOjAwOjAwLjAwMDAwMDAwMDAwMCwgICwgICAgICAgICwgICxcTixcTixcTixcTixcTixOLE4sUFBQSSxQQVNTLDEsMTk5NS0wOC0wMVQwMDowMDowMC4wMDAwMDAwMDAwMDAsMjAwNjI1MTc2LDAuMCxcTixcTixcTixcTixcTiwxLFxOLFxOLFxOLFxOLFMsXE4sXE4sMyxcTixcTixcTixcTiwxLDIwMjEtMDEtMjhUMDU6MzQ6MTEuMDAwMDAwMDAwMDAwLDc0NTIsXE4sXE4="
											},
											{
												"0": "358487",
												"1": "68742795360",
												"2": "8/9/2022 9:26:05 PM",
												"3": {
													"x-opt-enqueued-time": {
														"member0": 1660080365687
													}
												},
												"5": "MjAyMi0wOC0wOSAxODoxNjowMy4wMzkwMDAwMDAwMDAsMCxJLE5PVCBTRVQgICAsXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sNDc2MjMxLFxOLDQ3NjIzMSw0LDAzMDAwNjg0OTc0OTAwLE4sOTk4NzI0NTQyLE1IRUxPSVNBM0BIT1RNQUlMLkNPTSxcTixcTiwwLE4sNTIzMyxcTixTLFxOLFxOLE4sMCw4Myw0NzYyMzEsMTk5Mi0wOS0wOFQwMDowMDowMC4wMDAwMDAwMDAwMDAsXE4sXE4sNDUsTUFSSUEgSEVMT0lTQSBKQU5VQVJJTyBET1MgUkVJUywwMzAwMDY4NDk3NDkwMDAwLFxOLFxOLDA0LDAwNjg0OTc0OSxOLE4sMTk5Mi0wOS0wOFQwMDowMDowMC4wMDAwMDAwMDAwMDAsMzM4LFAsMjQsUyw0NzYyMzEsNDc2MjMxLDQ3MTc5OTksUywwLFxOLFxOLDI1LFxOLE4sMTk5Mi0wOS0wOFQwMDowMDowMC4wMDAwMDAwMDAwMDAsTiwwMTAwMDg3MjcwODExMDA5LE4sXE4sMSxcTixcTixcTixTLFMsXE4sXE4sNzgsMTk5Mi0wOS0wOFQwMDowMDowMC4wMDAwMDAwMDAwMDAsMSwyLFxOLFxOLFxOLDAwNjg0OTc0OTAwLFxOLFxOLE4sTixOLDEwMDA0NzI1OTEsXE4sXE4sMSwxLDEsMSwwMzAwMDY4NDk3NDkwMDgzLE4sNCwxLFxOLFxOLDUsTixOLFxOLFxOLFxOLE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sTixOLDIwMTUtMDUtMDVUMDA6MDA6MDAuMDAwMDAwMDAwMDAwLFxOLE1BUklBIEhFTE9JU0EgSkFOVUFSSU8gUkVJUyxNQVJJQSBIRUxPSVNBIEpBTlVBUklPIFJFSVMsTUFSSUEgSEVMT0lTQSBKQU5VQVJJTyBET1MgUkVJUyxcTixTLDExMDczNjAxOSxOLFMsNjAsXE4sXE4sXE4sXE4sTixcTiwyMDA3LTEwLTAxVDAwOjAwOjAwLjAwMDAwMDAwMDAwMCxcTixcTixOLE4sTixcTixcTixOLFxOLDAsMjAwNy0xMC0wMVQwMDowMDowMC4wMDAwMDAwMDAwMDAsICAsICAgICAgICAsICAsXE4sXE4sXE4sXE4sXE4sTixOLFBQUEksUEFTUywxLDIwMDctMTAtMDFUMDA6MDA6MDAuMDAwMDAwMDAwMDAwLDIwMjc3OTUyMSwwLjAsXE4sXE4sXE4sXE4sXE4sMSxcTixcTixcTiwyOSxOLFxOLDExLDIsXE4sXE4sXE4sXE4sMjcsMjAyMS0wMS0yOVQxMDozNDo0My4wMDAwMDAwMDAwMDAsNDA0NDgsMjAyMS0xMS0xM1QxODo0NjoyNi4wMDAwMDAwMDAwMDAsXE4="
											},
											{
												"0": "358488",
												"1": "68742795416",
												"2": "8/9/2022 9:26:05 PM",
												"3": {
													"x-opt-enqueued-time": {
														"member0": 1660080365687
													}
												},
												"5": "MjAyMi0wOC0wOSAxODoxNjowMy4wMzkwMDAwMDAwMDAsMCxJLE5PVCBTRVQgICAsXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sNDc4MjYyLFxOLDQ3ODI1OSw0LDAzMDAwNjg1MzUxNTA0LE4sOTg4NTExNzI0LGpvYXF1aW5hbWFjZWRvQHlhaG9vLmNvbS5icixcTixcTiw0LE4sNTIzMyxcTixOLFxOLFxOLE4sMCw4OSw0NzgyNjIsMTk4Ny0xMS0wMVQwMDowMDowMC4wMDAwMDAwMDAwMDAsXE4sXE4sNDcsSk9TRSBGRVJSRUlSQSBERSBBUkFVSk8sMDEwNDA4NTU3NjA2MTAwMixcTixcTiwwNSxcTixOLE4sMTk4Ny0xMS0wMVQwMDowMDowMC4wMDAwMDAwMDAwMDAsMTc3LFAsMTYsUyw0NzgyNTksNDc4MjU5LDQ3ODI1OSxcTixcTixcTixcTiwxOCxcTixOLDE5ODctMTEtMDFUMDA6MDA6MDAuMDAwMDAwMDAwMDAwLE4sMDEwNDA4NTU3NjA2MTAwMixOLFxOLDEsXE4sXE4sXE4sUyxTLFxOLFxOLDc4LDE5ODctMTEtMDFUMDA6MDA6MDAuMDAwMDAwMDAwMDAwLDEsMixcTixcTixcTiwwMDY4NTM1MTUwNCxcTixcTixTLE4sTiwxMDAwNDc0NTk5LFxOLFxOLDEsMSwxLDEsMDMwMDA2ODUzNTE1MDQ4OSxOLDUsMixcTixcTiw1LE4sTixcTixcTiwyMDEzLTAzLTIwVDAwOjAwOjAwLjAwMDAwMDAwMDAwMCxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLE4sTiwyMDExLTExLTE2VDAwOjAwOjAwLjAwMDAwMDAwMDAwMCxcTixKT1NFIEZFUlJFSVJBIERFIEFSQVVKTyxKT1NFIEZFUlJFSVJBIERFIEFSQVVKTyxKT1NFIEZFUlJFSVJBIERFIEFSQVVKTyxcTixOLDk5MDU1NTg5LE4sUyw1MCxcTixcTixcTixcTixOLFxOLFxOLFxOLFxOLE4sTixOLFxOLFxOLE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sMCxcTixOLE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sMDAwMSxcTiwxLFxOLFxOLFxOLDc0LFMsXE4sXE4sMyxcTixcTixcTixcTiwyNywyMDIxLTAxLTI5VDEwOjM2OjAwLjAwMDAwMDAwMDAwMCw0MDQ0OCxcTixcTg=="
											},
											{
												"0": "358489",
												"1": "68742795472",
												"2": "8/9/2022 9:26:05 PM",
												"3": {
													"x-opt-enqueued-time": {
														"member0": 1660080365687
													}
												},
												"5": "MjAyMi0wOC0wOSAxODoxNjowMy4wMzkwMDAwMDAwMDAsMCxJLE5PVCBTRVQgICAsXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sNDc4MjYzLFxOLDQ3ODI1OSw0LDAzMDAwNjg1MzUxNTA1LE4sXE4sXE4sXE4sXE4sNSxOLDUyMzMsMjAxMy0wOS0yMVQwMDowMDowMC4wMDAwMDAwMDAwMDAsTixcTixcTixOLDAsOTksMzAzODIyOCwyMDAwLTAzLTI4VDAwOjAwOjAwLjAwMDAwMDAwMDAwMCwyMDEzLTA5LTIxVDAwOjAwOjAwLjAwMDAwMDAwMDAwMCwxMyw4ODgsTFVBTkEgTUFDRURPIERFIEFSQVVKTywwMTA1MDg0NzY1OTIxMDAwLFxOLFxOLDAzLFxOLE4sTiwyMDAwLTAzLTI4VDAwOjAwOjAwLjAwMDAwMDAwMDAwMCwxNzcsUCwxNixTLDQ3ODI1OSw0NzgyNTksNDc4MjU5LFxOLFxOLDIwMTEtMDgtMzFUMDA6MDA6MDAuMDAwMDAwMDAwMDAwLFxOLDE4LFxOLE4sMjAwMC0wMy0yOFQwMDowMDowMC4wMDAwMDAwMDAwMDAsTiwwMTA1MDg0NzY1OTIxMDAwLE4sXE4sMSxcTixcTixcTixTLFMsXE4sXE4sNzgsMjAwMC0wMy0yOFQwMDowMDowMC4wMDAwMDAwMDAwMDAsMSwxLFxOLFxOLFxOLDAwNjg1MzUxNTA1LFxOLFxOLE4sTixOLDEwMDA0NzQ2MDAsXE4sXE4sMSwxLDEsMSwwMzAwMDY4NTM1MTUwNTk5LE4sNywzMCxcTixcTiw1LE4sTixcTixcTiwyMDExLTEwLTEwVDAwOjAwOjAwLjAwMDAwMDAwMDAwMCxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLE4sTixcTixcTixMVUFOQSBNQUNFRE8gREUgQVJBVUpPICAgICAgICAsTFVBTkEgTUFDRURPIERFIEFSQVVKTyAgICAgICAgLExVQU5BIE1BQ0VETyBERSBBUkFVSk8sXE4sTiw5OTA1NzYwMCxOLFMsOCxcTixcTixcTixcTixOLFxOLFxOLFxOLFxOLE4sTixOLFxOLFxOLE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sMCxcTixOLE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sMDAwMixcTiwxLFxOLFxOLFxOLFxOLFMsXE4sXE4sMyxcTixcTixcTixcTiwyNywyMDIxLTAxLTI5VDEwOjM2OjAwLjAwMDAwMDAwMDAwMCw0MDQ0OCxcTixcTg=="
											},
											{
												"0": "358490",
												"1": "68742795528",
												"2": "8/9/2022 9:26:05 PM",
												"3": {
													"x-opt-enqueued-time": {
														"member0": 1660080365687
													}
												},
												"5": "MjAyMi0wOC0wOSAxODoxNjowMy4wMzkwMDAwMDAwMDAsMCxJLE5PVCBTRVQgICAsXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sNDc4MjY0LFxOLDQ3ODI1OSw0LDAzMDAwNjg1MzUxNTA2LE4sXE4sXE4sXE4sXE4sNixOLDUyMzMsMjAxMy0wOS0yMVQwMDowMDowMC4wMDAwMDAwMDAwMDAsTixcTixcTixOLDAsNjAsMzAzODI2MywxOTkwLTAxLTAxVDAwOjAwOjAwLjAwMDAwMDAwMDAwMCwyMDEzLTA5LTIxVDAwOjAwOjAwLjAwMDAwMDAwMDAwMCwxMyw4ODgsSUxBTkEgTUFDRURPIERFIEFSQVVKTywwMzAwMDY4NTM1MTUwNjgwLFxOLFxOLDAzLFxOLE4sTiwxOTkwLTAxLTAxVDAwOjAwOjAwLjAwMDAwMDAwMDAwMCwxNzcsUCwxNixTLDQ3ODI1OSw0NzgyNTksNDc4MjU5LFxOLFxOLDIwMTMtMDktMzBUMDA6MDA6MDAuMDAwMDAwMDAwMDAwLFxOLDE4LFxOLE4sMTk5MC0wMS0wMVQwMDowMDowMC4wMDAwMDAwMDAwMDAsTiwwMTA2MDkyNTA5MTYxMDA2LE4sXE4sMSxcTixcTixcTixTLFMsXE4sXE4sNzgsMTk5MC0wMS0wMVQwMDowMDowMC4wMDAwMDAwMDAwMDAsMSwxLFxOLFxOLFxOLDAwNjg1MzUxNTA2LFxOLFxOLE4sTixOLDEwMDA0NzQ2MDEsXE4sXE4sMSwxLDEsMSwwMzAwMDY4NTM1MTUwNjYwLE4sNywzMCxcTixcTiw1LE4sTixcTixcTiwyMDExLTAxLTEyVDAwOjAwOjAwLjAwMDAwMDAwMDAwMCxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLFxOLE4sTixcTixcTixJTEFOQSBNQUNFRE8gQVJBVUpPLElMQU5BIE1BQ0VETyBBUkFVSk8sSUxBTkEgTUFDRURPIERFIEFSQVVKTyxcTixOLDk5MDU3Njk4LE4sUywxMSxcTixcTixcTixcTixOLFxOLFxOLFxOLFxOLE4sTixOLFxOLFxOLE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sMCxcTixOLE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sMDAwMixcTiwxLFxOLFxOLFxOLFxOLFMsXE4sXE4sMyxcTixcTixcTixcTiwyNywyMDIxLTAxLTI5VDEwOjM2OjAwLjAwMDAwMDAwMDAwMCw0MDQ0OCxcTixcTg=="
											},
											{
												"0": "358491",
												"1": "68742795584",
												"2": "8/9/2022 9:26:05 PM",
												"3": {
													"x-opt-enqueued-time": {
														"member0": 1660080365687
													}
												},
												"5": "MjAyMi0wOC0wOSAxODoxNjowMy4wMzkwMDAwMDAwMDAsMCxJLE5PVCBTRVQgICAsXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sNDc4MjY2LFxOLDQ3ODI2NSw0LDAzMDAwNjg1MzUyMDAxLE4sXE4sXE4sXE4sXE4sMSxOLFxOLFxOLE4sXE4sXE4sTiwwLFxOLDQ3ODI2NiwxOTc1LTA4LTE4VDAwOjAwOjAwLjAwMDAwMDAwMDAwMCwxOTk5LTA4LTE4VDAwOjAwOjAwLjAwMDAwMDAwMDAwMCwxMyw4ODgsRkFCSU8gQUxFWEFORFJFIEIuR09OJEFMVkVTLDAxMDEwMzQ4MTg0MzEwMDYsXE4sXE4sMDEsXE4sTixOLDE5NzUtMDgtMThUMDA6MDA6MDAuMDAwMDAwMDAwMDAwLDE3NyxQLDI0LFMsNDc4MjY1LDQ3ODI2NSw0NzgyNjUsXE4sXE4sXE4sXE4sMjUsXE4sTiwxOTc1LTA4LTAxVDAwOjAwOjAwLjAwMDAwMDAwMDAwMCxOLDAxMDE5OTk5OTk5OTEwMDQsTixcTiwxLFxOLFxOLFxOLFMsUyxcTixcTiw3OCwxOTc1LTA4LTAxVDAwOjAwOjAwLjAwMDAwMDAwMDAwMCwxLDEsXE4sXE4sXE4sMDA2ODUzNTIwMDEsXE4sXE4sTixOLE4sMTAwMDQ3NDYwMyxcTixcTiwxLDEsMSwxLDAxMDE5OTk5OTk5OTEwMDQsTixcTiwzLFxOLFxOLDUsTixOLFxOLFxOLFxOLE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sXE4sTixOLFxOLFxOLEZBQklPIEFMRVhBTkRSRSBCIEdPTiBBTFZFUyxGQUJJTyBBTEVYQU5EUkUgQiBHT04gQUxWRVMsRkFCSU8gQUxFWEFORFJFIEIgR09OIEFMVkVTLFxOLE4sXE4sUyxTLFxOLFxOLFxOLFxOLFxOLE4sXE4sXE4sXE4sXE4sTixOLE4sXE4sXE4sTixcTixcTixcTixcTixcTixcTixcTixcTixcTiwwLFxOLE4sTixcTixcTixcTixcTixcTixcTixcTixcTixcTiwwMDAyLFxOLDEsXE4sXE4sXE4sXE4sUyxcTixcTiwzLFxOLFxOLFxOLFxOLDI3LDIwMjEtMDEtMjlUMTA6MzY6MDAuMDAwMDAwMDAwMDAwLDQwNDQ4LFxOLFxO"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "SequenceNumber",
												"type": "bigint"
											},
											{
												"key": "1",
												"name": "Offset",
												"type": "string"
											},
											{
												"key": "2",
												"name": "EnqueuedTimeUtc",
												"type": "string"
											},
											{
												"key": "3",
												"name": "SystemProperties",
												"type": "MapType(StringType,StructType(StructField(member0,LongType,true), StructField(member1,DoubleType,true), StructField(member2,StringType,true), StructField(member3,BinaryType,true)),true)"
											},
											{
												"key": "4",
												"name": "Properties",
												"type": "MapType(StringType,StructType(StructField(member0,LongType,true), StructField(member1,DoubleType,true), StructField(member2,StringType,true), StructField(member3,BinaryType,true)),true)"
											},
											{
												"key": "5",
												"name": "Body",
												"type": "BinaryType"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/b117ec79-27e8-4aea-a6e3-782ae30883bd/resourceGroups/rg-data-plataform/providers/Microsoft.Synapse/workspaces/wrkcassisynapseworkspace001/bigDataPools/synPoolSpark001",
						"name": "synPoolSpark001",
						"type": "Spark",
						"endpoint": "https://wrkcassisynapseworkspace001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synPoolSpark001",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.2",
						"nodeCount": 8,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 15,
					"targetSparkConfiguration": "sparkConfiguration1"
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Construção de query para exemplos\n",
							"### Processo para acessar o Lake através do Spark\n",
							"* Para ler o arquivo parquet : \n",
							"```\n",
							"#Exemplo \n",
							"\n",
							"spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_AUTORIZ/', format='parquet')\n",
							"\n",
							"```\n",
							"### Processo para acessar o PoolSQL através do spark\n",
							"\n",
							"### Error comuns encontrados\n",
							"* Erro ao ler datas no pySpark\n",
							"**Abrir em uma celula e executar**\n",
							"\n",
							"```\n",
							"spark.conf.set(\"spark.sql.legacy.parquet.datetimeRebaseModeInRead\", \"CORRECTED\")\n",
							"spark.conf.set(\"spark.sql.legacy.parquet.datetimeRebaseModeInWrite\", \"CORRECTED\")\n",
							"spark.conf.set(\"spark.sql.legacy.parquet.int96RebaseModeInWrite\",\"CORRECTED\")\n",
							"spark.conf.set(\"spark.sql.legacy.parquet.int96RebaseModeInRead\",\"CORRECTED\")\n",
							"\n",
							"```\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import os\n",
							"from pyspark.sql.types import * \n",
							"spark.conf.set(\"spark.sql.legacy.parquet.datetimeRebaseModeInRead\", \"CORRECTED\")\n",
							"spark.conf.set(\"spark.sql.legacy.parquet.datetimeRebaseModeInWrite\", \"CORRECTED\")\n",
							"spark.conf.set(\"spark.sql.legacy.parquet.int96RebaseModeInWrite\",\"CORRECTED\")\n",
							"spark.conf.set(\"spark.sql.legacy.parquet.int96RebaseModeInRead\",\"CORRECTED\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"## Teste de lietura AVRO Landin-zone\n",
							"df = spark.read.format('avro').load('abfss://landing-zone@stgcassidatalake001.dfs.core.windows.net/hubcassieventhub001/eventhub01.toazure0.sourcedb.socpro.sam_beneficiario-audit/*/*/*/*/*/*')\n",
							"##df.printSchema()\n",
							"display(df.limit(10))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Carrega as tabela do lake\n",
							"sam_autoriz = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_AUTORIZ/', format='parquet')\n",
							"sam_autoriz_eventoslicit = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_AUTORIZ_EVENTOSOLICIT/', format='parquet')\n",
							"sam_autoriz_eventogerado = spark.read.load('abfss://raw-data@stgcassidatalake001.dfs.core.windows.net/STAGE/SAM_AUTORIZ_EVENTOGERADO/', format='parquet')\n",
							"\n",
							"## Cria a abstração para temp view\n",
							"sam_autoriz.createOrReplaceTempView(\"SAM_AUTORIZ\")\n",
							"sam_autoriz_eventoslicit.createOrReplaceTempView(\"SAM_AUTORIZ_EVENTOSOLICIT\")\n",
							"sam_autoriz_eventogerado.createOrReplaceTempView(\"SAM_AUTORIZ_EVENTOGERADO\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"sqlcmd = \"\"\"\n",
							"SELECT AUT.HANDLE as handle,   \n",
							"       AUT.REGIMEATENDIMENTO as regimeatendimento,\n",
							"       AUT.CONDICAOATENDIMENTO as condicaoatendimento,\n",
							"       AUT.LOCALATENDIMENTO as localatendimento,\n",
							"       AUT.FINALIDADEATENDIMENTO as finalidadeatendimento,\n",
							"       AUT.TIPOAUTORIZACAO as tipoautorizacao,\n",
							"       AUT.TIPOTRATAMENTO as tipotratamento,\n",
							"       AUT.OBJETIVOTRATAMENTO as objetivotratamento,\n",
							"       AUT.ACOMODACAO as acomodacao,\n",
							"       AUT.MOTIVOALTA as motivoalta,\n",
							"       AEG.DATAAUTORIZACAO as dataautorizacao,\n",
							"       AES.DATASOLICITACAO as datasolicitacao,\n",
							"       AUT.DATAAUTORIZACAO as dataautorizacao\n",
							"FROM SAM_AUTORIZ AUT\n",
							"LEFT JOIN SAM_AUTORIZ_EVENTOSOLICIT AES ON AES.AUTORIZACAO = AUT.HANDLE\n",
							"LEFT JOIN SAM_AUTORIZ_EVENTOGERADO  AEG ON AEG.EVENTOSOLICITADO = AES.HANDLE\n",
							"WHERE AUT.LOCALATENDIMENTO = 1 \n",
							"AND AES.SITUACAO <> 'C'\n",
							"AND AUT.SITUACAO NOT IN ('C','F')\n",
							"AND NVL(NVL(AEG.DATAAUTORIZACAO, AES.DATASOLICITACAO ), AUT.DATAAUTORIZACAO) = date_format('2022-03-10','yyyy-MM-dd') \n",
							"\"\"\"   \n",
							"\n",
							"df = spark.sql(sqlcmd)\n",
							"df.cache()\n",
							"display(df.limit(10))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.printSchema()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"SELECT AUT.HANDLE as handle,   \n",
							"       AUT.REGIMEATENDIMENTO as regimeatendimento,\n",
							"       AUT.CONDICAOATENDIMENTO as condicaoatendimento,\n",
							"       AUT.LOCALATENDIMENTO as localatendimento,\n",
							"       AUT.FINALIDADEATENDIMENTO as finalidadeatendimento,\n",
							"       AUT.TIPOAUTORIZACAO as tipoautorizacao,\n",
							"       AUT.TIPOTRATAMENTO as tipotratamento,\n",
							"       AUT.OBJETIVOTRATAMENTO as objetivotratamento,\n",
							"       AUT.ACOMODACAO as acomodacao,\n",
							"       AUT.MOTIVOALTA as motivoalta,\n",
							"       AEG.DATAAUTORIZACAO as dataautorizacao,\n",
							"       AES.DATASOLICITACAO as datasolicitacao,\n",
							"       AUT.DATAAUTORIZACAO as dataautorizacao  \n",
							"FROM SAM_AUTORIZ AUT\n",
							"LEFT JOIN SAM_AUTORIZ_EVENTOSOLICIT AES ON AES.AUTORIZACAO = AUT.HANDLE\n",
							"LEFT JOIN SAM_AUTORIZ_EVENTOGERADO  AEG ON AEG.EVENTOSOLICITADO = AES.HANDLE\n",
							"WHERE AUT.LOCALATENDIMENTO = 1 \n",
							"AND AES.SITUACAO <> 'C'\n",
							"AND AUT.SITUACAO NOT IN ('C','F')\n",
							"AND NVL(NVL(AEG.DATAAUTORIZACAO, AES.DATASOLICITACAO ), AUT.DATAAUTORIZACAO) = date_format('2022-03-10','yyyy-MM-dd') "
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"val df = spark.read.synapsesql(\"synsqlprod.PROSTG.TIS_CBOS\") \n",
							"df.write.mode(\"overwrite\").saveAsTable(\"default.t1\")\n",
							"df.printSchema()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 75
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sparkConfigurations/sparkConfiguration1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sparkConfiguration1')]",
			"type": "Microsoft.Synapse/workspaces/sparkConfigurations",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "spark.sql.legacy.parquet.datetimeRebaseModeInRead\nspark.sql.legacy.parquet.datetimeRebaseModeInWrite",
				"configs": {
					"spark.sql.legacy.parquet.datetimeRebaseModeInRead": "CORRECTED",
					"spark.sql.legacy.parquet.datetimeRebaseModeInWrite": "CORRECTED"
				},
				"created": "2022-07-25T21:22:56.454Z",
				"createdBy": "welker.luna@cassi.com.br",
				"annotations": [],
				"configMergeRule": {
					"artifact.currentOperation.spark.sql.legacy.parquet.datetimeRebaseModeInRead": "replace",
					"artifact.currentOperation.spark.sql.legacy.parquet.datetimeRebaseModeInWrite": "replace"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synPoolSpark001')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 29
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 8,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.2",
				"isComputeIsolationEnabled": false,
				"sparkConfigProperties": {
					"configurationType": "Artifact",
					"filename": "sparkConfiguration1",
					"content": "{\"name\":\"sparkConfiguration1\",\"properties\":{\"configs\":{\"spark.sql.legacy.parquet.datetimeRebaseModeInRead\":\"CORRECTED\",\"spark.sql.legacy.parquet.datetimeRebaseModeInWrite\":\"CORRECTED\"},\"annotations\":[],\"type\":\"Microsoft.Synapse/workspaces/sparkconfigurations\",\"description\":\"spark.sql.legacy.parquet.datetimeRebaseModeInRead\\nspark.sql.legacy.parquet.datetimeRebaseModeInWrite\",\"notes\":\"\",\"created\":\"2022-07-25T18:22:56.4540000-03:00\",\"createdBy\":\"welker.luna@cassi.com.br\",\"configMergeRule\":{\"admin.currentOperation.spark.sql.legacy.parquet.datetimeRebaseModeInRead\":\"replace\",\"admin.currentOperation.spark.sql.legacy.parquet.datetimeRebaseModeInWrite\":\"replace\"}}}",
					"time": "2022-08-02T13:06:30.6119087Z"
				},
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synPoolSpark002')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 5,
					"minNodeCount": 5
				},
				"nodeCount": 10,
				"nodeSize": "Large",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.2",
				"isComputeIsolationEnabled": false,
				"sparkConfigProperties": {
					"configurationType": "Artifact",
					"filename": "sparkConfiguration1",
					"content": "{\"name\":\"sparkConfiguration1\",\"properties\":{\"configs\":{\"spark.sql.legacy.parquet.datetimeRebaseModeInRead\":\"CORRECTED\",\"spark.sql.legacy.parquet.datetimeRebaseModeInWrite\":\"CORRECTED\"},\"annotations\":[],\"type\":\"Microsoft.Synapse/workspaces/sparkconfigurations\",\"description\":\"spark.sql.legacy.parquet.datetimeRebaseModeInRead\\nspark.sql.legacy.parquet.datetimeRebaseModeInWrite\",\"notes\":\"\",\"created\":\"2022-07-25T21:22:56.454Z\",\"createdBy\":\"welker.luna@cassi.com.br\",\"configMergeRule\":{\"admin.currentOperation.spark.sql.legacy.parquet.datetimeRebaseModeInRead\":\"replace\",\"admin.currentOperation.spark.sql.legacy.parquet.datetimeRebaseModeInWrite\":\"replace\"}}}",
					"time": "2022-08-03T12:47:40.2771664Z"
				},
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synsqlprod')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks",
			"apiVersion": "2019-06-01-preview",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/AzureDataLakeStorage434')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/b117ec79-27e8-4aea-a6e3-782ae30883bd/resourceGroups/rg-CASSI-poc-data/providers/Microsoft.Storage/storageAccounts/stgcassigsmadatalake02",
				"groupId": "dfs",
				"fqdns": [
					"stgcassigsmadatalake02.dfs.core.windows.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-custstgacct--wrkcassisynapseworkspace001-stgcassidatalake001')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/b117ec79-27e8-4aea-a6e3-782ae30883bd/resourceGroups/rg-data-plataform/providers/Microsoft.Storage/storageAccounts/stgcassidatalake001",
				"groupId": "dfs",
				"fqdns": [
					"stgcassidatalake001.dfs.core.windows.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sql--wrkcassisynapseworkspace001')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/b117ec79-27e8-4aea-a6e3-782ae30883bd/resourceGroups/rg-data-plataform/providers/Microsoft.Synapse/workspaces/wrkcassisynapseworkspace001",
				"groupId": "sql",
				"fqdns": [
					"wrkcassisynapseworkspace001.6f8ffc39-0fbc-46e6-bf04-64878d348b12.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sqlOnDemand--wrkcassisynapseworkspace001')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/b117ec79-27e8-4aea-a6e3-782ae30883bd/resourceGroups/rg-data-plataform/providers/Microsoft.Synapse/workspaces/wrkcassisynapseworkspace001",
				"groupId": "sqlOnDemand",
				"fqdns": [
					"wrkcassisynapseworkspace001-ondemand.6f8ffc39-0fbc-46e6-bf04-64878d348b12.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}