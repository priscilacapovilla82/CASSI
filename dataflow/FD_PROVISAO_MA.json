{
	"name": "FD_PROVISAO_MA",
	"properties": {
		"folder": {
			"name": "DESENVOLVIMENTO/FATOS/MENSAIS/PROVISAO"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "lnk_synprod",
						"type": "LinkedServiceReference"
					},
					"name": "poolQRYMA2"
				},
				{
					"linkedService": {
						"referenceName": "lnk_synprod",
						"type": "LinkedServiceReference"
					},
					"name": "poolQRYMA1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "unionQRYMA"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CTL_ORIGEM_DADOS as string,",
				"          DT_CARGA as timestamp,",
				"          DT_REF_CARGA as date,",
				"          HD_PEG as integer,",
				"          HD_GUIA as integer,",
				"          HD_GUIA_EVENTOS as integer,",
				"          HD_FATURA as integer,",
				"          HD_BENEF_EVENTO as integer,",
				"          HD_BENEF_TITULAR as integer,",
				"          HD_CONTRATO as integer,",
				"          HD_TGE as integer,",
				"          CO_PRESTADOR as string,",
				"          CO_REGIME_PAGAMENTO as integer,",
				"          NU_PEG as double,",
				"          NU_GUIA as double,",
				"          NU_FATURA as integer,",
				"          NU_PROTOCOLO as integer,",
				"          ST_PROTOCOLO as string,",
				"          ST_GUIA_REV_PAGTO as string,",
				"          DATAATENDIMENTO as timestamp,",
				"          DATAAVISO as timestamp,",
				"          DATA_RECEB_CEPAG_PEDIDO as timestamp,",
				"          DATACONTABIL as date,",
				"          DATA_PREVISTA_PAGTO_ACERTO as timestamp,",
				"          VALOR_APRESENTADO as double,",
				"          VALOR_CALC_PAGTO as double,",
				"          VALOR_A_PAGAR as double,",
				"          VALOR_GLOSADO as double,",
				"          VALOR_PAS as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'synapseanalytics',",
				"     query: 'SELECT DISTINCT \\n\\n   \\'MA2\\' CTL_ORIGEM_DADOS,\\n   SYSDATETIME() AS DT_CARGA,\\n   --TO_DATE(\\'#par_DATA_REF#\\',\\'YYYY-MM-DD\\') AS DT_REF_CARGA,\\n   CAST(\\'2022-07-22\\' AS DATE) AS DT_REF_CARGA,\\n   PEG.HANDLE AS HD_PEG,\\n   G.HANDLE AS HD_GUIA,\\n   RE.HANDLE AS HD_GUIA_EVENTOS,\\n   -1 AS HD_FATURA,\\n   BEN.HANDLE AS HD_BENEF_EVENTO,\\n   B1.HANDLE AS HD_BENEF_TITULAR,\\n   CON.HANDLE AS HD_CONTRATO,\\n   TGE.HANDLE AS HD_TGE,\\n   PRE.PRESTADOR AS CO_PRESTADOR,\\n   PEG.TABREGIMEPGTO AS CO_REGIME_PAGAMENTO, \\n   PEG.PEG AS NU_PEG,\\n   G.GUIA AS NU_GUIA,\\n   -1 AS NU_FATURA,\\n   RP.NUMEROPROTOCOLO AS NU_PROTOCOLO,\\n   RP.SITUACAO AS ST_PROTOCOLO,\\n   RG.SITUACAO AS ST_GUIA_REV_PAGTO,\\n\\n   RE.DATAATENDIMENTO,\\n   RP.DATAAVISO,\\n   RP.DATAPEDIDO AS DATA_RECEB_CEPAG_PEDIDO,\\n   --TO_DATE(\\'31/12/9999\\',\\'DD/MM/YYYY\\') AS DATACONTABIL, --Não se aplica\\n   CAST(\\'9999-12-31\\' AS DATE) AS DATACONTABIL,\\n   RP.DATAPAGAMENTOACERTO AS DATA_PREVISTA_PAGTO_ACERTO,\\n\\n   RE.VALORAPRESENTADO AS VALOR_APRESENTADO,\\n   RE.VALORCALCULADO AS VALOR_CALC_PAGTO,\\n   RE.VALORRECURSO AS VALOR_A_PAGAR,\\n   RE.VALORAPRESENTADO - (CASE WHEN RE.EHESTORNO =\\'S\\' THEN -RE.VALORRECURSO ELSE RE.VALORRECURSO END) AS VALOR_GLOSADO,\\n   0 AS VALOR_PAS\\n\\nFROM PROSTG.SAM_REVISAOPAGTO RP\\n   JOIN PROSTG.SAM_REVISAOPAGTO_GUIA RG ON RP.HANDLE = RG.REVISAOPAGTO\\n   JOIN PROSTG.SAM_REVISAOPAGTO_EVENTO RE ON RE.REVISAOPAGTOGUIA = RG.HANDLE\\n   LEFT JOIN PROSTG.SAM_TGE TGE ON TGE.HANDLE = RE.EVENTO\\n   LEFT JOIN PROSTG.SAM_CLASSEEVENTO CL ON CL.HANDLE = TGE.CLASSEEVENTO\\n   JOIN PROSTG.SAM_GUIA G ON RG.GUIA = G.HANDLE\\n   JOIN PROSTG.SAM_PEG PEG ON PEG.HANDLE = G.PEG\\n   LEFT JOIN PROSTG.SAM_PRESTADOR PRE ON PRE.HANDLE = PEG.RECEBEDOR\\n   JOIN PROSTG.SAM_BENEFICIARIO BEN  ON BEN.HANDLE = ISNULL(G.BENEFICIARIO,PEG.BENEFICIARIO)\\n   LEFT JOIN PROSTG.SAM_FAMILIA FAM ON FAM.HANDLE = BEN.FAMILIA\\n   LEFT JOIN PROSTG.SAM_BENEFICIARIO B1 ON B1.HANDLE = FAM.TITULARRESPONSAVEL\\n   JOIN PROSTG.SAM_CONTRATO CON ON CON.HANDLE = BEN.CONTRATO\\n   JOIN PROSTG.SAM_GRUPOCONTRATO GPL ON CON.GRUPOCONTRATO = GPL.HANDLE\\n\\nWHERE RP.SITUACAO IN (\\'P\\',\\'B\\')\\n   AND RP.DATAPEDIDO IS NOT NULL\\n   --AND RP.DATAPEDIDO <= LAST_DAY(TO_DATE(\\'#par_DATA_REF#\\',\\'YYYY-MM-DD\\'))\\n   AND RP.DATAPEDIDO <= EOMONTH(CAST(\\'2022-07-22\\' AS DATE))\\n   AND RE.EHESTORNO = \\'N\\'\\n   AND RE.VALORRECURSO > 0\\n   AND CON.HANDLE IS NOT NULL --Plano/Contrato não nulo\\n',",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     staged: true) ~> poolQRYMA2",
				"source(output(",
				"          CTL_ORIGEM_DADOS as string,",
				"          DT_CARGA as timestamp,",
				"          DT_REF_CARGA as date,",
				"          HD_PEG as integer,",
				"          HD_GUIA as integer,",
				"          HD_GUIA_EVENTOS as integer,",
				"          HD_FATURA as integer,",
				"          HD_BENEF_EVENTO as integer,",
				"          HD_BENEF_TITULAR as integer,",
				"          HD_CONTRATO as integer,",
				"          HD_TGE as integer,",
				"          CO_PRESTADOR as string,",
				"          CO_REGIME_PAGAMENTO as integer,",
				"          NU_PEG as double,",
				"          NU_GUIA as double,",
				"          NU_FATURA as integer,",
				"          NU_PROTOCOLO as integer,",
				"          ST_PROTOCOLO as string,",
				"          ST_GUIA_REV_PAGTO as string,",
				"          DATAATENDIMENTO as timestamp,",
				"          DATAAVISO as timestamp,",
				"          DATA_RECEB_CEPAG_PEDIDO as timestamp,",
				"          DATACONTABIL as timestamp,",
				"          DATA_PREVISTA_PAGTO_ACERTO as timestamp,",
				"          VALOR_APRESENTADO as double,",
				"          VALOR_CALC_PAGTO as double,",
				"          VALOR_A_PAGAR as double,",
				"          VALOR_GLOSADO as double,",
				"          VALOR_PAS as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'synapseanalytics',",
				"     query: 'SELECT DISTINCT \\n\\n   \\'MA1\\' AS CTL_ORIGEM_DADOS,\\n   SYSDATETIME() AS DT_CARGA,\\n   --TO_DATE(\\'#par_DATA_REF#\\',\\'YYYY-MM-DD\\') AS DT_REF_CARGA,\\n   CAST(\\'2022-07-22\\' AS DATE) AS DT_REF_CARGA,\\n   PEG.HANDLE AS HD_PEG,\\n   G.HANDLE AS HD_GUIA,\\n   ACE.HANDLE AS HD_GUIA_EVENTOS,\\n   FAT.HANDLE AS HD_FATURA,\\n   BEN.HANDLE AS HD_BENEF_EVENTO,\\n   B1.HANDLE AS HD_BENEF_TITULAR,\\n   CON.HANDLE AS HD_CONTRATO,\\n   TGE.HANDLE AS HD_TGE,\\n   PRE.PRESTADOR AS CO_PRESTADOR,\\n   PEG.TABREGIMEPGTO AS CO_REGIME_PAGAMENTO, \\n   PEG.PEG AS NU_PEG,\\n   G.GUIA AS NU_GUIA,\\n   FAT.NUMERO AS NU_FATURA,\\n   RP.NUMEROPROTOCOLO AS NU_PROTOCOLO,\\n   RP.SITUACAO AS ST_PROTOCOLO,\\n   RG.SITUACAO AS ST_GUIA_REV_PAGTO,\\n   \\n   GE.DATAATENDIMENTO AS DATAATENDIMENTO,\\n   RP.DATAAVISO AS DATAAVISO,\\n   RP.DATAPEDIDO AS DATA_RECEB_CEPAG_PEDIDO,\\n   FAT.DATACONTABIL AS DATACONTABIL,\\n   RP.DATAPAGAMENTOACERTO AS DATA_PREVISTA_PAGTO_ACERTO,\\n\\n   ACE.VALORPGTOACERTO AS VALOR_APRESENTADO,\\n   RE.VALORCALCULADO AS VALOR_CALC_PAGTO,\\n   --NVL(ACE.VALORPGTOACERTO - ACE.VALORPGTOORIGINAL, FAT.VALOR) AS VALOR_A_PAGAR,\\n   ISNULL(ACE.VALORPGTOACERTO - ACE.VALORPGTOORIGINAL, FAT.VALOR) AS VALOR_A_PAGAR,\\n   ACE.VALORAPRESENTADOACERTO - ACE.VALORPGTOACERTO AS VALOR_GLOSADO,\\n   ACE.VALORAUXILIOBENEFICIARIOACERTO - ACE.VALORAUXILIOBENEFORIGINAL AS VALOR_PAS\\n\\nFROM PROSTG.SFN_FATURA FAT\\n     LEFT JOIN PROSTG.SIS_TIPOFATURAMENTO TPF ON TPF.HANDLE = FAT.TIPOFATURAMENTO\\n     JOIN PROSTG.SFN_TIPOFATURA TF ON TF.HANDLE = FAT.TIPOFATURA AND TF.CODIGO IN (410, 411)\\n     JOIN PROSTG.SAM_ACERTO_FATURA ACF ON FAT.HANDLE = ACF.FATURAACERTO\\n     JOIN PROSTG.SAM_GUIA_EVENTOS_ACERTO ACE ON ACE.HANDLE = ACF.GUIAEVENTOACERTO\\n     JOIN PROSTG.SAM_ACERTOLOTE ACL ON ACL.HANDLE = ACE.ACERTOLOTE\\n     LEFT JOIN PROSTG.SAM_REVISAOPAGTO RP ON RP.HANDLE = ACL.REVISAOPAGTO\\n     LEFT JOIN PROSTG.SAM_TGE TGE ON TGE.HANDLE = ACE.EVENTOACERTO\\n     LEFT JOIN PROSTG.SAM_CLASSEEVENTO CL ON CL.HANDLE = TGE.CLASSEEVENTO\\n     LEFT JOIN PROSTG.SAM_GUIA_EVENTOS GE ON GE.HANDLE = ACE.GUIAEVENTO\\n     LEFT JOIN PROSTG.SAM_GUIA G  ON G.HANDLE = GE.GUIA\\n     LEFT JOIN PROSTG.SAM_REVISAOPAGTO_GUIA RG ON RP.HANDLE = RG.REVISAOPAGTO\\n     JOIN PROSTG.SAM_REVISAOPAGTO_EVENTO RE ON RG.HANDLE = RE.REVISAOPAGTOGUIA AND RE.GUIAEVENTO = GE.HANDLE\\n     LEFT JOIN PROSTG.SAM_PEG PEG  ON PEG.HANDLE = G.PEG\\n     LEFT JOIN PROSTG.SAM_PRESTADOR PRE ON PRE.HANDLE = PEG.RECEBEDOR\\n     LEFT JOIN PROSTG.SAM_BENEFICIARIO BEN  ON BEN.HANDLE = ISNULL(ACE.BENEFICIARIOACERTO, PEG.BENEFICIARIO)\\n     LEFT JOIN PROSTG.SAM_FAMILIA FAM ON FAM.HANDLE = BEN.FAMILIA\\n     LEFT JOIN PROSTG.SAM_BENEFICIARIO B1 ON B1.HANDLE = FAM.TITULARRESPONSAVEL\\n     LEFT JOIN PROSTG.SAM_CONTRATO CON ON CON.HANDLE = BEN.CONTRATO\\n     LEFT JOIN PROSTG.SAM_GRUPOCONTRATO GPL ON CON.GRUPOCONTRATO = GPL.HANDLE\\n\\n--WHERE FAT.DATACONTABIL BETWEEN ADD_MONTHS(TO_DATE(TO_CHAR(TO_DATE(\\'#par_DATA_REF#\\',\\'YYYY-MM-DD\\'), \\'YYYY-MM\\')||\\'-01\\',\\'YYYY-MM-DD\\'), 1) AND ADD_MONTHS(LAST_DAY(TO_DATE(\\'#par_DATA_REF#\\',\\'YYYY-MM-DD\\')), 1)\\nWHERE FAT.DATACONTABIL BETWEEN FORMAT(DATEADD(MONTH, 1, CONCAT(FORMAT(CAST(\\'2022-07-22\\' AS DATE),\\'yyyy-MM\\'),\\'-01\\')),\\'yyyy-MM-dd\\') AND FORMAT(EOMONTH(DATEADD(MONTH, 1, CAST(\\'2022-07-22\\' AS DATE))),\\'yyyy-MM-dd\\')\\n\\n   AND RP.DATAPEDIDO IS NOT NULL\\n   --AND RP.DATAPEDIDO <= LAST_DAY(TO_DATE(\\'#par_DATA_REF#\\',\\'YYYY-MM-DD\\'))\\n   AND RP.DATAPEDIDO <= EOMONTH(CAST(\\'2022-07-22\\' AS DATE))\\n   AND CON.HANDLE IS NOT NULL --Plano/Contrato não nulo\\n',",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     staged: true) ~> poolQRYMA1",
				"poolQRYMA2, poolQRYMA1 union(byName: true)~> unionQRYMA",
				"unionQRYMA sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: 'testes',",
				"     folderPath: 'provisao',",
				"     partitionFileNames:['QRY_MA2.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}