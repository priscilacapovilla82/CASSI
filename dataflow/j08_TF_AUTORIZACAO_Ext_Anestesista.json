{
	"name": "j08_TF_AUTORIZACAO_Ext_Anestesista",
	"properties": {
		"folder": {
			"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO/Primeiros"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "prqtAUTEXTRACTVALORES"
				},
				{
					"linkedService": {
						"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "prqtQRY3VLPRESTANETESISTA"
				},
				{
					"linkedService": {
						"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "prqtQRY6VLESTANESTESISTA"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "prqtAUTEXTRACTANESTESISTA"
				}
			],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "LKPPrestAnest"
				},
				{
					"name": "split2"
				},
				{
					"name": "select1"
				},
				{
					"name": "union1"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "select2"
				},
				{
					"name": "LKPEstPrestAnest"
				},
				{
					"name": "split3"
				},
				{
					"name": "select3"
				},
				{
					"name": "union2"
				},
				{
					"name": "select4"
				},
				{
					"name": "LKPEstBenefAnest"
				},
				{
					"name": "split4"
				},
				{
					"name": "select5"
				},
				{
					"name": "select6"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "union3"
				},
				{
					"name": "union4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          HD_AUTORIZACAO as long,",
				"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
				"          HD_AUTORIZ_EVENTO_GERADO as integer,",
				"          HD_TGE as integer,",
				"          HD_BENEF as integer,",
				"          HD_ESTADO_BENEF as integer,",
				"          HD_ESTADO_PREST_EXEC as integer,",
				"          HD_PREST_SOLICITANTE as integer,",
				"          CO_PREST_SOLICITANTE as string,",
				"          HD_PREST_EXECUTOR as integer,",
				"          CO_PREST_EXECUTOR as string,",
				"          HD_PREST_FORNECEDOR as integer,",
				"          CO_PREST_FORNECEDOR as string,",
				"          HD_TP_AUTORIZ as integer,",
				"          HD_GRAU as integer,",
				"          CO_GRAU as integer,",
				"          CO_TP_TRATAMENTO as integer,",
				"          CO_OBJ_TRATAMENTO as integer,",
				"          HD_REGIME_ATEND as integer,",
				"          HD_FINALID_ATEND as integer,",
				"          HD_CARAT_ATEND as integer,",
				"          HD_REGIME_INT as integer,",
				"          HD_TP_ATEND as integer,",
				"          HD_TP_INTERN as integer,",
				"          HD_IND_ACIDENTE as integer,",
				"          HD_TP_CONSULTA as integer,",
				"          HD_PLANO as integer,",
				"          HD_CONTRATO as integer,",
				"          HD_USUARIO as integer,",
				"          HD_TIS_TAB_PRECO as integer,",
				"          CO_TIS_TAB_PRECO as string,",
				"          HD_CBOS as integer,",
				"          CO_CBOS as string,",
				"          CO_SITUACAO_AUT as string,",
				"          CO_SITUACAO_AES as string,",
				"          CO_SITUACAO_AEG as string,",
				"          ST_OPCAO_OPME as integer,",
				"          NU_AUTORIZACAO as long,",
				"          DT_AUTORIZACAO_AUT as timestamp,",
				"          DT_SOLICITACAO_AUT as timestamp,",
				"          DT_AUTORIZACAO_AEG as timestamp,",
				"          DT_ATENDIMENTO_AEG as timestamp,",
				"          QTDSOLICITADAORIGINAL as double,",
				"          QTDAUTORIZADA as double,",
				"          QT_NEGADA as double,",
				"          VALORUNITARIOSOLICITADO as double,",
				"          VALORUNITARIONEGOCIADOOPME as double,",
				"          VALORUNITARIOCALCULADOOPME as double,",
				"          VALORUNITARIOAUTORIZADOOPME as double,",
				"          DT_SOLICITACAO_AES as timestamp,",
				"          NU_NIVEL_AUTORIZACAO as integer,",
				"          CO_ORIGEM_AUTORIZACAO as string,",
				"          NO_PROF_SOLICITANTE as string,",
				"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
				"          PK_TD_CONSELHO_Prof_Solic as long,",
				"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
				"          HD_PREST_SOLICITANTE_AES as integer,",
				"          CO_PREST_SOLICITANTE_AES as string,",
				"          DS_ORIGEM_SOLICITACAO as string,",
				"          DS_INDICACAO_CLINICA as string,",
				"          DT_VALIDADE_AUT as timestamp,",
				"          HD_PREST_EXECUTOR_AES as integer,",
				"          CO_PREST_EXECUTOR_AES as string,",
				"          TS_GERACAO_AEG as timestamp,",
				"          TS_LIBERACAO_AEG as timestamp,",
				"          HD_USUARIO_GERACAO_AEG as integer,",
				"          ST_HORARIO_ESPECIAL as string,",
				"          CO_ST_SOLICIT as string,",
				"          DT_REF_CARGA as date,",
				"          CTL_DT_EXTRACAO as timestamp,",
				"          TS_ATENDIMENTO_AEG as date,",
				"          TS_AUTORIZACAO_AUT as timestamp,",
				"          TS_AUTORIZACAO_AEG as timestamp,",
				"          DT_INICIAL as timestamp,",
				"          NU_PORTE_ANESTESICO as long,",
				"          NU_PORTE_SALA as long,",
				"          VL_US as double,",
				"          VL_UCO as double,",
				"          VL_FILME as double,",
				"          CTL_ORIGEM as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     fileSystem: 'testes',",
				"     folderPath: 'parquet',",
				"     fileName: 'AUT_EXTRACT_VALORES') ~> prqtAUTEXTRACTVALORES",
				"source(output(",
				"          HD_PRESTADOR as integer,",
				"          NU_PORTE_ANESTESICO as long,",
				"          DT_INICIAL as timestamp,",
				"          DT_FINAL as timestamp,",
				"          PERCENTUALAUXILIARANESTESISTA as double,",
				"          QTDUSANESTESISTA as double,",
				"          PERCENTUALPAGTOUS as double,",
				"          VALORUSHONORARIO as double,",
				"          VL_US_ANESTESISTA as double,",
				"          ST_LOOKUP as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     fileSystem: 'testes',",
				"     folderPath: 'parquet',",
				"     fileName: 'QRY3_VL_PREST_ANETESISTA') ~> prqtQRY3VLPRESTANETESISTA",
				"source(output(",
				"          HD_ESTADO as long,",
				"          NU_PORTE_ANESTESICO as long,",
				"          DT_INICIAL as timestamp,",
				"          DT_FINAL as timestamp,",
				"          PERCENTUALAUXILIARANESTESISTA as double,",
				"          QTDUSANESTESISTA as double,",
				"          PERCENTUALPAGTOUS as double,",
				"          VALORUSHONORARIO as double,",
				"          VL_US_ANESTESISTA as double,",
				"          ST_LOOKUP as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     fileSystem: 'testes',",
				"     folderPath: 'parquet',",
				"     fileName: 'QRY6_VL_EST_ANESTESISTA') ~> prqtQRY6VLESTANESTESISTA",
				"prqtAUTEXTRACTVALORES split(CO_GRAU != 6 && CO_GRAU != 16,",
				"     disjoint: false) ~> split1@(TRUE1, FALSE1)",
				"split1@TRUE1 derive(PERCENTUALAUXILIARANESTESISTA = toDouble(0),",
				"          VL_US_ANESTESISTA = toDouble(0)) ~> derivedColumn1",
				"prqtQRY3VLPRESTANETESISTA derive(ST_LOOKUP = toBoolean('1')) ~> derivedColumn2",
				"split1@FALSE1, derivedColumn2 lookup(HD_PREST_EXECUTOR == HD_PRESTADOR",
				"     && split1@FALSE1@NU_PORTE_ANESTESICO == prqtQRY3VLPRESTANETESISTA@NU_PORTE_ANESTESICO,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LKPPrestAnest",
				"LKPPrestAnest split(ST_LOOKUP == toBoolean('1') && between(TS_ATENDIMENTO_AEG, toDate(prqtQRY3VLPRESTANETESISTA@DT_INICIAL), toDate(DT_FINAL)) && (VL_US_ANESTESISTA != 0 || !isNull(VL_US_ANESTESISTA)),",
				"     disjoint: false) ~> split2@(TRUE2, FALSE2)",
				"split2@TRUE2 select(mapColumn(",
				"          HD_AUTORIZACAO,",
				"          HD_AUTORIZ_EVENTO_SOLICIT,",
				"          HD_AUTORIZ_EVENTO_GERADO,",
				"          HD_TGE,",
				"          HD_BENEF,",
				"          HD_ESTADO_BENEF,",
				"          HD_ESTADO_PREST_EXEC,",
				"          HD_PREST_SOLICITANTE,",
				"          CO_PREST_SOLICITANTE,",
				"          HD_PREST_EXECUTOR,",
				"          CO_PREST_EXECUTOR,",
				"          HD_PREST_FORNECEDOR,",
				"          CO_PREST_FORNECEDOR,",
				"          HD_TP_AUTORIZ,",
				"          HD_GRAU,",
				"          CO_GRAU,",
				"          CO_TP_TRATAMENTO,",
				"          CO_OBJ_TRATAMENTO,",
				"          HD_REGIME_ATEND,",
				"          HD_FINALID_ATEND,",
				"          HD_CARAT_ATEND,",
				"          HD_REGIME_INT,",
				"          HD_TP_ATEND,",
				"          HD_TP_INTERN,",
				"          HD_IND_ACIDENTE,",
				"          HD_TP_CONSULTA,",
				"          HD_PLANO,",
				"          HD_CONTRATO,",
				"          HD_USUARIO,",
				"          HD_TIS_TAB_PRECO,",
				"          CO_TIS_TAB_PRECO,",
				"          HD_CBOS,",
				"          CO_CBOS,",
				"          CO_SITUACAO_AUT,",
				"          CO_SITUACAO_AES,",
				"          CO_SITUACAO_AEG,",
				"          ST_OPCAO_OPME,",
				"          NU_AUTORIZACAO,",
				"          DT_AUTORIZACAO_AUT,",
				"          DT_SOLICITACAO_AUT,",
				"          DT_AUTORIZACAO_AEG,",
				"          DT_ATENDIMENTO_AEG,",
				"          QTDSOLICITADAORIGINAL,",
				"          QTDAUTORIZADA,",
				"          QT_NEGADA,",
				"          VALORUNITARIOSOLICITADO,",
				"          VALORUNITARIONEGOCIADOOPME,",
				"          VALORUNITARIOCALCULADOOPME,",
				"          VALORUNITARIOAUTORIZADOOPME,",
				"          DT_SOLICITACAO_AES,",
				"          NU_NIVEL_AUTORIZACAO,",
				"          CO_ORIGEM_AUTORIZACAO,",
				"          NO_PROF_SOLICITANTE,",
				"          NU_CRM_PROF_SOLICITANTE_AUT,",
				"          PK_TD_CONSELHO_Prof_Solic,",
				"          PK_TD_CONSELHO_Uf_Prof_Solic,",
				"          HD_PREST_SOLICITANTE_AES,",
				"          CO_PREST_SOLICITANTE_AES,",
				"          DS_ORIGEM_SOLICITACAO,",
				"          DS_INDICACAO_CLINICA,",
				"          DT_VALIDADE_AUT,",
				"          HD_PREST_EXECUTOR_AES,",
				"          CO_PREST_EXECUTOR_AES,",
				"          TS_GERACAO_AEG,",
				"          TS_LIBERACAO_AEG,",
				"          HD_USUARIO_GERACAO_AEG,",
				"          ST_HORARIO_ESPECIAL,",
				"          CO_ST_SOLICIT,",
				"          DT_REF_CARGA,",
				"          CTL_DT_EXTRACAO,",
				"          TS_ATENDIMENTO_AEG,",
				"          TS_AUTORIZACAO_AUT,",
				"          TS_AUTORIZACAO_AEG,",
				"          DT_INICIAL = split2@TRUE2@DT_INICIAL,",
				"          NU_PORTE_ANESTESICO = split2@TRUE2@NU_PORTE_ANESTESICO,",
				"          NU_PORTE_SALA,",
				"          VL_US,",
				"          VL_UCO,",
				"          VL_FILME,",
				"          CTL_ORIGEM,",
				"          DT_INICIAL = split2@TRUE2@DT_INICIAL,",
				"          PERCENTUALAUXILIARANESTESISTA,",
				"          VL_US_ANESTESISTA",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumn1, select1 union(byName: true)~> union1",
				"prqtQRY6VLESTANESTESISTA derive(ST_LOOKUP = toBoolean('1')) ~> derivedColumn3",
				"split2@FALSE2 select(mapColumn(",
				"          HD_AUTORIZACAO,",
				"          HD_AUTORIZ_EVENTO_SOLICIT,",
				"          HD_AUTORIZ_EVENTO_GERADO,",
				"          HD_TGE,",
				"          HD_BENEF,",
				"          HD_ESTADO_BENEF,",
				"          HD_ESTADO_PREST_EXEC,",
				"          HD_PREST_SOLICITANTE,",
				"          CO_PREST_SOLICITANTE,",
				"          HD_PREST_EXECUTOR,",
				"          CO_PREST_EXECUTOR,",
				"          HD_PREST_FORNECEDOR,",
				"          CO_PREST_FORNECEDOR,",
				"          HD_TP_AUTORIZ,",
				"          HD_GRAU,",
				"          CO_GRAU,",
				"          CO_TP_TRATAMENTO,",
				"          CO_OBJ_TRATAMENTO,",
				"          HD_REGIME_ATEND,",
				"          HD_FINALID_ATEND,",
				"          HD_CARAT_ATEND,",
				"          HD_REGIME_INT,",
				"          HD_TP_ATEND,",
				"          HD_TP_INTERN,",
				"          HD_IND_ACIDENTE,",
				"          HD_TP_CONSULTA,",
				"          HD_PLANO,",
				"          HD_CONTRATO,",
				"          HD_USUARIO,",
				"          HD_TIS_TAB_PRECO,",
				"          CO_TIS_TAB_PRECO,",
				"          HD_CBOS,",
				"          CO_CBOS,",
				"          CO_SITUACAO_AUT,",
				"          CO_SITUACAO_AES,",
				"          CO_SITUACAO_AEG,",
				"          ST_OPCAO_OPME,",
				"          NU_AUTORIZACAO,",
				"          DT_AUTORIZACAO_AUT,",
				"          DT_SOLICITACAO_AUT,",
				"          DT_AUTORIZACAO_AEG,",
				"          DT_ATENDIMENTO_AEG,",
				"          QTDSOLICITADAORIGINAL,",
				"          QTDAUTORIZADA,",
				"          QT_NEGADA,",
				"          VALORUNITARIOSOLICITADO,",
				"          VALORUNITARIONEGOCIADOOPME,",
				"          VALORUNITARIOCALCULADOOPME,",
				"          VALORUNITARIOAUTORIZADOOPME,",
				"          DT_SOLICITACAO_AES,",
				"          NU_NIVEL_AUTORIZACAO,",
				"          CO_ORIGEM_AUTORIZACAO,",
				"          NO_PROF_SOLICITANTE,",
				"          NU_CRM_PROF_SOLICITANTE_AUT,",
				"          PK_TD_CONSELHO_Prof_Solic,",
				"          PK_TD_CONSELHO_Uf_Prof_Solic,",
				"          HD_PREST_SOLICITANTE_AES,",
				"          CO_PREST_SOLICITANTE_AES,",
				"          DS_ORIGEM_SOLICITACAO,",
				"          DS_INDICACAO_CLINICA,",
				"          DT_VALIDADE_AUT,",
				"          HD_PREST_EXECUTOR_AES,",
				"          CO_PREST_EXECUTOR_AES,",
				"          TS_GERACAO_AEG,",
				"          TS_LIBERACAO_AEG,",
				"          HD_USUARIO_GERACAO_AEG,",
				"          ST_HORARIO_ESPECIAL,",
				"          CO_ST_SOLICIT,",
				"          DT_REF_CARGA,",
				"          CTL_DT_EXTRACAO,",
				"          TS_ATENDIMENTO_AEG,",
				"          TS_AUTORIZACAO_AUT,",
				"          TS_AUTORIZACAO_AEG,",
				"          DT_INICIAL = split2@FALSE2@DT_INICIAL,",
				"          NU_PORTE_ANESTESICO = split2@FALSE2@NU_PORTE_ANESTESICO,",
				"          NU_PORTE_SALA,",
				"          VL_US,",
				"          VL_UCO,",
				"          VL_FILME,",
				"          CTL_ORIGEM",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2, derivedColumn3 lookup(HD_ESTADO_PREST_EXEC == HD_ESTADO",
				"     && select2@NU_PORTE_ANESTESICO == prqtQRY6VLESTANESTESISTA@NU_PORTE_ANESTESICO,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LKPEstPrestAnest",
				"LKPEstPrestAnest split(ST_LOOKUP == toBoolean('1') && between(TS_ATENDIMENTO_AEG, toDate(prqtQRY6VLESTANESTESISTA@DT_INICIAL), toDate(DT_FINAL)) && (VL_US_ANESTESISTA != 0 || !isNull(VL_US_ANESTESISTA)),",
				"     disjoint: false) ~> split3@(TRUE3, FALSE3)",
				"split3@TRUE3 select(mapColumn(",
				"          HD_AUTORIZACAO,",
				"          HD_AUTORIZ_EVENTO_SOLICIT,",
				"          HD_AUTORIZ_EVENTO_GERADO,",
				"          HD_TGE,",
				"          HD_BENEF,",
				"          HD_ESTADO_BENEF,",
				"          HD_ESTADO_PREST_EXEC,",
				"          HD_PREST_SOLICITANTE,",
				"          CO_PREST_SOLICITANTE,",
				"          HD_PREST_EXECUTOR,",
				"          CO_PREST_EXECUTOR,",
				"          HD_PREST_FORNECEDOR,",
				"          CO_PREST_FORNECEDOR,",
				"          HD_TP_AUTORIZ,",
				"          HD_GRAU,",
				"          CO_GRAU,",
				"          CO_TP_TRATAMENTO,",
				"          CO_OBJ_TRATAMENTO,",
				"          HD_REGIME_ATEND,",
				"          HD_FINALID_ATEND,",
				"          HD_CARAT_ATEND,",
				"          HD_REGIME_INT,",
				"          HD_TP_ATEND,",
				"          HD_TP_INTERN,",
				"          HD_IND_ACIDENTE,",
				"          HD_TP_CONSULTA,",
				"          HD_PLANO,",
				"          HD_CONTRATO,",
				"          HD_USUARIO,",
				"          HD_TIS_TAB_PRECO,",
				"          CO_TIS_TAB_PRECO,",
				"          HD_CBOS,",
				"          CO_CBOS,",
				"          CO_SITUACAO_AUT,",
				"          CO_SITUACAO_AES,",
				"          CO_SITUACAO_AEG,",
				"          ST_OPCAO_OPME,",
				"          NU_AUTORIZACAO,",
				"          DT_AUTORIZACAO_AUT,",
				"          DT_SOLICITACAO_AUT,",
				"          DT_AUTORIZACAO_AEG,",
				"          DT_ATENDIMENTO_AEG,",
				"          QTDSOLICITADAORIGINAL,",
				"          QTDAUTORIZADA,",
				"          QT_NEGADA,",
				"          VALORUNITARIOSOLICITADO,",
				"          VALORUNITARIONEGOCIADOOPME,",
				"          VALORUNITARIOCALCULADOOPME,",
				"          VALORUNITARIOAUTORIZADOOPME,",
				"          DT_SOLICITACAO_AES,",
				"          NU_NIVEL_AUTORIZACAO,",
				"          CO_ORIGEM_AUTORIZACAO,",
				"          NO_PROF_SOLICITANTE,",
				"          NU_CRM_PROF_SOLICITANTE_AUT,",
				"          PK_TD_CONSELHO_Prof_Solic,",
				"          PK_TD_CONSELHO_Uf_Prof_Solic,",
				"          HD_PREST_SOLICITANTE_AES,",
				"          CO_PREST_SOLICITANTE_AES,",
				"          DS_ORIGEM_SOLICITACAO,",
				"          DS_INDICACAO_CLINICA,",
				"          DT_VALIDADE_AUT,",
				"          HD_PREST_EXECUTOR_AES,",
				"          CO_PREST_EXECUTOR_AES,",
				"          TS_GERACAO_AEG,",
				"          TS_LIBERACAO_AEG,",
				"          HD_USUARIO_GERACAO_AEG,",
				"          ST_HORARIO_ESPECIAL,",
				"          CO_ST_SOLICIT,",
				"          DT_REF_CARGA,",
				"          CTL_DT_EXTRACAO,",
				"          TS_ATENDIMENTO_AEG,",
				"          TS_AUTORIZACAO_AUT,",
				"          TS_AUTORIZACAO_AEG,",
				"          DT_INICIAL = split3@TRUE3@DT_INICIAL,",
				"          NU_PORTE_ANESTESICO = split3@TRUE3@NU_PORTE_ANESTESICO,",
				"          NU_PORTE_SALA,",
				"          VL_US,",
				"          VL_UCO,",
				"          VL_FILME,",
				"          CTL_ORIGEM,",
				"          DT_INICIAL = split3@TRUE3@DT_INICIAL,",
				"          PERCENTUALAUXILIARANESTESISTA,",
				"          VL_US_ANESTESISTA",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"union1, select3 union(byName: true)~> union2",
				"split3@FALSE3 select(mapColumn(",
				"          HD_AUTORIZACAO,",
				"          HD_AUTORIZ_EVENTO_SOLICIT,",
				"          HD_AUTORIZ_EVENTO_GERADO,",
				"          HD_TGE,",
				"          HD_BENEF,",
				"          HD_ESTADO_BENEF,",
				"          HD_ESTADO_PREST_EXEC,",
				"          HD_PREST_SOLICITANTE,",
				"          CO_PREST_SOLICITANTE,",
				"          HD_PREST_EXECUTOR,",
				"          CO_PREST_EXECUTOR,",
				"          HD_PREST_FORNECEDOR,",
				"          CO_PREST_FORNECEDOR,",
				"          HD_TP_AUTORIZ,",
				"          HD_GRAU,",
				"          CO_GRAU,",
				"          CO_TP_TRATAMENTO,",
				"          CO_OBJ_TRATAMENTO,",
				"          HD_REGIME_ATEND,",
				"          HD_FINALID_ATEND,",
				"          HD_CARAT_ATEND,",
				"          HD_REGIME_INT,",
				"          HD_TP_ATEND,",
				"          HD_TP_INTERN,",
				"          HD_IND_ACIDENTE,",
				"          HD_TP_CONSULTA,",
				"          HD_PLANO,",
				"          HD_CONTRATO,",
				"          HD_USUARIO,",
				"          HD_TIS_TAB_PRECO,",
				"          CO_TIS_TAB_PRECO,",
				"          HD_CBOS,",
				"          CO_CBOS,",
				"          CO_SITUACAO_AUT,",
				"          CO_SITUACAO_AES,",
				"          CO_SITUACAO_AEG,",
				"          ST_OPCAO_OPME,",
				"          NU_AUTORIZACAO,",
				"          DT_AUTORIZACAO_AUT,",
				"          DT_SOLICITACAO_AUT,",
				"          DT_AUTORIZACAO_AEG,",
				"          DT_ATENDIMENTO_AEG,",
				"          QTDSOLICITADAORIGINAL,",
				"          QTDAUTORIZADA,",
				"          QT_NEGADA,",
				"          VALORUNITARIOSOLICITADO,",
				"          VALORUNITARIONEGOCIADOOPME,",
				"          VALORUNITARIOCALCULADOOPME,",
				"          VALORUNITARIOAUTORIZADOOPME,",
				"          DT_SOLICITACAO_AES,",
				"          NU_NIVEL_AUTORIZACAO,",
				"          CO_ORIGEM_AUTORIZACAO,",
				"          NO_PROF_SOLICITANTE,",
				"          NU_CRM_PROF_SOLICITANTE_AUT,",
				"          PK_TD_CONSELHO_Prof_Solic,",
				"          PK_TD_CONSELHO_Uf_Prof_Solic,",
				"          HD_PREST_SOLICITANTE_AES,",
				"          CO_PREST_SOLICITANTE_AES,",
				"          DS_ORIGEM_SOLICITACAO,",
				"          DS_INDICACAO_CLINICA,",
				"          DT_VALIDADE_AUT,",
				"          HD_PREST_EXECUTOR_AES,",
				"          CO_PREST_EXECUTOR_AES,",
				"          TS_GERACAO_AEG,",
				"          TS_LIBERACAO_AEG,",
				"          HD_USUARIO_GERACAO_AEG,",
				"          ST_HORARIO_ESPECIAL,",
				"          CO_ST_SOLICIT,",
				"          DT_REF_CARGA,",
				"          CTL_DT_EXTRACAO,",
				"          TS_ATENDIMENTO_AEG,",
				"          TS_AUTORIZACAO_AUT,",
				"          TS_AUTORIZACAO_AEG,",
				"          DT_INICIAL = split3@FALSE3@DT_INICIAL,",
				"          NU_PORTE_ANESTESICO = split3@FALSE3@NU_PORTE_ANESTESICO,",
				"          NU_PORTE_SALA,",
				"          VL_US,",
				"          VL_UCO,",
				"          VL_FILME,",
				"          CTL_ORIGEM",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4, derivedColumn3 lookup(HD_ESTADO_BENEF == HD_ESTADO",
				"     && select4@NU_PORTE_ANESTESICO == prqtQRY6VLESTANESTESISTA@NU_PORTE_ANESTESICO,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LKPEstBenefAnest",
				"LKPEstBenefAnest split(ST_LOOKUP == toBoolean('1') && between(TS_ATENDIMENTO_AEG, toDate(prqtQRY6VLESTANESTESISTA@DT_INICIAL), toDate(DT_FINAL)) && (VL_US_ANESTESISTA != 0 || !isNull(VL_US_ANESTESISTA)),",
				"     disjoint: false) ~> split4@(TRUE4, FALSE4)",
				"split4@TRUE4 select(mapColumn(",
				"          HD_AUTORIZACAO,",
				"          HD_AUTORIZ_EVENTO_SOLICIT,",
				"          HD_AUTORIZ_EVENTO_GERADO,",
				"          HD_TGE,",
				"          HD_BENEF,",
				"          HD_ESTADO_BENEF,",
				"          HD_ESTADO_PREST_EXEC,",
				"          HD_PREST_SOLICITANTE,",
				"          CO_PREST_SOLICITANTE,",
				"          HD_PREST_EXECUTOR,",
				"          CO_PREST_EXECUTOR,",
				"          HD_PREST_FORNECEDOR,",
				"          CO_PREST_FORNECEDOR,",
				"          HD_TP_AUTORIZ,",
				"          HD_GRAU,",
				"          CO_GRAU,",
				"          CO_TP_TRATAMENTO,",
				"          CO_OBJ_TRATAMENTO,",
				"          HD_REGIME_ATEND,",
				"          HD_FINALID_ATEND,",
				"          HD_CARAT_ATEND,",
				"          HD_REGIME_INT,",
				"          HD_TP_ATEND,",
				"          HD_TP_INTERN,",
				"          HD_IND_ACIDENTE,",
				"          HD_TP_CONSULTA,",
				"          HD_PLANO,",
				"          HD_CONTRATO,",
				"          HD_USUARIO,",
				"          HD_TIS_TAB_PRECO,",
				"          CO_TIS_TAB_PRECO,",
				"          HD_CBOS,",
				"          CO_CBOS,",
				"          CO_SITUACAO_AUT,",
				"          CO_SITUACAO_AES,",
				"          CO_SITUACAO_AEG,",
				"          ST_OPCAO_OPME,",
				"          NU_AUTORIZACAO,",
				"          DT_AUTORIZACAO_AUT,",
				"          DT_SOLICITACAO_AUT,",
				"          DT_AUTORIZACAO_AEG,",
				"          DT_ATENDIMENTO_AEG,",
				"          QTDSOLICITADAORIGINAL,",
				"          QTDAUTORIZADA,",
				"          QT_NEGADA,",
				"          VALORUNITARIOSOLICITADO,",
				"          VALORUNITARIONEGOCIADOOPME,",
				"          VALORUNITARIOCALCULADOOPME,",
				"          VALORUNITARIOAUTORIZADOOPME,",
				"          DT_SOLICITACAO_AES,",
				"          NU_NIVEL_AUTORIZACAO,",
				"          CO_ORIGEM_AUTORIZACAO,",
				"          NO_PROF_SOLICITANTE,",
				"          NU_CRM_PROF_SOLICITANTE_AUT,",
				"          PK_TD_CONSELHO_Prof_Solic,",
				"          PK_TD_CONSELHO_Uf_Prof_Solic,",
				"          HD_PREST_SOLICITANTE_AES,",
				"          CO_PREST_SOLICITANTE_AES,",
				"          DS_ORIGEM_SOLICITACAO,",
				"          DS_INDICACAO_CLINICA,",
				"          DT_VALIDADE_AUT,",
				"          HD_PREST_EXECUTOR_AES,",
				"          CO_PREST_EXECUTOR_AES,",
				"          TS_GERACAO_AEG,",
				"          TS_LIBERACAO_AEG,",
				"          HD_USUARIO_GERACAO_AEG,",
				"          ST_HORARIO_ESPECIAL,",
				"          CO_ST_SOLICIT,",
				"          DT_REF_CARGA,",
				"          CTL_DT_EXTRACAO,",
				"          TS_ATENDIMENTO_AEG,",
				"          TS_AUTORIZACAO_AUT,",
				"          TS_AUTORIZACAO_AEG,",
				"          DT_INICIAL = split4@TRUE4@DT_INICIAL,",
				"          NU_PORTE_ANESTESICO = split4@TRUE4@NU_PORTE_ANESTESICO,",
				"          NU_PORTE_SALA,",
				"          VL_US,",
				"          VL_UCO,",
				"          VL_FILME,",
				"          CTL_ORIGEM,",
				"          DT_INICIAL = split4@TRUE4@DT_INICIAL,",
				"          PERCENTUALAUXILIARANESTESISTA,",
				"          VL_US_ANESTESISTA",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"split4@FALSE4 select(mapColumn(",
				"          HD_AUTORIZACAO,",
				"          HD_AUTORIZ_EVENTO_SOLICIT,",
				"          HD_AUTORIZ_EVENTO_GERADO,",
				"          HD_TGE,",
				"          HD_BENEF,",
				"          HD_ESTADO_BENEF,",
				"          HD_ESTADO_PREST_EXEC,",
				"          HD_PREST_SOLICITANTE,",
				"          CO_PREST_SOLICITANTE,",
				"          HD_PREST_EXECUTOR,",
				"          CO_PREST_EXECUTOR,",
				"          HD_PREST_FORNECEDOR,",
				"          CO_PREST_FORNECEDOR,",
				"          HD_TP_AUTORIZ,",
				"          HD_GRAU,",
				"          CO_GRAU,",
				"          CO_TP_TRATAMENTO,",
				"          CO_OBJ_TRATAMENTO,",
				"          HD_REGIME_ATEND,",
				"          HD_FINALID_ATEND,",
				"          HD_CARAT_ATEND,",
				"          HD_REGIME_INT,",
				"          HD_TP_ATEND,",
				"          HD_TP_INTERN,",
				"          HD_IND_ACIDENTE,",
				"          HD_TP_CONSULTA,",
				"          HD_PLANO,",
				"          HD_CONTRATO,",
				"          HD_USUARIO,",
				"          HD_TIS_TAB_PRECO,",
				"          CO_TIS_TAB_PRECO,",
				"          HD_CBOS,",
				"          CO_CBOS,",
				"          CO_SITUACAO_AUT,",
				"          CO_SITUACAO_AES,",
				"          CO_SITUACAO_AEG,",
				"          ST_OPCAO_OPME,",
				"          NU_AUTORIZACAO,",
				"          DT_AUTORIZACAO_AUT,",
				"          DT_SOLICITACAO_AUT,",
				"          DT_AUTORIZACAO_AEG,",
				"          DT_ATENDIMENTO_AEG,",
				"          QTDSOLICITADAORIGINAL,",
				"          QTDAUTORIZADA,",
				"          QT_NEGADA,",
				"          VALORUNITARIOSOLICITADO,",
				"          VALORUNITARIONEGOCIADOOPME,",
				"          VALORUNITARIOCALCULADOOPME,",
				"          VALORUNITARIOAUTORIZADOOPME,",
				"          DT_SOLICITACAO_AES,",
				"          NU_NIVEL_AUTORIZACAO,",
				"          CO_ORIGEM_AUTORIZACAO,",
				"          NO_PROF_SOLICITANTE,",
				"          NU_CRM_PROF_SOLICITANTE_AUT,",
				"          PK_TD_CONSELHO_Prof_Solic,",
				"          PK_TD_CONSELHO_Uf_Prof_Solic,",
				"          HD_PREST_SOLICITANTE_AES,",
				"          CO_PREST_SOLICITANTE_AES,",
				"          DS_ORIGEM_SOLICITACAO,",
				"          DS_INDICACAO_CLINICA,",
				"          DT_VALIDADE_AUT,",
				"          HD_PREST_EXECUTOR_AES,",
				"          CO_PREST_EXECUTOR_AES,",
				"          TS_GERACAO_AEG,",
				"          TS_LIBERACAO_AEG,",
				"          HD_USUARIO_GERACAO_AEG,",
				"          ST_HORARIO_ESPECIAL,",
				"          CO_ST_SOLICIT,",
				"          DT_REF_CARGA,",
				"          CTL_DT_EXTRACAO,",
				"          TS_ATENDIMENTO_AEG,",
				"          TS_AUTORIZACAO_AUT,",
				"          TS_AUTORIZACAO_AEG,",
				"          DT_INICIAL = split4@FALSE4@DT_INICIAL,",
				"          NU_PORTE_ANESTESICO = split4@FALSE4@NU_PORTE_ANESTESICO,",
				"          NU_PORTE_SALA,",
				"          VL_US,",
				"          VL_UCO,",
				"          VL_FILME,",
				"          CTL_ORIGEM",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"select6 derive(PERCENTUALAUXILIARANESTESISTA = toDouble(0),",
				"          VL_US_ANESTESISTA = toDouble(0)) ~> derivedColumn4",
				"union2, select5 union(byName: true)~> union3",
				"union3, derivedColumn4 union(byName: true)~> union4",
				"union4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: 'testes',",
				"     folderPath: 'parquet',",
				"     partitionFileNames:['AUT_EXTRACT_VL_ANESTESISTA'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> prqtAUTEXTRACTANESTESISTA"
			]
		}
	}
}