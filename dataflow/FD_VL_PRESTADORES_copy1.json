{
	"name": "FD_VL_PRESTADORES_copy1",
	"properties": {
		"folder": {
			"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO/Primeiros"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "prqtQR1AUTORIZACAO"
				},
				{
					"linkedService": {
						"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "prqtQRY4VLPRESTADORES"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				},
				{
					"linkedService": {
						"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "prqtAUTSEMVLPREST"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "derColQRY4VLPRESTADORES"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "lkp4PreTgeCboReg"
				},
				{
					"name": "split4PreTgeCboReg"
				},
				{
					"name": "colT4PreTgeCboReg"
				},
				{
					"name": "colF4PreTgeCboReg"
				},
				{
					"name": "lkp3PreTgeCbo"
				},
				{
					"name": "split3PreTgeCbo"
				},
				{
					"name": "colT3PreTgeCbo"
				},
				{
					"name": "union1"
				},
				{
					"name": "colF3PreTgeCbo"
				},
				{
					"name": "lkp3PreTgeReg"
				},
				{
					"name": "split3PreTgeReg"
				},
				{
					"name": "union2"
				},
				{
					"name": "colT3PreTgeReg"
				},
				{
					"name": "colF3PreTgeReg"
				},
				{
					"name": "lkp2PreTge"
				},
				{
					"name": "split2PreTge"
				},
				{
					"name": "colT2PreTge"
				},
				{
					"name": "colF2PreTge"
				},
				{
					"name": "union3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          HD_AUTORIZACAO as long,",
				"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
				"          HD_AUTORIZ_EVENTO_GERADO as integer,",
				"          HD_TGE as integer,",
				"          HD_BENEF as integer,",
				"          HD_ESTADO_BENEF as integer,",
				"          HD_ESTADO_PREST_EXEC as integer,",
				"          HD_PREST_SOLICITANTE as integer,",
				"          CO_PREST_SOLICITANTE as string,",
				"          HD_PREST_EXECUTOR as integer,",
				"          CO_PREST_EXECUTOR as string,",
				"          HD_PREST_FORNECEDOR as integer,",
				"          CO_PREST_FORNECEDOR as string,",
				"          HD_TP_AUTORIZ as integer,",
				"          HD_GRAU as integer,",
				"          CO_GRAU as integer,",
				"          CO_TP_TRATAMENTO as integer,",
				"          CO_OBJ_TRATAMENTO as integer,",
				"          HD_REGIME_ATEND as integer,",
				"          HD_FINALID_ATEND as integer,",
				"          HD_CARAT_ATEND as integer,",
				"          HD_REGIME_INT as integer,",
				"          HD_TP_ATEND as integer,",
				"          HD_TP_INTERN as integer,",
				"          HD_IND_ACIDENTE as integer,",
				"          HD_TP_CONSULTA as integer,",
				"          HD_PLANO as integer,",
				"          HD_CONTRATO as integer,",
				"          HD_USUARIO as integer,",
				"          HD_TIS_TAB_PRECO as integer,",
				"          CO_TIS_TAB_PRECO as string,",
				"          HD_CBOS as integer,",
				"          CO_CBOS as string,",
				"          CO_SITUACAO_AUT as string,",
				"          CO_SITUACAO_AES as string,",
				"          CO_SITUACAO_AEG as string,",
				"          ST_OPCAO_OPME as integer,",
				"          NU_AUTORIZACAO as long,",
				"          DT_AUTORIZACAO_AUT as timestamp,",
				"          DT_SOLICITACAO_AUT as timestamp,",
				"          DT_AUTORIZACAO_AEG as timestamp,",
				"          DT_ATENDIMENTO_AEG as timestamp,",
				"          QTDSOLICITADAORIGINAL as double,",
				"          QTDAUTORIZADA as double,",
				"          QT_NEGADA as double,",
				"          VALORUNITARIOSOLICITADO as double,",
				"          VALORUNITARIONEGOCIADOOPME as double,",
				"          VALORUNITARIOCALCULADOOPME as double,",
				"          VALORUNITARIOAUTORIZADOOPME as double,",
				"          DT_SOLICITACAO_AES as timestamp,",
				"          NU_NIVEL_AUTORIZACAO as integer,",
				"          CO_ORIGEM_AUTORIZACAO as string,",
				"          NO_PROF_SOLICITANTE as string,",
				"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
				"          PK_TD_CONSELHO_Prof_Solic as long,",
				"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
				"          HD_PREST_SOLICITANTE_AES as integer,",
				"          CO_PREST_SOLICITANTE_AES as string,",
				"          DS_ORIGEM_SOLICITACAO as string,",
				"          DS_INDICACAO_CLINICA as string,",
				"          DT_VALIDADE_AUT as timestamp,",
				"          HD_PREST_EXECUTOR_AES as integer,",
				"          CO_PREST_EXECUTOR_AES as string,",
				"          TS_GERACAO_AEG as timestamp,",
				"          TS_LIBERACAO_AEG as timestamp,",
				"          HD_USUARIO_GERACAO_AEG as integer,",
				"          ST_HORARIO_ESPECIAL as string,",
				"          CO_ST_SOLICIT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     fileSystem: 'testes',",
				"     folderPath: 'parquet',",
				"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
				"source(output(",
				"          HD_PRESTADOR as integer,",
				"          HD_TGE as integer,",
				"          HD_CBO as integer,",
				"          HD_REGIME_ATENDIMENTO as integer,",
				"          HD_GRAU as integer,",
				"          DT_INICIAL as timestamp,",
				"          DT_FINAL as timestamp,",
				"          NU_PORTE_ANESTESICO as integer,",
				"          NU_PORTE_SALA as integer,",
				"          VL_US as double,",
				"          VL_UCO as double,",
				"          VL_FILME as double,",
				"          ST_LOOKUP as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     fileSystem: 'testes',",
				"     folderPath: 'parquet',",
				"     fileName: 'QRY4_VL_PRESTADORES') ~> prqtQRY4VLPRESTADORES",
				"prqtQR1AUTORIZACAO select(mapColumn(",
				"          HD_AUTORIZACAO,",
				"          HD_AUTORIZ_EVENTO_SOLICIT,",
				"          HD_AUTORIZ_EVENTO_GERADO,",
				"          HD_TGE,",
				"          HD_PREST_EXECUTOR,",
				"          HD_REGIME_ATEND,",
				"          HD_CBOS,",
				"          DT_ATENDIMENTO_AEG,",
				"          HD_ESTADO_PREST_EXEC,",
				"          HD_ESTADO_BENEF",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"prqtQRY4VLPRESTADORES derive(DT_INICIAL = toDate(DT_INICIAL),",
				"          DT_FINAL = toDate(DT_FINAL)) ~> derColQRY4VLPRESTADORES",
				"select1 derive(HD_TGE = iif(isNull(HD_TGE), -2, HD_TGE),",
				"          HD_PREST_EXECUTOR = iif(isNull(HD_PREST_EXECUTOR), -2, HD_PREST_EXECUTOR),",
				"          HD_REGIME_ATEND = iif(isNull(HD_REGIME_ATEND), -2, HD_REGIME_ATEND),",
				"          HD_CBOS = iif(isNull(HD_CBOS), -2, HD_CBOS),",
				"          DT_ATENDIMENTO_AEG = toDate(DT_ATENDIMENTO_AEG)) ~> derivedColumn2",
				"derivedColumn2, derColQRY4VLPRESTADORES lookup(HD_PREST_EXECUTOR == HD_PRESTADOR",
				"     && derivedColumn2@HD_TGE == prqtQRY4VLPRESTADORES@HD_TGE",
				"     && HD_CBOS == HD_CBO",
				"     && HD_REGIME_ATEND == HD_REGIME_ATENDIMENTO,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lkp4PreTgeCboReg",
				"lkp4PreTgeCboReg split(ST_LOOKUP == toBoolean('1') && between(DT_ATENDIMENTO_AEG, DT_INICIAL, DT_FINAL),",
				"     disjoint: false) ~> split4PreTgeCboReg@(true4PTCR, false4PTCR)",
				"split4PreTgeCboReg@true4PTCR select(mapColumn(",
				"          HD_AUTORIZACAO,",
				"          HD_AUTORIZ_EVENTO_SOLICIT,",
				"          HD_AUTORIZ_EVENTO_GERADO,",
				"          HD_TGE = split4PreTgeCboReg@true4PTCR@HD_TGE,",
				"          HD_PREST_EXECUTOR,",
				"          HD_REGIME_ATEND,",
				"          HD_CBOS,",
				"          DT_INICIAL,",
				"          NU_PORTE_ANESTESICO,",
				"          NU_PORTE_SALA,",
				"          VL_US,",
				"          VL_FILME,",
				"          HD_PREST_EXECUTOR,",
				"          HD_ESTADO_BENEF",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> colT4PreTgeCboReg",
				"split4PreTgeCboReg@false4PTCR select(mapColumn(",
				"          HD_AUTORIZACAO,",
				"          HD_AUTORIZ_EVENTO_SOLICIT,",
				"          HD_AUTORIZ_EVENTO_GERADO,",
				"          HD_TGE = split4PreTgeCboReg@false4PTCR@HD_TGE,",
				"          HD_PREST_EXECUTOR,",
				"          HD_REGIME_ATEND,",
				"          HD_CBOS,",
				"          DT_ATENDIMENTO_AEG,",
				"          HD_ESTADO_PREST_EXEC,",
				"          HD_ESTADO_BENEF",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> colF4PreTgeCboReg",
				"colF4PreTgeCboReg, derColQRY4VLPRESTADORES lookup(HD_PREST_EXECUTOR == HD_PRESTADOR",
				"     && colF4PreTgeCboReg@HD_TGE == prqtQRY4VLPRESTADORES@HD_TGE",
				"     && HD_CBOS == HD_CBO,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lkp3PreTgeCbo",
				"lkp3PreTgeCbo split(ST_LOOKUP == toBoolean('1') && between(DT_ATENDIMENTO_AEG, DT_INICIAL, DT_FINAL),",
				"     disjoint: false) ~> split3PreTgeCbo@(true3PreTgeCbo, false3PreTgeCbo)",
				"split3PreTgeCbo@true3PreTgeCbo select(mapColumn(",
				"          HD_AUTORIZACAO,",
				"          HD_AUTORIZ_EVENTO_SOLICIT,",
				"          HD_AUTORIZ_EVENTO_GERADO,",
				"          HD_TGE = split3PreTgeCbo@true3PreTgeCbo@HD_TGE,",
				"          HD_PREST_EXECUTOR,",
				"          HD_REGIME_ATEND,",
				"          HD_CBOS,",
				"          DT_INICIAL,",
				"          NU_PORTE_ANESTESICO,",
				"          NU_PORTE_SALA,",
				"          VL_US,",
				"          VL_FILME,",
				"          HD_ESTADO_PREST_EXEC,",
				"          HD_ESTADO_BENEF",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> colT3PreTgeCbo",
				"colT4PreTgeCboReg, colT3PreTgeCbo union(byName: true)~> union1",
				"split3PreTgeCbo@false3PreTgeCbo select(mapColumn(",
				"          HD_AUTORIZACAO,",
				"          HD_AUTORIZ_EVENTO_SOLICIT,",
				"          HD_AUTORIZ_EVENTO_GERADO,",
				"          HD_TGE = split3PreTgeCbo@false3PreTgeCbo@HD_TGE,",
				"          HD_PREST_EXECUTOR,",
				"          HD_REGIME_ATEND,",
				"          HD_CBOS,",
				"          DT_ATENDIMENTO_AEG,",
				"          HD_ESTADO_PREST_EXEC,",
				"          HD_ESTADO_BENEF",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> colF3PreTgeCbo",
				"colF3PreTgeCbo, derColQRY4VLPRESTADORES lookup(HD_PREST_EXECUTOR == HD_PRESTADOR",
				"     && colF3PreTgeCbo@HD_TGE == prqtQRY4VLPRESTADORES@HD_TGE",
				"     && HD_REGIME_ATEND == HD_REGIME_ATENDIMENTO,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lkp3PreTgeReg",
				"lkp3PreTgeReg split(ST_LOOKUP == toBoolean('1') && between(DT_ATENDIMENTO_AEG, DT_INICIAL, DT_FINAL),",
				"     disjoint: false) ~> split3PreTgeReg@(true3PreTgeReg, false3PreTgeReg)",
				"union1, colT3PreTgeReg union(byName: true)~> union2",
				"split3PreTgeReg@true3PreTgeReg select(mapColumn(",
				"          HD_AUTORIZACAO,",
				"          HD_AUTORIZ_EVENTO_SOLICIT,",
				"          HD_AUTORIZ_EVENTO_GERADO,",
				"          HD_TGE = split3PreTgeReg@true3PreTgeReg@HD_TGE,",
				"          HD_PREST_EXECUTOR,",
				"          HD_REGIME_ATEND,",
				"          HD_CBOS,",
				"          DT_INICIAL,",
				"          NU_PORTE_ANESTESICO,",
				"          NU_PORTE_SALA,",
				"          VL_US,",
				"          VL_FILME,",
				"          HD_ESTADO_PREST_EXEC,",
				"          HD_ESTADO_BENEF",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> colT3PreTgeReg",
				"split3PreTgeReg@false3PreTgeReg select(mapColumn(",
				"          HD_AUTORIZACAO,",
				"          HD_AUTORIZ_EVENTO_SOLICIT,",
				"          HD_AUTORIZ_EVENTO_GERADO,",
				"          HD_TGE = split3PreTgeReg@false3PreTgeReg@HD_TGE,",
				"          HD_PREST_EXECUTOR,",
				"          HD_REGIME_ATEND,",
				"          HD_CBOS,",
				"          DT_ATENDIMENTO_AEG,",
				"          HD_ESTADO_PREST_EXEC,",
				"          HD_ESTADO_BENEF",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> colF3PreTgeReg",
				"colF3PreTgeReg, derColQRY4VLPRESTADORES lookup(HD_PREST_EXECUTOR == HD_PRESTADOR",
				"     && colF3PreTgeReg@HD_TGE == prqtQRY4VLPRESTADORES@HD_TGE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lkp2PreTge",
				"lkp2PreTge split(ST_LOOKUP == toBoolean('1') && between(DT_ATENDIMENTO_AEG, DT_INICIAL, DT_FINAL),",
				"     disjoint: false) ~> split2PreTge@(true2PreTge, false2PreTge)",
				"split2PreTge@true2PreTge select(mapColumn(",
				"          HD_AUTORIZACAO,",
				"          HD_AUTORIZ_EVENTO_SOLICIT,",
				"          HD_AUTORIZ_EVENTO_GERADO,",
				"          HD_TGE = split2PreTge@true2PreTge@HD_TGE,",
				"          HD_PREST_EXECUTOR,",
				"          HD_REGIME_ATEND,",
				"          HD_CBOS,",
				"          DT_INICIAL,",
				"          NU_PORTE_ANESTESICO,",
				"          NU_PORTE_SALA,",
				"          VL_US,",
				"          VL_FILME,",
				"          HD_ESTADO_PREST_EXEC,",
				"          HD_ESTADO_BENEF",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> colT2PreTge",
				"split2PreTge@false2PreTge select(mapColumn(",
				"          HD_AUTORIZACAO,",
				"          HD_AUTORIZ_EVENTO_SOLICIT,",
				"          HD_AUTORIZ_EVENTO_GERADO,",
				"          HD_TGE = split2PreTge@false2PreTge@HD_TGE,",
				"          HD_PREST_EXECUTOR,",
				"          HD_REGIME_ATEND,",
				"          HD_CBOS,",
				"          DT_ATENDIMENTO_AEG,",
				"          HD_ESTADO_PREST_EXEC,",
				"          HD_ESTADO_BENEF",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> colF2PreTge",
				"union2, colT2PreTge union(byName: true)~> union3",
				"union3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: 'testes',",
				"     folderPath: 'parquet',",
				"     partitionFileNames:['AUT_VL_PRESTADORES'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"colF2PreTge sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: 'testes',",
				"     folderPath: 'parquet',",
				"     partitionFileNames:['AUT_SEM_VL_PREST'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> prqtAUTSEMVLPREST"
			]
		}
	}
}