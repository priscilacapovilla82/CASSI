{
	"name": "FD_CARACTERISCA_AUTORIZACAO",
	"properties": {
		"folder": {
			"name": "DESENVOLVIMENTO/FATOS/DIARIAS/AUTORIZACAO"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "prqtQR1AUTORIZACAO"
				},
				{
					"linkedService": {
						"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "prqtQRY2CARACTAUTORIZACAO"
				},
				{
					"linkedService": {
						"referenceName": "lnk_synprod",
						"type": "LinkedServiceReference"
					},
					"name": "poolTDCARACAUTORIZ"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "wrkcassisynapseworkspace001-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "prqtAUTTDCARACAUTORIZACAO"
				}
			],
			"transformations": [
				{
					"name": "colQR1AUTORIZACAO"
				},
				{
					"name": "lkpQRY2CARACTAUTORIZ"
				},
				{
					"name": "derColQRY2CARACTAUTORIZ"
				},
				{
					"name": "colQRY2CARACTAUTORIZ"
				},
				{
					"name": "lkpTDCARACTAUTORIZ"
				},
				{
					"name": "derColTDCARACAUTORIZ"
				}
			],
			"scriptLines": [
				"source(output(",
				"          HD_AUTORIZACAO as long,",
				"          HD_AUTORIZ_EVENTO_SOLICIT as integer,",
				"          HD_AUTORIZ_EVENTO_GERADO as integer,",
				"          HD_TGE as integer,",
				"          HD_BENEF as integer,",
				"          HD_ESTADO_BENEF as integer,",
				"          HD_ESTADO_PREST_EXEC as integer,",
				"          HD_PREST_SOLICITANTE as integer,",
				"          CO_PREST_SOLICITANTE as string,",
				"          HD_PREST_EXECUTOR as integer,",
				"          CO_PREST_EXECUTOR as string,",
				"          HD_PREST_FORNECEDOR as integer,",
				"          CO_PREST_FORNECEDOR as string,",
				"          HD_TP_AUTORIZ as integer,",
				"          HD_GRAU as integer,",
				"          CO_GRAU as integer,",
				"          CO_TP_TRATAMENTO as integer,",
				"          CO_OBJ_TRATAMENTO as integer,",
				"          HD_REGIME_ATEND as integer,",
				"          HD_FINALID_ATEND as integer,",
				"          HD_CARAT_ATEND as integer,",
				"          HD_REGIME_INT as integer,",
				"          HD_TP_ATEND as integer,",
				"          HD_TP_INTERN as integer,",
				"          HD_IND_ACIDENTE as integer,",
				"          HD_TP_CONSULTA as integer,",
				"          HD_PLANO as integer,",
				"          HD_CONTRATO as integer,",
				"          HD_USUARIO as integer,",
				"          HD_TIS_TAB_PRECO as integer,",
				"          CO_TIS_TAB_PRECO as string,",
				"          HD_CBOS as integer,",
				"          CO_CBOS as string,",
				"          CO_SITUACAO_AUT as string,",
				"          CO_SITUACAO_AES as string,",
				"          CO_SITUACAO_AEG as string,",
				"          ST_OPCAO_OPME as integer,",
				"          NU_AUTORIZACAO as long,",
				"          DT_AUTORIZACAO_AUT as timestamp,",
				"          DT_SOLICITACAO_AUT as timestamp,",
				"          DT_AUTORIZACAO_AEG as timestamp,",
				"          DT_ATENDIMENTO_AEG as timestamp,",
				"          QTDSOLICITADAORIGINAL as double,",
				"          QTDAUTORIZADA as double,",
				"          QT_NEGADA as double,",
				"          VALORUNITARIOSOLICITADO as double,",
				"          VALORUNITARIONEGOCIADOOPME as double,",
				"          VALORUNITARIOCALCULADOOPME as double,",
				"          VALORUNITARIOAUTORIZADOOPME as double,",
				"          DT_SOLICITACAO_AES as timestamp,",
				"          NU_NIVEL_AUTORIZACAO as integer,",
				"          CO_ORIGEM_AUTORIZACAO as string,",
				"          NO_PROF_SOLICITANTE as string,",
				"          NU_CRM_PROF_SOLICITANTE_AUT as string,",
				"          PK_TD_CONSELHO_Prof_Solic as long,",
				"          PK_TD_CONSELHO_Uf_Prof_Solic as long,",
				"          HD_PREST_SOLICITANTE_AES as integer,",
				"          CO_PREST_SOLICITANTE_AES as string,",
				"          DS_ORIGEM_SOLICITACAO as string,",
				"          DS_INDICACAO_CLINICA as string,",
				"          DT_VALIDADE_AUT as timestamp,",
				"          HD_PREST_EXECUTOR_AES as integer,",
				"          CO_PREST_EXECUTOR_AES as string,",
				"          TS_GERACAO_AEG as timestamp,",
				"          TS_LIBERACAO_AEG as timestamp,",
				"          HD_USUARIO_GERACAO_AEG as integer,",
				"          ST_HORARIO_ESPECIAL as string,",
				"          CO_ST_SOLICIT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     fileSystem: 'testes',",
				"     folderPath: 'parquet',",
				"     fileName: 'QR1_AUTORIZACAO') ~> prqtQR1AUTORIZACAO",
				"source(output(",
				"          HD_AUTORIZ as integer,",
				"          REGIMEATENDIMENTO as integer,",
				"          CONDICAOATENDIMENTO as integer,",
				"          LOCALATENDIMENTO as integer,",
				"          FINALIDADEATENDIMENTO as integer,",
				"          TIPOAUTORIZACAO as integer,",
				"          TIPOTRATAMENTO as integer,",
				"          OBJETIVOTRATAMENTO as integer,",
				"          ACOMODACAO as integer,",
				"          MOTIVOALTA as integer,",
				"          ST_LOOKUP as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     fileSystem: 'testes',",
				"     folderPath: 'parquet',",
				"     fileName: 'QRY2_CARACT_AUTORIZACAO') ~> prqtQRY2CARACTAUTORIZACAO",
				"source(output(",
				"          SK_TD_CARACTERISTICA_AUTORIZ as decimal(10,0),",
				"          CO_HD_REGIME_ATENDIMENTO as decimal(10,0),",
				"          CO_HD_CONDICAO_ATENDIMENTO as decimal(10,0),",
				"          CO_HD_LOCAL_ATENDIMENTO as decimal(10,0),",
				"          CO_HD_FINALIDADE_ATENDIMENTO as decimal(10,0),",
				"          CO_HD_TIPO_AUTORIZACAO as decimal(10,0),",
				"          CO_HD_TIPO_TRATAMENTO as decimal(10,0),",
				"          CO_HD_OBJETIVO_TRATAMENTO as decimal(10,0),",
				"          CO_HD_ACOMODACAO as decimal(10,0),",
				"          CO_HD_MOTIVO_ALTA as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'synapseanalytics',",
				"     query: 'SELECT SK_TD_CARACTERISTICA_AUTORIZ AS SK_TD_CARACTERISTICA_AUTORIZ\\n,CO_HD_REGIME_ATENDIMENTO AS CO_HD_REGIME_ATENDIMENTO\\n,CO_HD_CONDICAO_ATENDIMENTO AS CO_HD_CONDICAO_ATENDIMENTO\\n,CO_HD_LOCAL_ATENDIMENTO AS CO_HD_LOCAL_ATENDIMENTO\\n,CO_HD_FINALIDADE_ATENDIMENTO AS CO_HD_FINALIDADE_ATENDIMENTO\\n,CO_HD_TIPO_AUTORIZACAO AS CO_HD_TIPO_AUTORIZACAO\\n,CO_HD_TIPO_TRATAMENTO AS CO_HD_TIPO_TRATAMENTO\\n,CO_HD_OBJETIVO_TRATAMENTO AS CO_HD_OBJETIVO_TRATAMENTO\\n,CO_HD_ACOMODACAO AS CO_HD_ACOMODACAO\\n,CO_HD_MOTIVO_ALTA AS CO_HD_MOTIVO_ALTA\\nFROM PRODIM.TD_CARACTERISTICA_AUTORIZACAO\\nWHERE ST_REGISTRO_CORRENTE = \\'S\\'',",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     staged: true) ~> poolTDCARACAUTORIZ",
				"prqtQR1AUTORIZACAO select(mapColumn(",
				"          HD_AUTORIZACAO,",
				"          HD_AUTORIZ_EVENTO_SOLICIT,",
				"          HD_AUTORIZ_EVENTO_GERADO",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> colQR1AUTORIZACAO",
				"colQR1AUTORIZACAO, prqtQRY2CARACTAUTORIZACAO lookup(HD_AUTORIZACAO == HD_AUTORIZ,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lkpQRY2CARACTAUTORIZ",
				"colQRY2CARACTAUTORIZ derive(REGIMEATENDIMENTO = iif(isNull(REGIMEATENDIMENTO), -2, REGIMEATENDIMENTO),",
				"          CONDICAOATENDIMENTO = iif(isNull(CONDICAOATENDIMENTO), -2, CONDICAOATENDIMENTO),",
				"          LOCALATENDIMENTO = iif(isNull(LOCALATENDIMENTO), -2, LOCALATENDIMENTO),",
				"          FINALIDADEATENDIMENTO = iif(isNull(FINALIDADEATENDIMENTO), -2, FINALIDADEATENDIMENTO),",
				"          TIPOAUTORIZACAO = iif(isNull(TIPOAUTORIZACAO), -2, TIPOAUTORIZACAO),",
				"          TIPOTRATAMENTO = iif(isNull(TIPOTRATAMENTO), -2, TIPOTRATAMENTO),",
				"          OBJETIVOTRATAMENTO = iif(isNull(OBJETIVOTRATAMENTO), -2, OBJETIVOTRATAMENTO),",
				"          ACOMODACAO = iif(isNull(ACOMODACAO), -2, ACOMODACAO),",
				"          MOTIVOALTA = iif(isNull(MOTIVOALTA), -2, MOTIVOALTA)) ~> derColQRY2CARACTAUTORIZ",
				"lkpQRY2CARACTAUTORIZ select(mapColumn(",
				"          HD_AUTORIZACAO,",
				"          HD_AUTORIZ_EVENTO_SOLICIT,",
				"          HD_AUTORIZ_EVENTO_GERADO,",
				"          REGIMEATENDIMENTO,",
				"          CONDICAOATENDIMENTO,",
				"          LOCALATENDIMENTO,",
				"          FINALIDADEATENDIMENTO,",
				"          TIPOAUTORIZACAO,",
				"          TIPOTRATAMENTO,",
				"          OBJETIVOTRATAMENTO,",
				"          ACOMODACAO,",
				"          MOTIVOALTA",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> colQRY2CARACTAUTORIZ",
				"derColQRY2CARACTAUTORIZ, derColTDCARACAUTORIZ lookup(REGIMEATENDIMENTO == CO_HD_REGIME_ATENDIMENTO",
				"     && CONDICAOATENDIMENTO == CO_HD_CONDICAO_ATENDIMENTO",
				"     && LOCALATENDIMENTO == CO_HD_LOCAL_ATENDIMENTO",
				"     && FINALIDADEATENDIMENTO == CO_HD_FINALIDADE_ATENDIMENTO",
				"     && TIPOAUTORIZACAO == CO_HD_TIPO_AUTORIZACAO",
				"     && TIPOTRATAMENTO == CO_HD_TIPO_TRATAMENTO",
				"     && OBJETIVOTRATAMENTO == CO_HD_OBJETIVO_TRATAMENTO",
				"     && ACOMODACAO == CO_HD_ACOMODACAO",
				"     && MOTIVOALTA == CO_HD_ACOMODACAO,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lkpTDCARACTAUTORIZ",
				"poolTDCARACAUTORIZ derive(CO_HD_REGIME_ATENDIMENTO = toInteger(CO_HD_REGIME_ATENDIMENTO),",
				"          CO_HD_CONDICAO_ATENDIMENTO = toInteger(CO_HD_CONDICAO_ATENDIMENTO),",
				"          CO_HD_LOCAL_ATENDIMENTO = toInteger(CO_HD_LOCAL_ATENDIMENTO),",
				"          CO_HD_FINALIDADE_ATENDIMENTO = toInteger(CO_HD_FINALIDADE_ATENDIMENTO),",
				"          CO_HD_TIPO_AUTORIZACAO = toInteger(CO_HD_TIPO_AUTORIZACAO),",
				"          CO_HD_TIPO_TRATAMENTO = toInteger(CO_HD_TIPO_TRATAMENTO),",
				"          CO_HD_OBJETIVO_TRATAMENTO = toInteger(CO_HD_OBJETIVO_TRATAMENTO),",
				"          CO_HD_ACOMODACAO = toInteger(CO_HD_ACOMODACAO),",
				"          CO_HD_MOTIVO_ALTA = toInteger(CO_HD_MOTIVO_ALTA)) ~> derColTDCARACAUTORIZ",
				"lkpTDCARACTAUTORIZ sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: 'testes',",
				"     folderPath: 'parquet',",
				"     partitionFileNames:['AUT_TD_CARAC_AUTORIZACAO'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> prqtAUTTDCARACAUTORIZACAO"
			]
		}
	}
}